DDL

  CREATE OR REPLACE PROCEDURE "ACCESSCONTROL"."SP_LOCAL_PARCEIRO_SAP" (
   P_OPERACAO           IN VARCHAR2,
   P_LOPA_ID            LOCAL_PARCEIRO.LOPA_ID%TYPE := NULL,
   P_CIDA_ID            LOCAL_PARCEIRO.CIDA_ID%TYPE := NULL,
   P_PARC_ID            LOCAL_PARCEIRO.PARC_ID%TYPE := NULL,
   P_LOPA_RAZAO_SOCIAL  LOCAL_PARCEIRO.LOPA_RAZAO_SOCIAL%TYPE := NULL,
   P_LOPA_NOME_FANTASIA LOCAL_PARCEIRO.LOPA_NM_FANTASIA%TYPE := NULL,
   P_LOPA_CNPJ          LOCAL_PARCEIRO.LOPA_CNPJ%TYPE := NULL,
   P_LOPA_CPF           LOCAL_PARCEIRO.LOPA_CPF%TYPE := NULL,
   P_LOPA_ENDERECO      LOCAL_PARCEIRO.LOPA_ENDERECO%TYPE := NULL,
   P_LOPA_EMAIL         LOCAL_PARCEIRO.LOPA_EMAIL%TYPE := NULL,
   P_LOPA_TELEFONE      LOCAL_PARCEIRO.LOPA_TELEFONE%TYPE := NULL,
   P_LOPA_FAX           LOCAL_PARCEIRO.LOPA_FAX%TYPE := NULL,
   P_LOPA_ARMADOR       LOCAL_PARCEIRO.LOPA_ARMADOR%TYPE := NULL,
   P_LOPA_ID_TRA        LOCAL_PARCEIRO.LOPA_ID_TRA%TYPE := NULL,
   P_LOPA_ATIVO         LOCAL_PARCEIRO.LOPA_ATIVO%TYPE := NULL,
   P_BTP_EMP_CONSTANTE  LOCAL_PARCEIRO.BTP_EMP_CONSTANTE%TYPE := NULL,
   P_LOPA_SAP_ID        LOCAL_PARCEIRO.LOPA_SAP_ID%TYPE := NULL,
   P_LOPA_GRUPOCONTAS   VARCHAR2 := NULL,
   P_CIDA_NOME          CIDADE.CIDA_NOME%TYPE,   
   P_LOCA_BAIRRO        LOCAL_PARCEIRO.LOPA_BAIRRO%TYPE := NULL,
   P_LOPA_CEP           LOCAL_PARCEIRO.LOPA_CEP%TYPE := NULL,
   P_LOPA_CELULAR       LOCAL_PARCEIRO.LOPA_CELULAR%TYPE := NULL,
   P_LOPA_INSCRICAO_ESTADUAL LOCAL_PARCEIRO.LOPA_INSCRICAO_ESTADUAL%TYPE := NULL,
   P_LOPA_INSCRICAO_MUNICIPAL LOCAL_PARCEIRO.LOPA_INSCRICAO_MUNICIPAL%TYPE := NULL
   )
IS
   RAZAO            EXCEPTION;
   NMFANT           EXCEPTION;
   CNPJ             EXCEPTION;
   CPF              EXCEPTION;
   EXISTE           EXCEPTION;
   AMARRACAO        EXCEPTION;   
   EXCEPTIONCIDADE  EXCEPTION;
   EXCEPTIONSAPID   EXCEPTION;   
   
   NUM_COUNT    NUMBER := 0;
   ATUALIZAR    NUMBER := 0;
   V_LOPA_ID    NUMBER := 0;
   V_CIDA_ID    NUMBER := 0;
   V_PARC_ID    NUMBER := 0;
   V_ROWS NUMBER := 0;
-----------------------------------------------------------------
--Criação: Wellington - 24/07/2012
--Motivo: Incremento da estrutura para o SAP e colocação do padrão
-----------------------------------------------------------------

BEGIN
   
   --------------------------------------------------------------
   -- WELLINGTON: INÍCIO DA GRAVAÇÃO DO LOG DE RECEBIMENTO. 
   --------------------------------------------------------------

   INSERT INTO LOG_RECEBIMENTO_SAP VALUES (SQ_LOG_RECEBIMENTO_SAP.NEXTVAL,
   'P_OPERACAO: ' ||' - '||
   P_OPERACAO  ||' -P_LOPA_ID: '||
   P_LOPA_ID   ||' -P_CIDA_ID: '||
   P_CIDA_ID   ||' -P_PARC_ID: '||
   P_PARC_ID            ||' -P_LOPA_RAZAO_SOCIAL: '||
   P_LOPA_RAZAO_SOCIAL  ||' -P_LOPA_NOME_FANTASIA: '||
   P_LOPA_NOME_FANTASIA ||' -P_LOPA_CNPJ: '||
   P_LOPA_CNPJ          ||' -P_LOPA_CPF: '||
   P_LOPA_CPF           ||' -P_LOPA_ENDERECO: '||
   P_LOPA_ENDERECO      ||' -P_LOPA_EMAIL: '||
   P_LOPA_EMAIL         ||' -P_LOPA_TELEFONE: '||
   P_LOPA_TELEFONE      ||' -P_LOPA_FAX: '||
   P_LOPA_FAX           ||' -P_LOPA_ARMADOR: '||
   P_LOPA_ARMADOR       ||' -P_LOPA_ID_TRA: '||
   P_LOPA_ID_TRA        ||' -P_LOPA_ATIVO: '||
   P_LOPA_ATIVO         ||' -P_BTP_EMP_CONSTANTE: '||
   P_BTP_EMP_CONSTANTE  ||' -P_LOPA_SAP_ID: '||
   P_LOPA_SAP_ID        ||' -P_LOPA_GRUPOCONTAS:'||
   P_LOPA_GRUPOCONTAS   || '-P_CIDA_NOME:' ||
   P_CIDA_NOME
   )
   ;
   
   --------------------------------------------------------------
   -- WELLINGTON: FIM DA GRAVAÇÃO E COMMIT PARA GARANTIR O LOG
   -- MESMO SE OCORRER ERRO NO RESTANTE DO PROCESSO.       
   --------------------------------------------------------------
   
   commit;
   
      
   -------------------------------------------------------------------
   -- INI: VERIFICAÇÃO DA EXISTENCIA DA HOLDING PARA GRAVAR PARC_ID --
   -- WELLINGTON: SE FOR GRUPO DE CONTAS Y004, PODE OCORRER DE EXISTIR--
   -- CNPJ IGUAL, OU SEJA VAI COLOCAR COMO PARCEIRO                 --
   -------------------------------------------------------------------
   
   
   IF TRIM(P_LOPA_GRUPOCONTAS) = 'Y004' THEN
    -- WELLINGTON: NÃO PODEMOS FAZER UM SELECT QUE NÃO RETORNE VALOR PARA COLOCAR EM UMA VARIÁVEL.
    SELECT COUNT(PARC_ID) INTO V_PARC_ID
    FROM PARCEIRO 
    WHERE PARC_CNPJ = TRIM(P_LOPA_CNPJ);
    
    IF V_PARC_ID = 1 THEN
        SELECT PARC_ID INTO V_PARC_ID
        FROM PARCEIRO 
        WHERE PARC_CNPJ = P_LOPA_CNPJ;   
    ELSIF V_PARC_ID = 0 THEN    
        SELECT SQ_PARCEIRO.NEXTVAL INTO V_PARC_ID FROM DUAL;
        INSERT INTO PARCEIRO VALUES(V_PARC_ID,UPPER(P_LOPA_RAZAO_SOCIAL),1,SYSDATE,P_LOPA_CNPJ);
    END IF;
    
   END IF;
   
   -------------------------------------------------------------------
   -- FIM: VERIFICAÇÃO DA EXISTENCIA DA HOLDING PARA GRAVAR PARC_ID --
   -------------------------------------------------------------------
   
   -------------------------------------------------------------------
   -- INI: WELLINGTON: VERIFICAÇÃO DA CIDADE NO PRÉ-BILLING.        --
   -------------------------------------------------------------------
   IF TRIM(P_CIDA_NOME) IS NULL 
   THEN 
    RAISE EXCEPTIONCIDADE;
   ELSE
    SELECT COUNT(*) INTO V_CIDA_ID 
    FROM CIDADE
    WHERE CIDA_NOME = UPPER(LTRIM(RTRIM(P_CIDA_NOME)));
    
    IF V_CIDA_ID = 0 
    THEN
        RAISE EXCEPTIONCIDADE;
    ELSE
        SELECT CIDA_ID INTO V_CIDA_ID 
        FROM CIDADE
        WHERE CIDA_NOME = UPPER(LTRIM(RTRIM(P_CIDA_NOME)));    
    END IF;    
   END IF;
   
   -------------------------------------------------------------------
   -- FIM: WELLINGTON: VERIFICAÇÃO DA CIDADE NO PRÉ-BILLING.        --
   -------------------------------------------------------------------
   
   -------------------------------------------------------------------
   -- INI: WELLINGTON: VERIFICAÇÃO DE EXISTÊNCIA DO ID DO SAP O QUE --
   -- RESOLVE SE É UPDATE OU INSERT NA BASE.                        --
   -------------------------------------------------------------------
   IF TRIM(P_LOPA_SAP_ID) IS NULL
   THEN
    RAISE EXCEPTIONSAPID;
   ELSE
    SELECT COUNT(LOPA_ID) INTO V_LOPA_ID 
    FROM LOCAL_PARCEIRO
    WHERE LOPA_SAP_ID = TRIM(P_LOPA_SAP_ID);
    
    IF V_LOPA_ID = 1 THEN
        SELECT LOPA_ID INTO V_LOPA_ID 
        FROM LOCAL_PARCEIRO
        WHERE LOPA_SAP_ID = TRIM(P_LOPA_SAP_ID);
    END IF;
   END IF;
   -------------------------------------------------------------------
   -- FIM: WELLINGTON: VERIFICAÇÃO DE EXISTÊNCIA DO ID DO SAP O QUE --
   -- RESOLVE SE É UPDATE OU INSERT NA BASE.                        --
   -------------------------------------------------------------------
   
   -------------------------------------------------------------------
   -- INI: WELLINGTON: CASO NÃO ENCONTRE PELO SAP ID, PROCURAR PELO --
   -- DOC. PARA GARANTIR QUE NÃO HAVERÁ DUPLICIDADE DE CNPJ NA BASE --
   -------------------------------------------------------------------   
   IF V_LOPA_ID = 0 
   THEN
    SELECT COUNT(LOPA_ID) INTO V_LOPA_ID
    FROM LOCAL_PARCEIRO 
    WHERE LOPA_CNPJ = TRIM(P_LOPA_CNPJ);
    
    IF V_LOPA_ID = 1 THEN
        SELECT LOPA_ID INTO V_LOPA_ID
        FROM LOCAL_PARCEIRO 
        WHERE LOPA_CNPJ = TRIM(P_LOPA_CNPJ);
    END IF;   
   END IF;
   
   IF V_LOPA_ID = 0 
   THEN
    SELECT COUNT(LOPA_ID) INTO V_LOPA_ID
    FROM LOCAL_PARCEIRO 
    WHERE LOPA_CPF = TRIM(P_LOPA_CPF);
    
    IF V_LOPA_ID = 1 THEN
        SELECT LOPA_ID INTO V_LOPA_ID
        FROM LOCAL_PARCEIRO 
        WHERE LOPA_CPF = TRIM(P_LOPA_CPF);
    END IF;
       
   END IF;
   
   -------------------------------------------------------------------
   -- FIM:WELLINGTON: CASO NÃO ENCONTRE PELO SAP ID, PROCURAR PELO  --
   -- DOC. PARA GARANTIR QUE NÃO HAVERÁ DUPLICIDADE DE CNPJ NA BASE --
   -------------------------------------------------------------------
   
   -------------------------------------------------------------------
   -- INI:WELLINGTON SE NÃO ENCONTROU LOPA_ID ENTÃO EH INSERÇÃO     --
   -------------------------------------------------------------------   
   IF V_LOPA_ID = 0
   THEN           
      /*   
      SELECT COUNT(*) INTO NUM_COUNT
      FROM ACCESSCONTROL.LOCAL_PARCEIRO
      WHERE LOPA_RAZAO_SOCIAL = P_LOPA_RAZAO_SOCIAL;
      
      IF NUM_COUNT > 0
      THEN
         RAISE RAZAO;
      END IF;
      

      SELECT COUNT (*)
      INTO NUM_COUNT
      FROM ACCESSCONTROL.LOCAL_PARCEIRO
      WHERE LOPA_NM_FANTASIA = P_LOPA_NOME_FANTASIA;

      IF NUM_COUNT > 0
      THEN
         RAISE NMFANT;
      END IF;
     */
      IF TRIM(P_LOPA_CNPJ) IS NOT NULL THEN
          SELECT COUNT (*)
          INTO NUM_COUNT
          FROM ACCESSCONTROL.LOCAL_PARCEIRO
          WHERE LOPA_CNPJ = TRIM(P_LOPA_CNPJ);

          IF NUM_COUNT > 0
          THEN
             RAISE CNPJ;
          END IF;
      END IF;

      IF TRIM(P_LOPA_CPF) IS NOT NULL THEN
        SELECT COUNT (*)
        INTO NUM_COUNT
        FROM ACCESSCONTROL.LOCAL_PARCEIRO
        WHERE LOPA_CPF = TRIM(P_LOPA_CPF);

        IF NUM_COUNT > 0
        THEN
            RAISE CPF;
        END IF;
      END IF;
    
      
    INSERT INTO ACCESSCONTROL.LOCAL_PARCEIRO (LOPA_ID,
        CIDA_ID,
        PARC_ID,
        LOPA_RAZAO_SOCIAL,
        LOPA_NM_FANTASIA,
        LOPA_CNPJ,
        LOPA_CPF,
        LOPA_ENDERECO,
        LOPA_EMAIL,
        LOPA_TELEFONE,
        LOPA_FAX,
        LOPA_ARMADOR,
        LOPA_ID_TRA,
        BTP_EMP_CONSTANTE,
        LOPA_SAP_ID,
        LOPA_BAIRRO,
        LOPA_CEP,
        LOPA_CELULAR,
        LOPA_INSCRICAO_ESTADUAL,
        LOPA_INSCRICAO_MUNICIPAL)
    VALUES (SQ_LOCAL_PARCEIRO.NEXTVAL,
        V_CIDA_ID,
        CASE WHEN TRIM(V_PARC_ID) <> 0 THEN TRIM(V_PARC_ID) ELSE NULL END,
        UPPER(P_LOPA_RAZAO_SOCIAL),
        UPPER(P_LOPA_NOME_FANTASIA),        
        -- WELLINGTON: ATENÇÃO QUANDO TIVER PARCEIRO, NÃO DEVEMOS INSERRIR O CNPJ
        -- NA TABELA DE LOCAL PARCEIRO, POIS O CNPJ ESTÁ NO PARCEIRO - 25/09/2012
        CASE WHEN TRIM(V_PARC_ID) <> 0 THEN NULL ELSE TRIM(P_LOPA_CNPJ) END,
        TRIM(P_LOPA_CPF),
        CASE WHEN P_LOPA_ENDERECO = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_ENDERECO))) ELSE UPPER(P_LOPA_ENDERECO) END, 
        CASE WHEN P_LOPA_EMAIL = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_EMAIL))) ELSE UPPER(P_LOPA_EMAIL) END,        
        CASE WHEN P_LOPA_TELEFONE = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_TELEFONE))) ELSE UPPER(P_LOPA_TELEFONE) END,        
        CASE WHEN P_LOPA_FAX = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_FAX))) ELSE UPPER(P_LOPA_FAX) END,        
        P_LOPA_ARMADOR,        
        TRIM(P_LOPA_ID_TRA),
        CASE WHEN P_BTP_EMP_CONSTANTE = ' ' THEN UPPER(LTRIM(TRIM(P_BTP_EMP_CONSTANTE))) ELSE UPPER(P_BTP_EMP_CONSTANTE) END,
        TRIM(P_LOPA_SAP_ID),
        UPPER(LTRIM(RTRIM(P_LOCA_BAIRRO))),
        UPPER(LTRIM(RTRIM(P_LOPA_CEP))),
        LTRIM(RTRIM(P_LOPA_CELULAR)),
        LTRIM(RTRIM(P_LOPA_INSCRICAO_ESTADUAL)),
        LTRIM(RTRIM(P_LOPA_INSCRICAO_MUNICIPAL))
        );
        
        IF P_LOPA_CNPJ IS NULL THEN
        
            SELECT COUNT (*)
            INTO V_ROWS
            FROM TOPS.CUSTOMER CUST
           WHERE CUST.ADDR1 = P_LOPA_CNPJ ;

          IF V_ROWS = 0
          THEN
             INSERT
               INTO TOPS.CUSTOMER (CUST_REG_NO,
                                   CUST_TYPE,
                                   FULL_NAME,
                                   ADDR1)
             VALUES (SQ_CLIENTE_TOS.NEXTVAL,
                     'I', -- Importacao 
                     P_LOPA_RAZAO_SOCIAL, P_LOPA_CNPJ);      
          END IF;
      END IF;
         
      
      IF P_LOPA_CPF IS NULL THEN
        
            SELECT COUNT (*)
            INTO V_ROWS
            FROM TOPS.CUSTOMER CUST
           WHERE CUST.ADDR1 = P_LOPA_CPF ;

          IF V_ROWS = 0
          THEN
             INSERT
               INTO TOPS.CUSTOMER (CUST_REG_NO,
                                   CUST_TYPE,
                                   FULL_NAME,
                                   ADDR1)
             VALUES (SQ_CLIENTE_TOS.NEXTVAL,
                     'I', -- Importacao 
                     P_LOPA_RAZAO_SOCIAL, P_LOPA_CPF);      
          END IF;
      END IF;
   -------------------------------------------------------------------
   -- FIM:WELLINGTON SE NÃO ENCONTROU LOPA_ID ENTÃO EH INSERÇÃO     --
   -------------------------------------------------------------------
                              
   ELSE   
   -------------------------------------------------------------------
   -- INI:WELLINGTON SE ENCONTROU LOPA_ID ENTÃO ATUALIZACAO         --
   -------------------------------------------------------------------  
      
      
      IF P_LOPA_ATIVO = '0'
      THEN
         SELECT COUNT (*)
           INTO NUM_COUNT
           FROM AMR_LPAR_TPAR
          WHERE LOPA_ID = V_LOPA_ID AND LPTP_ATIVO=1;
         /*
          * Wellington: Comentado por problemas de parceiro existente, posso ter o mesmo nome
          *
         IF NUM_COUNT = 0
         THEN
            SELECT COUNT (*)
              INTO NUM_COUNT
              FROM LOCAL_PARCEIRO
             WHERE     (   LOPA_RAZAO_SOCIAL = P_LOPA_RAZAO_SOCIAL
                        OR LOPA_NM_FANTASIA = P_LOPA_NOME_FANTASIA
                        OR LOPA_CNPJ = P_LOPA_CNPJ
                        OR LOPA_CPF = P_LOPA_CPF
                        OR LOPA_SAP_ID = P_LOPA_SAP_ID)
                   AND LOPA_ID <> LOPA_ID;

            IF NUM_COUNT = 0
            THEN
               ATUALIZAR := 1;
            ELSE
               RAISE EXISTE;
            END IF;
         ELSE
            RAISE AMARRACAO;            
         END IF;
         */
      END IF;

      IF P_LOPA_ATIVO = '1' OR ATUALIZAR = 1
      THEN
         /*SELECT COUNT (*)
           INTO NUM_COUNT
           FROM LOCAL_PARCEIRO
          WHERE     (   LOPA_RAZAO_SOCIAL = P_LOPA_RAZAO_SOCIAL
                     OR LOPA_NM_FANTASIA = P_LOPA_NOME_FANTASIA
                     OR LOPA_CNPJ = P_LOPA_CNPJ
                     OR LOPA_CPF = P_LOPA_CPF
                     OR LOPA_SAP_ID = P_LOPA_SAP_ID)
                AND LOPA_ID <> V_LOPA_ID;
            */
         IF NUM_COUNT > 0
         THEN
            RAISE EXISTE;
         ELSE
            UPDATE ACCESSCONTROL.LOCAL_PARCEIRO
               SET CIDA_ID = TRIM(V_CIDA_ID),
                   PARC_ID = CASE WHEN TRIM(V_PARC_ID) <> 0 THEN V_PARC_ID ELSE NULL END, --CASE WHEN V_PARC_ID--PARC_ID = TRIM(P_PARC_ID),
                   LOPA_RAZAO_SOCIAL = CASE WHEN P_LOPA_RAZAO_SOCIAL = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_RAZAO_SOCIAL))) ELSE UPPER(P_LOPA_RAZAO_SOCIAL) END,
                   LOPA_NM_FANTASIA = CASE WHEN P_LOPA_NOME_FANTASIA = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_NOME_FANTASIA))) ELSE UPPER(P_LOPA_NOME_FANTASIA) END,
                   -- WELLINGTON: OBSERVE QUE SOH POSSO ATUALIZAR CNPJ SE FOR UM CASO NÃO DEPENDENTE DE PARCEIRO, SE TIVER PARCEIRO NÃO ATUALIZO!!!
                   -- 25/09/2012  - PRESTA ATENÇÃO PARA NÃO CONFUNDIR!!!
                   LOPA_CNPJ = CASE WHEN V_PARC_ID <> 0 THEN NULL ELSE TRIM(P_LOPA_CNPJ) END,
                   LOPA_CPF = TRIM(P_LOPA_CPF),
                   LOPA_ENDERECO = CASE WHEN P_LOPA_ENDERECO = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_ENDERECO))) ELSE P_LOPA_ENDERECO END,
                   LOPA_EMAIL = CASE WHEN P_LOPA_EMAIL = ' ' THEN UPPER(LTRIM(TRIM(P_LOPA_EMAIL))) ELSE P_LOPA_EMAIL END, 
                   LOPA_TELEFONE = TRIM(P_LOPA_TELEFONE),
                   LOPA_FAX = TRIM(P_LOPA_FAX),
                   LOPA_ARMADOR = TRIM(P_LOPA_ARMADOR), 
                --   LOPA_ID_TRA = TRIM(P_LOPA_ID_TRA),
                   LOPA_ATIVO = TRIM(P_LOPA_ATIVO),
                   -- WELLINGTON: COMENTADO DEVIDO AO SAP NÃO ENVIAR ESSE CAMPO!
                   --BTP_EMP_CONSTANTE = CASE WHEN P_BTP_EMP_CONSTANTE = ' ' THEN UPPER(LTRIM(TRIM(P_BTP_EMP_CONSTANTE))) ELSE P_BTP_EMP_CONSTANTE END,
                   LOPA_SAP_ID = TRIM(P_LOPA_SAP_ID),
                   LOPA_BAIRRO = CASE WHEN P_LOCA_BAIRRO = ' ' THEN UPPER(LTRIM(TRIM(P_LOCA_BAIRRO))) ELSE P_LOCA_BAIRRO END,
                   LOPA_CEP = TRIM(P_LOPA_CEP),
                   LOPA_CELULAR = TRIM(P_LOPA_CELULAR),
                   LOPA_INSCRICAO_ESTADUAL = TRIM(P_LOPA_INSCRICAO_ESTADUAL),
                   LOPA_INSCRICAO_MUNICIPAL = TRIM(P_LOPA_INSCRICAO_MUNICIPAL)
             WHERE LOPA_ID = TRIM(V_LOPA_ID);
         END IF;
      END IF;
   END IF;
   
EXCEPTION    
   WHEN RAZAO
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'Razão Social existente');
      
   WHEN NMFANT
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'Nome Fantasia existente');
      
   WHEN CNPJ
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'CNPJ existente');
      
   WHEN CPF   
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'CPF: '|| P_LOPA_CPF ||' existente no banco de dados.');
      
   WHEN EXISTE
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'LOCAL_PARCEIRO existente');
   
   WHEN AMARRACAO
   THEN
      RAISE_APPLICATION_ERROR (-20001, 'Exitem relacionamentos cadastrados para este LOCAL_PARCEIRO');
         
   WHEN EXCEPTIONCIDADE
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'Cidade não informada ou inexistente com a grafia: '|| P_CIDA_NOME ||' no Billing.');
   
   WHEN EXCEPTIONSAPID
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'Identificação cliente do SAP não informada, impossível realizar qualquer operação');
      
  
   WHEN OTHERS
   THEN
      RAISE;
END SP_LOCAL_PARCEIRO_SAP;

  CREATE OR REPLACE FORCE VIEW "ADE"."VW_HISTORICO_LOCALIZACAO" ("Conteiner", "Viagem", "Localizacao", "Câmera Posicionamento", "Data Localizacao") AS 
  SELECT
  TRIM(I.ITEM_NO) AS "Conteiner",
  E.ESCA_RAP AS "Viagem",
  TRIM(IL.STACK) || TRIM(IL.X) || TRIM(IL.Y) || TRIM(IL.Z) AS "Localizacao",
  (select LOCA.LOCA_CAMERA from BHS.LOCALIZACAO LOCA where LOCA.LOCA_FILA = TRIM(IL.Y) and LOCA.LOCA_PILHA = TRIM(IL.X)  and LOCA.LOCA_QUADRA = TRIM(IL.STACK) and LOCA.LOCA_ALTURA = TRIM(IL.Z)) as "Câmera Posicionamento",
  IL.EXEC_TS AS "Data Localizacao"
FROM TOPS.ITEM I
INNER JOIN BHS.CONTEINER C ON (C.CONT_NUMERO = TRIM(I.ITEM_NO))
INNER JOIN BHS.ESCALA E ON (E.ESCA_VIAGEM_TOS_IMP = TRIM(I.ARR_CAR))
INNER JOIN BHS.MERCADORIA M ON (M.MERC_CONT_ID = C.CONT_ID AND M.MERC_ESCA_ID_IMP = E.ESCA_ID)
INNER JOIN TOPS.ITEM_LOCATION IL ON (IL.ITEM_KEY = I.ITEM_KEY)
WHERE IL.STK_CLASS = 'Y'
-----------------------------------------------------------------
--Objeto: ADE.VW_HISTORICO_LOCALIZACAO
--Criação: Leonardo (T2S) - 11/03/2016
--Objetivo: View utilizada na tela de consulta Histórico de Localizacao
--Alteração: Caio (T2S) - 31/10/2016
--Motivo: Adicionada a coluna Câmera Posicionamento
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ADE"."VW_MERC_IMO_POSICAO" ("DATA", "CONTEINER", "QUADRA", "LASTRO", "PILHA", "ALTURA", "STATUS", "TIPO", "PESO_LIQUIDO", "IMO", "ONU", "NCM", "DESCRICAO") AS 
  SELECT ITLO.CRT_TS DATA,
            VWM.CONTEINER,
            ITLO.STACK QUADRA,
            ITLO.X LASTRO,
            ITLO.Y PILHA,
            ITLO.Z ALTURA,
            ITLO.STK_REF STATUS,
            IT.ITEM_TYPE TIPO,
            MERC.MERC_PESO_LIQUIDO PESO_LIQUIDO,
            BHS.FN_IMO_MERCADORIA (VWM.MERC_ID) IMO,
            BHS.FN_ONU_MERCADORIA (VWM.MERC_ID) ONU,
            NCM.NCM_CODIGO NCM,
            NCM.NCM_DESCRICAO DESCRICAO
       FROM BHS.VW_MERCADORIA VWM
            INNER JOIN BHS.AMR_IMO_MERCADORIA AMIM ON AMIM.AMIM_MERC_ID = VWM.MERC_ID
            INNER JOIN BHS.MERCADORIA MERC ON MERC.MERC_ID = VWM.MERC_ID
            INNER JOIN TOPS.ITEM IT ON TRIM (IT.ITEM_NO) = VWM.CONTEINER
            INNER JOIN TOPS.ITEM_LOCATION ITLO ON ITLO.ITEM_KEY = IT.ITEM_KEY
            INNER JOIN BHS.AMR_NCM_MERCADORIA AMNM ON AMNM.AMNM_MERC_ID = VWM.MERC_ID
            INNER JOIN BHS.NCM NCM ON NCM.NCM_ID = AMNM.AMNM_NCM_ID
      WHERE     (   TRIM (IT.DEP_CAR) = VWM.VIAGEM_EXP
                 OR TRIM (IT.ARR_CAR) = VWM.VIAGEM_IMP)
            AND VWM.MERC_STATUS = 'T'
            AND ITLO.STK_PCH = 'C'
   ORDER BY VWM.CONTEINER
----------------------------------------------------------------
--Objeto: ADE.VW_AGEND_CNTR_CAT
--Criação:ITALO PETRUCIO
-- Data: 16/09/2016
--Sistema: ADE
--ALTERAÇÃO: 21/09/2016 - ITALO
--OBJETIVO: ALTERAÇÃO DE DOIS ALIAS IMO/ONU
--ALTERAÇÃO: 21/09/2016 - ITALO
--OBJETIVO: INCLUSÃO DE CAMPOS - TIPO - PESO - NCM E DESCRIÇÃO NCM
----------------------------------------------------------------;

  CREATE OR REPLACE FORCE VIEW "ADE"."VW_1_2_1_ES_VC_DIRETO_EXT" ("Mercadoria ID", "SF_Fotos Scanner", "CB_Categoria", "Escala", "Navio", "Data Prevista Atracação", "Data Atracação", "Placa", "Entrada", "Saida", "Armador Exp", "Armador DocExp", "Armador Imp", "Armador DocImp", "Documento", "DUE", "RUC", "CE Mercante", "Tipo", "Emissao", "Consignatario", "Doc. Consignatário", "Peso Bruto Declarado", "Peso Liquido Declarado", "Conteiner", "Tipo Unidade", "Altura", "Lacre", "Peso In", "Ticket In", "Peso Out", "Ticket Out", "Tara In/Out", "Peso Bruto Verificado", "Peso Liquido Verificado", "Tara Verificada", "Ticket Carga Pesagem", "Motorista", "CNH", "CPF", "Localização Contêiner", "Câmera Posicionamento", "Status Contêiner", "Numero Doc. Saida", "Tipo Doc. Saida", "Viagem", "NCM Descricao", "Nota Fiscal") AS 
  WITH NotaFiscalImpExp AS
  
  (SELECT AMDM.AMDM_MERC_ID AS "MERC ID", d.dco_identificacao AS "Nota Fiscal" 
    FROM bhs.documento d
    INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM ON (AMDM.AMDM_DCO_ID = d.DCO_ID)
    INNER JOIN bhs.tipo_documento td on(d.dco_tido_id = td.tido_id)
    INNER JOIN bhs.amr_documento ad on(ad.amdo_dco_id_relacionado = d.dco_id)
    INNER JOIN bhs.documento s on(ad.amdo_dco_id = s.dco_id)
    INNER JOIN bhs.tipo_documento tds on(s.dco_tido_id = tds.tido_id)
    INNER JOIN bhs.amr_documento ab on(ab.amdo_dco_id = s.dco_id)
    INNER JOIN bhs.documento bl on(ab.amdo_dco_id_relacionado = bl.dco_id)
    INNER JOIN bhs.tipo_documento tbl on(bl.dco_tido_id = tbl.tido_id)
    INNER JOIN accesscontrol.local_parceiro em on(bl.dco_lopa_id = em.lopa_id)
    WHERE td.tido_constante in ('NF','NFE')
    AND tbl.tido_constante = 'BL'
   
   UNION
   
    SELECT MERC.merc_id, TDOC.DOCU_DESCRICAO 
    FROM bhs.mercadoria MERC
    LEFT JOIN TAS.MERCADORIA TMERC ON (TMERC.MERC_ID_BHS = MERC.MERC_ID)
    LEFT JOIN TAS.AMR_MERC_DOCUMENTO TAMD ON (TAMD.MERC_ID = TMERC.MERC_ID)
    LEFT JOIN TAS.DOCUMENTO TDOC ON (TDOC.DOCU_ID = TAMD.DOCU_ID)
    LEFT JOIN TAS.TIPO_DOCUMENTO TTIDO on (TTIDO.TIDO_ID = TDOC.TIDO_ID)
    WHERE TDOC.DOCU_DT_CANCELAMENTO IS NULL)
   
  
  SELECT DISTINCT
    m.merc_id AS "Mercadoria ID",
    xray.xray_id AS "SF_Fotos Scanner",
    cc.ctca_descricao AS "CB_Categoria",
    e.esca_numero AS "Escala",
    n.navi_nome AS "Navio",
    CASE
        WHEN TRUNC (VD.EST_BERTH_TS) > TO_DATE ('31/12/1900', 'DD/MM/YYYY')
        THEN VD.EST_BERTH_TS
        ELSE NULL
    END AS "Data Prevista Atracação",
    CASE
WHEN TRUNC (VD.ACT_BERTH_TS) > TO_DATE ('31/12/1900', 'DD/MM/YYYY')
        THEN VD.ACT_BERTH_TS
        ELSE NULL
    END AS "Data Atracação",
    v.veic_placa AS "Placa",
    atm.amtr_dt_entrada AS "Entrada",
    atm.amtr_dt_saida AS "Saida",
    armex.lopa_nm_fantasia AS "Armador Exp",
    NVL(armex.lopa_cnpj, armex.lopa_cpf) AS "Armador DocExp",
    armim.lopa_nm_fantasia AS "Armador Imp",
    NVL(armim.lopa_cnpj, armim.lopa_cpf) AS "Armador DocImp",
    d.dco_identificacao AS "Documento",
    d.dco_documento_unico AS "DUE",
    druc.dco_identificacao AS "RUC",
    d.dco_numero_ce AS "CE Mercante",
    td.tido_constante AS "Tipo",
    d.dco_dt_emissao AS "Emissao",
    cons.lopa_nm_fantasia "Consignatario",
    NVL(cons.lopa_cnpj, cons.lopa_cpf) AS "Doc. Consignatário",
    m.merc_peso_bruto_manif AS "Peso Bruto Declarado",
    m.merc_peso_liquido_manif AS "Peso Liquido Declarado",
    c.cont_numero AS "Conteiner",
    tm.time_descricao AS "Tipo Unidade",
    iso.isoc_altura AS "Altura",
    al.lacres AS "Lacre",
    atm.amtr_peso_in AS "Peso In",
    atm.amtr_ticket_peso_in AS "Ticket In",
    atm.amtr_peso_out AS "Peso Out",
    atm.amtr_ticket_peso_out AS "Ticket Out",
    ABS(atm.amtr_peso_in - atm.amtr_peso_out) AS "Tara In/Out",
    m.merc_peso_bruto AS "Peso Bruto Verificado",
    m.merc_peso_liquido AS "Peso Liquido Verificado",
    ABS(m.merc_peso_bruto - m.merc_peso_liquido) AS "Tara Verificada",
    m.merc_ticket_pesagem AS "Ticket Carga Pesagem",
    m.moto_nome AS "Motorista",
    m.moto_cnh AS "CNH",
    m.moto_cpf AS "CPF",
                    CASE WHEN m.MERC_STATUS != 'S' THEN
                      LOCA.LOCA_QUADRA || LOCA.LOCA_PILHA || LOCA.LOCA_FILA || LOCA.LOCA_ALTURA
                    ELSE
                      NULL
                    END AS "Localização Contêiner",    
                    CASE WHEN m.MERC_STATUS != 'S' THEN
                      LOCA.LOCA_CAMERA
                    ELSE
                      NULL
                    END AS "Câmera Posicionamento",
                    m.MERC_STATUS                                                                 AS "Status Contêiner",
                    sai.dco_identificacao             AS "Numero Doc. Saida",
                    sai.tido_constante                AS "Tipo Doc. Saida",
                    e.esca_rap                                                                  AS "Viagem",
                    n.ncm_descricao as "NCM Descricao",
                    nfie."Nota Fiscal" AS "Nota Fiscal"
    FROM bhs.mercadoria m
INNER JOIN bhs.tipo_mercadoria tm
ON(m.merc_time_id = tm.time_id)
INNER JOIN bhs.conteiner c
ON(m.merc_cont_id = c.cont_id)
INNER JOIN bhs.isocode iso
ON(iso.isoc_id = c.cont_isoc_id)
INNER JOIN BHS.categoria_carga cc
ON(m.merc_ctca_id = cc.ctca_id)
LEFT JOIN bhs.amr_transporte_mercadoria atm
ON(atm.amtr_merc_id = m.merc_id)
LEFT JOIN tas.veiculo v
ON(atm.amtr_veic_id = v.veic_id)
LEFT JOIN tas.motorista m
ON(m.moto_id = atm.amtr_moto_id)
                        LEFT JOIN BHS.amr_ncm_mercadoria anm 
                        ON(m.merc_id = anm.amnm_merc_id)
                        LEFT JOIN BHS.ncm n
                        ON(anm.amnm_ncm_id = n.ncm_id)
LEFT JOIN accesscontrol.local_parceiro armex
ON(armex.lopa_id = m.merc_lopa_arm_exp)
LEFT JOIN accesscontrol.local_parceiro armim
ON(armim.lopa_id = m.merc_lopa_arm_imp)
                        LEFT JOIN BHS.AMR_LOCALIZACAO_MERCADORIA AMLM
                        ON (m.MERC_ID = AMLM.AMLM_MERC_ID)
                        LEFT JOIN BHS.LOCALIZACAO LOCA
                        ON (AMLM.AMLM_LOCA_ID = LOCA.LOCA_ID)
LEFT JOIN
(SELECT alam_merc_id,
LISTAGG(ALAM_NUM_LACRE, ', ') WITHIN GROUP (
ORDER BY ALAM_NUM_LACRE) AS lacres
FROM BHS.amr_lacre_mercadoria
GROUP BY alam_merc_id
) al
ON(al.alam_merc_id = m.merc_id)
LEFT JOIN bhs.escala e
ON (m.merc_esca_id_exp = e.esca_id
OR m.merc_esca_id_imp = e.esca_id)
LEFT JOIN bhs.navio n
ON(e.esca_navi_id = n.navi_id)
LEFT JOIN TOPS.VESSEL_DETAILS VD
ON (TRIM (VD.LLOYDS_NO) = TRIM (n.NAVI_LLOYD)
AND TRIM (VD.TFC_CODE_E) = E.ESCA_VIAGEM_TOS_EXP
OR TRIM (VD.TFC_CODE_I) = E.ESCA_VIAGEM_TOS_IMP)
LEFT JOIN BHS.amr_documento_mercadoria dm
ON(dm.amdm_merc_id = m.merc_id)
LEFT JOIN bhs.documento d        
ON(d.dco_id = dm.amdm_dco_id)
                    LEFT JOIN bhs.amr_documento ado
                    ON (ado.amdo_dco_id_relacionado = d.dco_id)
                    LEFT JOIN
                        (SELECT docs.dco_id,
                          docs.dco_identificacao,
                          tidos.tido_constante
                        FROM bhs.documento docs
                            INNER JOIN bhs.tipo_documento tidos
                            ON(tidos.tido_id              = docs.dco_tido_id)
                        WHERE tidos.tido_constante   IN ('DI', 'DSI', 'DTA', 'PCI', 'CTE')
                        AND docs.dco_dt_cancelamento IS NULL
                        ) sai ON (sai.dco_id          = ado.amdo_dco_id)
LEFT JOIN bhs.tipo_documento td
ON(d.dco_tido_id = td.tido_id) 
LEFT JOIN accesscontrol.local_parceiro cons
ON(d.dco_lopa_id_consignatario = cons.lopa_id)
LEFT JOIN GATE.XRAY XRAY
ON (XRAY.XRAY_MERC_ID = M.MERC_ID)    
LEFT JOIN NotaFiscalImpExp nfie
ON (nfie."MERC ID" = m.merc_id)
LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA amrRUC 
on (m.merc_id = amrRUC.amdm_merc_id)

LEFT JOIN (SELECT DCO_ID, DCO_IDENTIFICACAO FROM BHS.DOCUMENTO d INNER JOIN BHS.TIPO_DOCUMENTO tipo on (d.DCO_TIDO_ID = tipo.TIDO_ID) WHERE tipo.TIDO_CONSTANTE = 'RUC') druc
ON (druc.dco_id = amrRUC.amdm_dco_id)

WHERE atm.amtr_dt_cancel IS NULL
AND m.merc_dt_cancel IS NULL
ORDER BY m.merc_id  
--------------------------------------------------------------------------
--Objeto: VW_1_2_1_ES_VC_DIRETO_EXT 
--Criação: (?) - Data: (?)
--Sistema: Consultas do ADE
--Alteração: Alexandre Alves (T2S)
--Motivo da alteração:  Correção da nomenclatura dos campos.
--Alteração: Diego (T2S) - 30/03/2017
--Motivo da alteração: Adicionada a coluna Fotos Scanner
--Alteração: Vinicius (T2S) - 30/03/2017
--Motivo da alteração: Adicionado alguns campos e mostra mercadorias sem gate out ou in
--Alteração: Caio (T2S) - 21/12/2018
--Motivo da alteração: Alterado join para incluir containers que não apareciam na consulta
--Alteração: Thalis (T2S) - 24/04/2019
--Motivo da alteração: Adicionados campos para DUE e RUC
--------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "ADE"."VW_1_9_TRANSF_LOCAL_RECINTO" ("Carga", "Peso de BKG", "Categoria", "Peso Liquido Verificado", "Peso Bruto Verificado", "Altura", "Tamanho", "Tara", "Localizacao", "Data Criacao", "Antiga Localizacao") AS 
  select 
item_no as "Carga",
bkg_weight as "Peso de BKG",
category as "Categoria",
cgo_gross_wt as "Peso Liquido Verificado",
gross as "Peso Bruto Verificado",
height as "Altura",
length as "Tamanho",
tare as "Tara",
l.stack || ' ' || l.x || ' ' || l.y || ' ' || l.z as "Localizacao",
l.crt_ts as "Data Criacao",
l.prev_loc as "Antiga Localizacao"
from TOPS.item i
inner join TOPS.item_location l on(i.item_key = l.item_key)

  CREATE OR REPLACE FORCE VIEW "ADE"."VW_3_1_1_TX_TRANSITO_ADUANEIRO" ("Capac. total (cheio + vazio)", "Total armaz. (cheio + vazio)", "Capacidade total (cntr. cheio)", "Total armazenado (cntr. cheio)", "Capacidade total (cntr. vazio)", "Total armazenado (cntr. vazio)", "Capac. total (cntr. reefer)", "Total armaz. (cntr. reefer)") AS 
  WITH DADOS AS (
 SELECT
   (SELECT PRGL_VALOR FROM BHS.PARAMETROS_GLOBAIS WHERE PRGL_CHAVE = 'CAPACIDADE_TOTAL_OCUPACAO') AS CAPACIDADE_TOTAL,
   (SELECT PRGL_VALOR FROM BHS.PARAMETROS_GLOBAIS WHERE PRGL_CHAVE = 'CAPACIDADE_TOTAL_OCUPACAO_CHEIO') AS CAPACIDADE_TOTAL_CHEIO,
   (SELECT PRGL_VALOR FROM BHS.PARAMETROS_GLOBAIS WHERE PRGL_CHAVE = 'CAPACIDADE_TOTAL_OCUPACAO_VAZIO') AS CAPACIDADE_TOTAL_VAZIO,
   (SELECT PRGL_VALOR FROM BHS.PARAMETROS_GLOBAIS WHERE PRGL_CHAVE = 'CAPACIDADE_TOTAL_OCUPACAO_REEFER') AS CAPACIDADE_TOTAL_REEFER
 FROM DUAL
)
SELECT
 MAX || ' TEU' AS "Capac. total (cheio + vazio)",
 TOTAL || ' TEU (' || ROUND(TOTAL / MAX * 100, 2) || '%)' AS "Total armaz. (cheio + vazio)",
 CHEIO_MAX || ' TEU' AS "Capacidade total (cntr. cheio)",
 CHEIO_TOTAL || ' TEU (' || ROUND(CHEIO_TOTAL / CHEIO_MAX * 100, 2) || '%)' AS "Total armazenado (cntr. cheio)",
 VAZIO_MAX || ' TEU' AS "Capacidade total (cntr. vazio)",
 VAZIO_TOTAL || ' TEU (' || ROUND(VAZIO_TOTAL / VAZIO_MAX * 100, 2) || '%)' AS "Total armazenado (cntr. vazio)",
 REEFER_MAX || ' TEU' AS "Capac. total (cntr. reefer)",
 REEFER_TOTAL || ' TEU (' || ROUND(REEFER_TOTAL / REEFER_MAX * 100, 2) || '%)' AS "Total armaz. (cntr. reefer)"
FROM (
 SELECT
   V.*,
   (SELECT CAPACIDADE_TOTAL FROM DADOS) AS MAX,
   (SELECT CAPACIDADE_TOTAL_CHEIO FROM DADOS) AS CHEIO_MAX,
   (SELECT CAPACIDADE_TOTAL_VAZIO FROM DADOS) AS VAZIO_MAX,
   (SELECT CAPACIDADE_TOTAL_REEFER FROM DADOS) AS REEFER_MAX
 FROM (
   SELECT
     SUM(CASE WHEN LENGTH = 20 THEN 1 ELSE 2 END) AS TOTAL,
     SUM(CASE WHEN FEL = 'F' AND LENGTH = 20 THEN 1 WHEN FEL = 'F' AND LENGTH <> 20 THEN 2 ELSE 0 END) AS CHEIO_TOTAL,
     SUM(CASE WHEN FEL = 'E' AND LENGTH = 20 THEN 1 WHEN FEL = 'E' AND LENGTH <> 20 THEN 2 ELSE 0 END) AS VAZIO_TOTAL,
     SUM(CASE WHEN IS_REEFER = 'Y' AND LENGTH = 20 THEN 1 WHEN IS_REEFER = 'Y' AND LENGTH <> 20 THEN 2 ELSE 0 END) AS REEFER_TOTAL
   FROM TOPS.ITEM
   WHERE ARR_TS > TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
     AND DEP_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
 ) V
)
-------------------------------------------------------------
--Objeto: ADE.VW_3_1_1_TX_TRANSITO_ADUANEIRO
--Criação: T2S Diego - Data: 11/03/2016
--Objetivo: view consultada pelos itens 3.1.1. e 3.1.2. do ADE02
--Sistema: ADE
--Alteração: -
--Motivo da alteração: -
-------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."ARCHIVE_INTERFACE" 
IS

    /******************************************************************************
   --Objeto: ARCHIVE E EXPURGO DAS TABELAS OPERACIONAIS
   --Criação: ERICK - 02/09/2013
   --Sistema: ORACLE
   --Alteração: -
   --Motivo da alteração: -
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/

   -- CURSOR QUE IRÁ GERAR A LISTA DE CARG_ID PARA ARCHIVE E EXPURGO
   -- SELECIONANDO NA ACTIVITY O STATUS=1 E PROCESS=0 BEM COMO CAMPO DATA <= 7 EM TEMPO DE EXECUÇÃO AUTOMATICA
   
   /*chk number;  
   chk_f number;
   chk_l number;*/
           
   CURSOR c1
   IS
      SELECT DISTINCT carg_id
        FROM interface.ACTIVITY a
       WHERE     CAAC_STATUS = '1'
             AND CAAC_PROCESS = '0'
             AND A.CAAC_DATE <= SYSDATE - 1;
             
       type ARRAY_c1 is varray(1000000000) of number;                       
       AR_c1 ARRAY_c1;             

BEGIN
   
   --FOR act IN c1
   --LOOP
   
   OPEN c1;
     
         FETCH c1 BULK COLLECT INTO AR_c1;
         FOR i IN AR_c1.FIRST .. AR_c1.LAST LOOP   
         
         /*chk :=  AR_c1(i);         
         chk_f :=  AR_c1.FIRST;
         chk_l :=  AR_c1.LAST;*/
   
      -- ARCHIVING TABELAS ACTIVITY E CARGO - SCHEMA INTERFACE
      INSERT INTO ARCHIVE.CARGO
         SELECT DISTINCT c.*
           FROM INTERFACE.CARGO c
          WHERE C.CARG_ID = AR_c1(i); --act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.ACTIVITY
         SELECT *
           FROM interface.ACTIVITY a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      DELETE FROM interface.ACTIVITY a
            WHERE carg_id = AR_c1(i); --act.carg_id;            

      commit;

      DELETE FROM interface.CARGO a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELA HOST_LOG - SCHEMA TOPS

      INSERT INTO ARCHIVE.HOST_LOG
         SELECT *
           FROM tops.HOST_LOG a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      --commit;

      DELETE FROM tops.HOST_LOG a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELAS BTP_LOG_ERROS BTP_PROCESSAMENTO_HISTORICO BTP_PROCESSAMENTO_FILA   - SCHEMA HOST

/*      INSERT INTO ARCHIVE.BTP_LOG_ERROS
         SELECT *
           FROM HOST.BTP_LOG_ERROS a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_LOG_ERROS a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_HISTORICO
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_FILA
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_FILA a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_FILA a
            WHERE carg_id = act.carg_id;
   --commit;
*/

   --END LOOP;
              
     END LOOP;    
     CLOSE c1;
     COMMIT;  
     
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      --raise;
END;

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."ARCHIVE_INTERFACE_1" 
IS

    /******************************************************************************
   --Objeto: ARCHIVE E EXPURGO DAS TABELAS OPERACIONAIS
   --Criação: ERICK - 02/09/2013
   --Sistema: ORACLE
   --Alteração: -
   --Motivo da alteração: -
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/

   -- CURSOR QUE IRÁ GERAR A LISTA DE CARG_ID PARA ARCHIVE E EXPURGO
   -- SELECIONANDO NA ACTIVITY O STATUS=1 E PROCESS=0 BEM COMO CAMPO DATA <= 7 EM TEMPO DE EXECUÇÃO AUTOMATICA
   
   /*chk number;  
   chk_f number;
   chk_l number;*/
           
   CURSOR c1
   IS
      SELECT DISTINCT carg_id
        FROM interface.ACTIVITY a
       WHERE     CAAC_STATUS = '1'
             AND CAAC_PROCESS = '0'
             AND A.CAAC_DATE between to_date('03/12;2018 00:00:00','dd/mm/yyyy hh24:mi:ss') and to_date('03/12;2018 23:59:59','dd/mm/yyyy hh24:mi:ss');--<= SYSDATE - 7;
             
       type ARRAY_c1 is varray(1000000000) of number;                       
       AR_c1 ARRAY_c1;             

BEGIN
   
   --FOR act IN c1
   --LOOP
   
   OPEN c1;
     
         FETCH c1 BULK COLLECT INTO AR_c1;
         FOR i IN AR_c1.FIRST .. AR_c1.LAST LOOP   
         
         /*chk :=  AR_c1(i);         
         chk_f :=  AR_c1.FIRST;
         chk_l :=  AR_c1.LAST;*/
   
      -- ARCHIVING TABELAS ACTIVITY E CARGO - SCHEMA INTERFACE
      INSERT INTO ARCHIVE.CARGO
         SELECT DISTINCT c.*
           FROM INTERFACE.CARGO c
          WHERE C.CARG_ID in AR_c1(i); --act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.ACTIVITY
         SELECT *
           FROM interface.ACTIVITY a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      DELETE FROM interface.ACTIVITY a
            WHERE carg_id = AR_c1(i); --act.carg_id;            

      commit;

      DELETE FROM interface.CARGO a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELA HOST_LOG - SCHEMA TOPS

      INSERT INTO ARCHIVE.HOST_LOG
         SELECT *
           FROM tops.HOST_LOG a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      --commit;

      DELETE FROM tops.HOST_LOG a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELAS BTP_LOG_ERROS BTP_PROCESSAMENTO_HISTORICO BTP_PROCESSAMENTO_FILA   - SCHEMA HOST

/*      INSERT INTO ARCHIVE.BTP_LOG_ERROS
         SELECT *
           FROM HOST.BTP_LOG_ERROS a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_LOG_ERROS a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_HISTORICO
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_FILA
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_FILA a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_FILA a
            WHERE carg_id = act.carg_id;
   --commit;
*/

   --END LOOP;
              
     END LOOP;    
     CLOSE c1;
     COMMIT;  
     
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      --raise;
END;

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."ARCHIVE_INTERFACE_2" 
IS

    /******************************************************************************
   --Objeto: ARCHIVE E EXPURGO DAS TABELAS OPERACIONAIS
   --Criação: ERICK - 02/09/2013
   --Sistema: ORACLE
   --Alteração: -
   --Motivo da alteração: -
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/

   -- CURSOR QUE IRÁ GERAR A LISTA DE CARG_ID PARA ARCHIVE E EXPURGO
   -- SELECIONANDO NA ACTIVITY O STATUS=1 E PROCESS=0 BEM COMO CAMPO DATA <= 7 EM TEMPO DE EXECUÇÃO AUTOMATICA
   
   /*chk number;  
   chk_f number;
   chk_l number;*/
           
   CURSOR c1
   IS
      SELECT DISTINCT carg_id
        FROM interface.ACTIVITY a
       WHERE     CAAC_STATUS = '1'
             AND CAAC_PROCESS = '0'
             AND A.CAAC_DATE <= SYSDATE - 2;
             
       type ARRAY_c1 is varray(1000000000) of number;                       
       AR_c1 ARRAY_c1;             

BEGIN
   
   --FOR act IN c1
   --LOOP
   
   OPEN c1;
     
         FETCH c1 BULK COLLECT INTO AR_c1;
         FOR i IN AR_c1.FIRST .. AR_c1.LAST LOOP   
         
         /*chk :=  AR_c1(i);         
         chk_f :=  AR_c1.FIRST;
         chk_l :=  AR_c1.LAST;*/
   
      -- ARCHIVING TABELAS ACTIVITY E CARGO - SCHEMA INTERFACE
      INSERT INTO ARCHIVE.CARGO
         SELECT DISTINCT c.*
           FROM INTERFACE.CARGO c
          WHERE C.CARG_ID in AR_c1(i); --act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.ACTIVITY
         SELECT *
           FROM interface.ACTIVITY a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      DELETE FROM interface.ACTIVITY a
            WHERE carg_id = AR_c1(i); --act.carg_id;            

      commit;

      DELETE FROM interface.CARGO a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELA HOST_LOG - SCHEMA TOPS

      INSERT INTO ARCHIVE.HOST_LOG
         SELECT *
           FROM tops.HOST_LOG a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      --commit;

      DELETE FROM tops.HOST_LOG a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELAS BTP_LOG_ERROS BTP_PROCESSAMENTO_HISTORICO BTP_PROCESSAMENTO_FILA   - SCHEMA HOST

/*      INSERT INTO ARCHIVE.BTP_LOG_ERROS
         SELECT *
           FROM HOST.BTP_LOG_ERROS a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_LOG_ERROS a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_HISTORICO
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_FILA
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_FILA a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_FILA a
            WHERE carg_id = act.carg_id;
   --commit;
*/

   --END LOOP;
              
     END LOOP;    
     CLOSE c1;
     COMMIT;  
     
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      --raise;
END;

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."ARCHIVE_INTERFACE_3" 
IS

    /******************************************************************************
   --Objeto: ARCHIVE E EXPURGO DAS TABELAS OPERACIONAIS
   --Criação: ERICK - 02/09/2013
   --Sistema: ORACLE
   --Alteração: -
   --Motivo da alteração: -
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/

   -- CURSOR QUE IRÁ GERAR A LISTA DE CARG_ID PARA ARCHIVE E EXPURGO
   -- SELECIONANDO NA ACTIVITY O STATUS=1 E PROCESS=0 BEM COMO CAMPO DATA <= 7 EM TEMPO DE EXECUÇÃO AUTOMATICA
   
   /*chk number;  
   chk_f number;
   chk_l number;*/
           
   CURSOR c1
   IS
      SELECT DISTINCT carg_id
        FROM interface.ACTIVITY a
       WHERE     CAAC_STATUS = '1'
             AND CAAC_PROCESS = '0'
             AND A.CAAC_DATE <= SYSDATE - 2;
             
       type ARRAY_c1 is varray(1000000000) of number;                       
       AR_c1 ARRAY_c1;             

BEGIN
   
   --FOR act IN c1
   --LOOP
   
   OPEN c1;
     
         FETCH c1 BULK COLLECT INTO AR_c1;
         FOR i IN AR_c1.FIRST .. AR_c1.LAST LOOP   
         
         /*chk :=  AR_c1(i);         
         chk_f :=  AR_c1.FIRST;
         chk_l :=  AR_c1.LAST;*/
   
      -- ARCHIVING TABELAS ACTIVITY E CARGO - SCHEMA INTERFACE
      INSERT INTO ARCHIVE.CARGO
         SELECT DISTINCT c.*
           FROM INTERFACE.CARGO c
          WHERE C.CARG_ID in AR_c1(i); --act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.ACTIVITY
         SELECT *
           FROM interface.ACTIVITY a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      DELETE FROM interface.ACTIVITY a
            WHERE carg_id = AR_c1(i); --act.carg_id;            

      commit;

      DELETE FROM interface.CARGO a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELA HOST_LOG - SCHEMA TOPS

      INSERT INTO ARCHIVE.HOST_LOG
         SELECT *
           FROM tops.HOST_LOG a
          WHERE carg_id = AR_c1(i); --act.carg_id;

      --commit;

      DELETE FROM tops.HOST_LOG a
            WHERE carg_id = AR_c1(i); --act.carg_id;

      commit;

      -------------------------------------------

      -- ARCHIVING TABELAS BTP_LOG_ERROS BTP_PROCESSAMENTO_HISTORICO BTP_PROCESSAMENTO_FILA   - SCHEMA HOST

/*      INSERT INTO ARCHIVE.BTP_LOG_ERROS
         SELECT *
           FROM HOST.BTP_LOG_ERROS a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_LOG_ERROS a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_HISTORICO
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_HISTORICO a
            WHERE carg_id = act.carg_id;

      --commit;

      INSERT INTO ARCHIVE.BTP_PROCESSAMENTO_FILA
         SELECT *
           FROM HOST.BTP_PROCESSAMENTO_FILA a
          WHERE carg_id = act.carg_id;

      --commit;

      DELETE FROM HOST.BTP_PROCESSAMENTO_FILA a
            WHERE carg_id = act.carg_id;
   --commit;
*/

   --END LOOP;
              
     END LOOP;    
     CLOSE c1;
     COMMIT;  
     
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      --raise;
END;

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."DEL_ARCHIVE_TOPS" 
IS

    /******************************************************************************
   --Objetivo:Deletar as mensagens no archive quando grande volume tops
   --Criação: ERICK - 04/11/2015
   --Sistema: ORACLE
   --Alteração:
   --Motivo da alteração: 
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/
   
V_CAAC_ID    CHAR(15);
    
   CURSOR c1
   IS
                                 
                                                                                                                                                                             
       select TGSQNO from tops.TG1CIM where TGCPFG = 'Y' and TGADAT <> '00000000' and To_Date(TGADAT, 'YYYY/MM/DD') < sysdate - 38;                                        
       type ARRAY_c1 is varray(1000000000) of CHAR(15);                       
       AR_c1 ARRAY_c1;             

BEGIN
   

   OPEN c1;
     
         FETCH c1 BULK COLLECT INTO AR_c1;
         FOR i IN AR_c1.FIRST .. AR_c1.LAST LOOP   
               
            delete from tops.TG1CIM where TGSQNO = AR_c1(i);
            commit;                                   

      
                  
     END LOOP;    
     CLOSE c1;
     COMMIT;  
     
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      raise;
END;

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."DEL_MSG_ERROR_1" 
IS

    /******************************************************************************
   --Objetivo:Deletar as mensagens que acusaram erro no processamento nas tabelas de log e processamento do BHS
   --Criação: ERICK - 24/03/2014
   --Sistema: ORACLE
   --Alteração: - ERICK - 30/03/2015
   --Motivo da alteração:- Solicitação para incluir os logs da mensagem 38 nas tabelas dos tops MSG_38 e MSG_38_ERROS, deixando apenas os ultimos 30 dias
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/

   V_CARG_ID    INTEGER;
    
   CURSOR c2
   IS
     SELECT distinct A.carg_id
       FROM INTERFACE.ACTIVITY a
      WHERE     
       --A.MESS_ID IN (1, 2, 4, 27, 28, 31, 37,38,39,24,26)
       --AND 
       A.CAAC_DATE <= SYSDATE - 1
       AND CAAC_STATUS = '1'
       AND CAAC_PROCESS = '1';
             
       type ARRAY_c2 is varray(1000000000) of number;                       
       AR_c2 ARRAY_c2;             

BEGIN
   

   OPEN c2;
     
         FETCH c2 BULK COLLECT INTO AR_c2;
         FOR i IN AR_c2.FIRST .. AR_c2.LAST LOOP   

     --V_CARG_ID:= AR_c2(i);    

      DELETE FROM BHS.ACVY_PROCESSAMENTO 
            WHERE CARG_ID = AR_c2(i); --act.carg_id;            

      commit;
                  
     END LOOP;    
     CLOSE c2;
     COMMIT;
     
DELETE FROM BHS.ACVY_LOG_ERROS WHERE ALOG_ACPR_ID NOT IN (SELECT ACPR_ID FROM BHS.ACVY_PROCESSAMENTO);

commit;

DELETE FROM TOPS.MSG_38 nologing WHERE CRT_TS <= SYSDATE - 7;

COMMIT;

delete from tops.MSG_38_ERROR nologing where crt_ts  <= sysdate - 7 ;
commit;

delete from tops.MSG_38_DAMAGE  nologing where crt_ts  <= sysdate - 7 ;
commit;

delete from tops.MSG_38_SEAL  nologing where crt_ts  <= sysdate - 7 ;
commit;

delete from tops.THALT nologing where crt_ts  <= sysdate - 7 ;
commit;

EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      --raise;
END;

  CREATE OR REPLACE PROCEDURE "ARCHIVE"."DEL_MSG_ERROR_3" 
IS

    /******************************************************************************
   --Objetivo:Deletar as mensagens que acusaram erro no processamento nas tabelas de log e processamento do BHS
   --Criação: ERICK - 24/03/2014
   --Sistema: ORACLE
   --Alteração: - ERICK - 30/03/2015
   --Motivo da alteração:- Solicitação para incluir os logs da mensagem 38 nas tabelas dos tops MSG_38 e MSG_38_ERROS, deixando apenas os ultimos 30 dias
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/

   V_CARG_ID    INTEGER;
    
   CURSOR c2
   IS
     SELECT distinct A.carg_id
       FROM INTERFACE.ACTIVITY a
      WHERE     
       A.MESS_ID IN (22,14,17,18,6,7,25)
       AND A.CAAC_DATE <= SYSDATE - 1
       AND CAAC_STATUS = '1'
       AND CAAC_PROCESS = '1';
             
       type ARRAY_c2 is varray(1000000000) of number;                       
       AR_c2 ARRAY_c2;             

BEGIN
   

   OPEN c2;
     
         FETCH c2 BULK COLLECT INTO AR_c2;
         FOR i IN AR_c2.FIRST .. AR_c2.LAST LOOP   

     --V_CARG_ID:= AR_c2(i);    

      DELETE FROM BHS.ACVY_PROCESSAMENTO 
            WHERE CARG_ID = AR_c2(i); --act.carg_id;            

      commit;
                  
     END LOOP;    
     CLOSE c2;
     COMMIT;
     
DELETE FROM BHS.ACVY_LOG_ERROS WHERE ALOG_ACPR_ID NOT IN (SELECT ACPR_ID FROM BHS.ACVY_PROCESSAMENTO);

commit;

DELETE FROM TOPS.MSG_38 WHERE CRT_TS<=SYSDATE - 30;

COMMIT;

DELETE FROM TOPS.MSG_38_ERROR WHERE CRT_TS<=SYSDATE - 30;

COMMIT;

EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      --raise;
END;

  CREATE OR REPLACE FORCE VIEW "BHS"."BTP_VW_DEADLINE_NAVIO" ("DEAD_LINE", "BOOKING") AS 
  SELECT VW.RECV_CTR_CUTOFF_TS, BOOK.BOOK_NUMERO_BOOKING
     FROM TOPS.VIEW_VES_SCHEDULE VW,
          BHS.ESCALA ESCA,
          BHS.BOOKING BOOK
    WHERE     TRIM (VW.TFC_EXP) = ESCA.ESCA_VIAGEM_TOS_EXP
          AND ESCA.ESCA_ID = BOOK.BOOK_ESCA_ID                    
          AND BOOK.BOOK_DTHR_CANCELAMENTO IS NULL

  CREATE OR REPLACE FORCE VIEW "BHS"."CNTR_BTP_PESO_BRUTO_ZERADO" ("CONT_NUMERO", "MERC_PESO_BRUTO", "MERC_PESO_LIQUIDO_MANIF", "MERC_TARA_MANIF", "MOT_CAPTACAO") AS 
  select  c.CONT_numero,V.MERC_PESO_BRUTO,V.MERC_PESO_LIQUIDO_MANIF,V.MERC_TARA_MANIF,M.MOCA_DESCRICAO mot_captacao
from BHS.MERCADORIA v,BHS.MOTIVO_CAPTACAO m, BHS.DOCUMENTO d,BHS.AMR_DOCUMENTO_MERCADORIA dm,BHS.CONTEINER c
where V.MERC_ID=DM.AMDM_MERC_ID and DM.AMDM_DCO_ID=D.DCO_ID and D.DCO_MOCA_ID=M.MOCA_ID and V.MERC_CONT_Id=C.CONT_ID and 
v.MERC_STATUS='T' and  c.CONT_numero in( 
select trim(item_no) from TOPS.ITEM i where I.HIST_FLG <>'Y' and I.CATEGORY in('I','T') and I.PLACE_OF_DELIVERY in('BTP','BTP_','DTAP', 'SOBR','TRAN'))       
and (V.MERC_PESO_BRUTO is null  or V.MERC_PESO_BRUTO=0)

  CREATE OR REPLACE FUNCTION "BHS"."FN_IMO_TOPS" 
(
IT_KEY CHAR  
)
   RETURN VARCHAR2
IS 
  IMOS VARCHAR2(100) := NULL;   

  CURSOR C1 IS 
    SELECT
    ITDA.DGS_CLASS 
    FROM
    TOPS.ITEM IT,
    TOPS.ITEM_DANGEROUS ITDA
    WHERE
    IT.ITEM_KEY = ITDA.ITEM_KEY
    AND IT.ITEM_KEY = IT_KEY;
  tmp_rs C1%rowtype;
     
BEGIN

    if NOT C1%ISOPEN then 
      open C1;
    END IF;

    LOOP
    
        fetch C1 into tmp_rs;                                        
        exit when C1%notfound;      
        
        if (IMOS is not null)
        then IMOS := IMOS || ', ';
        end if;
        
        IMOS := IMOS || tmp_rs.DGS_CLASS;        
         
    end loop;
    close C1;   
    
    RETURN IMOS;
END;

  CREATE OR REPLACE FUNCTION "BHS"."FN_ONU_TOPS" 
(
IT_KEY CHAR  
)
   RETURN VARCHAR2
IS 
  ONUS VARCHAR2(200) := NULL;   

  CURSOR C1 IS 
    SELECT
    ITDA.UN_NO 
    FROM
    TOPS.ITEM IT,
    TOPS.ITEM_DANGEROUS ITDA
    WHERE
    IT.ITEM_KEY = ITDA.ITEM_KEY
    AND IT.ITEM_KEY = IT_KEY;
  tmp_rs C1%rowtype;
     
BEGIN

    if NOT C1%ISOPEN then 
      open C1;
    END IF;

    LOOP
    
        fetch C1 into tmp_rs;                                        
        exit when C1%notfound;      
        
        if (ONUS is not null)
        then ONUS := ONUS || ', ';
        end if;
        
        ONUS := ONUS || tmp_rs.UN_NO;        
         
    end loop;
    close C1;   
        RETURN ONUS;
END;

  CREATE OR REPLACE FUNCTION "BHS"."FN_TEMPERATURA_TOPS" 
(
P_ITEM_KEY CHAR  
)
   RETURN VARCHAR2
IS 
  TEMPERATURA VARCHAR2(100) := NULL;   

  CURSOR C1 IS 
    SELECT
    ITRE.FROZEN_TEMP
    FROM
    TOPS.ITEM IT,
    TOPS.ITEM_REEFER ITRE
    WHERE
    IT.ITEM_KEY = ITRE.ITEM_KEY
    AND IT.ITEM_KEY = P_ITEM_KEY;
  tmp_rs C1%rowtype;
     
BEGIN

    if NOT C1%ISOPEN then 
      open C1;
    END IF;

    LOOP
    
        fetch C1 into tmp_rs;                                        
        exit when C1%notfound;      
        
        if (TEMPERATURA is not null)
        then TEMPERATURA := TEMPERATURA || ', ';
        end if;
        
        TEMPERATURA := TEMPERATURA || tmp_rs.FROZEN_TEMP;        
         
    end loop;
    close C1;   
    
    RETURN TEMPERATURA;
END;

  CREATE OR REPLACE FUNCTION "BHS"."FUNC_LACRES_TOPS" 
(
P_IT_KEY CHAR  
)
   RETURN VARCHAR2
IS 
  LACRES VARCHAR2(300) := NULL;   

  CURSOR C1 IS 
        SELECT
        TRIM(ITSE.SEAL_NO) SEAL_NO
        FROM
        TOPS.ITEM IT,
        TOPS.ITEM_SEAL ITSE        
        WHERE    
            IT.ITEM_KEY = ITSE.ITEM_KEY
        AND IT.ITEM_KEY = P_IT_KEY
        AND ITSE.STATUS = 'C';
  tmp_rs C1%rowtype;
     
BEGIN

    if NOT C1%ISOPEN then 
      open C1;
    END IF;

    LOOP
    
        fetch C1 into tmp_rs;                                        
        exit when C1%notfound;      
        
        if (LACRES is not null)
        then LACRES := LACRES || ', ';
        end if;
        
        LACRES := LACRES || tmp_rs.SEAL_NO;        
         
    end loop;
    close C1;   
    
    RETURN LACRES;
END
-------------------------------------------------------------
--Objeto:BHS.FUNC_LACRES_TOPS 
--Sistema: BHS
--Alteração: Allan Motroni - Data: 02/01/2017
--Objetivo: Trazer apenas lacres current e lacres sem espaços.
--Alteração:
--Objetivo:
-------------------------------------------------------------;
;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_CONTEINER" (
  P_CONTAINER              IN BHS.CONTEINER.CONT_NUMERO%TYPE,
  P_ISOC_ID                IN BHS.ISOCODE.ISOC_ID%TYPE := NULL,
  P_CONT_ID                OUT BHS.CONTEINER.CONT_ID%TYPE
) IS 
  V_COUNT                  PLS_INTEGER;
  V_ISOC_ID                BHS.ISOCODE.ISOC_ID%TYPE;
  V_ISOC_CODIGO            BHS.ISOCODE.ISOC_CODIGO%TYPE;
  V_RETORNO                BHS.CONTEINER.CONT_ID%TYPE;
  /******************************************************************************
   --Objeto: CONTEINER
   --Criação: T2S - 01/08/2013
   --Objetivo: RECUPERAR O ID DE UM CONTEINER E TRATAR DE INSER?-L0, CASO ELE NÃO EXISTA
   --Sistema: INTEGRADOR HOST-TOS
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/
BEGIN
    --Tenta buscar o ID do contêiner
    SELECT 
       CONT_ID INTO V_RETORNO
    FROM BHS.CONTEINER
       WHERE UPPER(TRIM(CONT_NUMERO)) = UPPER(TRIM(P_CONTAINER));
    
    P_CONT_ID := V_RETORNO;
EXCEPTION
   --Se contêiner não existir, então tente criá-lo.
   WHEN NO_DATA_FOUND THEN
      BEGIN
        IF P_ISOC_ID IS NULL THEN
          --Primeiro, busque o ISO Code
          BEGIN
            --Tente na primeira view do TOPS
            SELECT
              ORIG_ISO INTO V_ISOC_CODIGO
            FROM TOPS.RESTOW_CTR
            WHERE TRIM(UPPER(ITEM_NO)) = TRIM(UPPER(P_CONTAINER));
          EXCEPTION WHEN NO_DATA_FOUND THEN
            BEGIN
              --Senão conseguir na primeira, checa na segunda view
              SELECT
                ORIG_ISO INTO V_ISOC_CODIGO
              FROM TOPS.RESTOW_CADASTRO
              WHERE TRIM(UPPER(CTR_NO)) = TRIM(UPPER(P_CONTAINER));
            EXCEPTION WHEN NO_DATA_FOUND THEN
              --Por fim, se as duas tentativas anteriores falharem, tente pela última vez na tabela ITEM do TOPS
              --Se esta consulta falhar, um log será gerado para que o caso seja analisado
              SELECT
                ISO INTO V_ISOC_CODIGO
              FROM TOPS.ITEM
              WHERE TRIM(UPPER(ITEM_NO)) = TRIM(UPPER(P_CONTAINER));
            END;
          END;
          
          SP_ISOCODE(V_ISOC_CODIGO, V_ISOC_ID);
        ELSE
          V_ISOC_ID := P_ISOC_ID;
        END IF;
      
        --Crie um ID para ele...
        V_RETORNO := BHS.SQ_CONTEINER.NEXTVAL;
         
        --... E faça o seu cadastro na tabela CONTEINER
        INSERT INTO BHS.CONTEINER (
           CONT_ID, 
           CONT_NUMERO, 
           CONT_ISOC_ID
        ) VALUES (
           V_RETORNO,
           UPPER(TRIM(P_CONTAINER)),
           V_ISOC_ID
        );

        P_CONT_ID := V_RETORNO;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RAISE;
      END;
   WHEN OTHERS THEN
      RAISE;
END SP_CONTEINER;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_DESOVA_MSG24" (
  P_MERC_ID                   IN BHS.MERCADORIA.MERC_ID%TYPE,
  P_USUA_ID_ALTERACAO         IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE)  
IS
  V_MPRO_ID                   BHS.MENSAGENS_A_PROCESSAR.MPRO_ID%TYPE;
     
  V_ISOC_ID                   BHS.ISOCODE.ISOC_CODIGO%TYPE := NULL;
  V_MERC_PESO_LIQUIDO         BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE := NULL;
  V_MERC_PESO_BRUTO           BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE := NULL;
  V_MERC_ESCA_ID_EXP          BHS.MERCADORIA.MERC_ESCA_ID_EXP%TYPE;
  V_MERC_ESCA_ID_IMP          BHS.MERCADORIA.MERC_ESCA_ID_IMP%TYPE;
  V_CONT_TARA                 BHS.CONTEINER.CONT_TARA%TYPE := NULL;
  V_MERC_CH_VZ                BHS.MERCADORIA.MERC_CH_VZ%TYPE := NULL;
  V_CTCA_ID                   BHS.CATEGORIA_CARGA.CTCA_COD_TOS%TYPE := NULL;
  V_PORT_ID_POL               BHS.PORTO.PORT_ID%TYPE;
  V_PORT_ID_POD               BHS.PORTO.PORT_ID%TYPE;
  V_PORT_ID_FPOD              BHS.PORTO.PORT_ID%TYPE;
  V_LINER                     ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
  V_MERC_CATEGORIA            BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE;
  V_BUDL_CNTR_SLAVE1          BHS.BUNDLE.BUDL_CNTR_SLAVE1%TYPE;
  V_BUDL_CNTR_SLAVE2          BHS.BUNDLE.BUDL_CNTR_SLAVE2%TYPE;
  V_BUDL_CNTR_SLAVE3          BHS.BUNDLE.BUDL_CNTR_SLAVE3%TYPE;
  V_BUDL_CNTR_SLAVE4          BHS.BUNDLE.BUDL_CNTR_SLAVE4%TYPE;
  V_BUDL_CNTR_SLAVE5          BHS.BUNDLE.BUDL_CNTR_SLAVE5%TYPE;
  V_BUDL_CNTR_SLAVE6          BHS.BUNDLE.BUDL_CNTR_SLAVE6%TYPE;
  V_BUDL_CNTR_SLAVE7          BHS.BUNDLE.BUDL_CNTR_SLAVE7%TYPE;

  V_CLIENTE_ID                ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
   
  V_MERC_TEMPERATURA          BHS.MERCADORIA.MERC_TEMPERATURA%TYPE;
  V_MERC_VENTILACAO           BHS.MERCADORIA.MERC_VENTILACAO%TYPE;
  V_MERC_CO2                  BHS.MERCADORIA.MERC_CO2%TYPE;
  V_MERC_UMIDADE              BHS.MERCADORIA.MERC_UMIDADE%TYPE;
/******************************************************************************
--Criação: Allan Motroni - 17/03/2015
--Objetivo: CRIAR MENSAGEM A PROCESSAR QUANDO HOUVER ATUALIZAÇÕES DOS DADOS DE UMA MERCADORIA POR CONTA DA DESOVA TOTAL
--Sistema: INTEGRADOR HOST-TOS
--Alteração: Allan Motroni - 07/07/2016
--Motivo da alteração: Alterar a primeira consulta para retornar os valores com DISTINCT.
--Alteração: Vanessa Lopes - 07/07/2016
--Motivo da alteração: Filtro na primeira consulta para não trazer valores cancelados.
--Alteração: 
--Motivo da alteração:
******************************************************************************/
BEGIN       
    SELECT DISTINCT     
      D.DCO_PORT_ID_POD,
      D.DCO_PORT_ID_POL,
      D.DCO_PORT_ID_FPOD,
      D.DCO_LOPA_ID
    INTO
      V_PORT_ID_POD,
      V_PORT_ID_POL,
      V_PORT_ID_FPOD,
      V_CLIENTE_ID
    FROM BHS.DOCUMENTO D
    INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA DM ON (DM.AMDM_DCO_ID = D.DCO_ID)
    WHERE
        DM.AMDM_MERC_ID = P_MERC_ID  AND
        D.DCO_DT_CANCELAMENTO IS NULL AND
       (D.DCO_TICO_ID = 1 /* BL */ OR D.DCO_TICO_ID = 2 /* MBL */); 

  SELECT    
    TO_NUMBER(M.MERC_PESO_BRUTO) AS GROSS_WEIGHT,
    C.CONT_TARA AS TARE,    
    M.MERC_PESO_LIQUIDO AS NET_WEIGHT,
    M.MERC_CH_VZ,
    M.MERC_LOPA_ARM_IMP,
    M.MERC_CTCA_ID,
    M.MERC_CO2,
    M.MERC_VENTILACAO,
    M.MERC_TEMPERATURA,
    M.MERC_UMIDADE,
    C.CONT_ISOC_ID,
    B.BUDL_CNTR_SLAVE1,
    B.BUDL_CNTR_SLAVE2,
    B.BUDL_CNTR_SLAVE3,
    B.BUDL_CNTR_SLAVE4,
    B.BUDL_CNTR_SLAVE5,
    B.BUDL_CNTR_SLAVE6,
    B.BUDL_CNTR_SLAVE7,
    M.MERC_ESCA_ID_EXP,
    M.MERC_ESCA_ID_IMP
  INTO
    V_MERC_PESO_BRUTO,
    V_CONT_TARA,
    V_MERC_PESO_LIQUIDO,
    V_MERC_CH_VZ,
    V_LINER,
    V_CTCA_ID,
    V_MERC_CO2,
    V_MERC_VENTILACAO,
    V_MERC_TEMPERATURA,
    V_MERC_UMIDADE,
    V_ISOC_ID,
    V_BUDL_CNTR_SLAVE1,
    V_BUDL_CNTR_SLAVE2,
    V_BUDL_CNTR_SLAVE3,
    V_BUDL_CNTR_SLAVE4,
    V_BUDL_CNTR_SLAVE5,
    V_BUDL_CNTR_SLAVE6,
    V_BUDL_CNTR_SLAVE7,
    V_MERC_ESCA_ID_EXP,
    V_MERC_ESCA_ID_IMP
  FROM BHS.MERCADORIA M
  INNER JOIN BHS.CONTEINER C ON (C.CONT_ID = M.MERC_CONT_ID)
  INNER JOIN BHS.ISOCODE I ON (I.ISOC_ID = C.CONT_ISOC_ID)
  LEFT OUTER JOIN BHS.ESCALA EI ON (EI.ESCA_ID = M.MERC_ESCA_ID_IMP)  
  LEFT OUTER JOIN TOPS.ITEM IT ON (TRIM(IT.ITEM_NO) = C.CONT_NUMERO AND ((TRIM(IT.ARR_CAR) = EI.ESCA_VIAGEM_TOS_IMP)))
  LEFT OUTER JOIN BHS.BUNDLE B ON (B.BUDL_MERC_ID = M.MERC_ID)
  WHERE M.MERC_ID = P_MERC_ID;

  V_MPRO_ID := BHS.SQ_MENSAGENS_A_PROCESSAR.nextval;
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR (
    MPRO_ID,
    MPRO_MESS_ID
  ) VALUES (
    V_MPRO_ID,
    24
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_ID',
    P_MERC_ID
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CONT_NUMERO_ANTIGO',
    NULL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_ESCA_ID_EXP',
    V_MERC_ESCA_ID_EXP
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_ESCA_ID_IMP',
    V_MERC_ESCA_ID_IMP
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_USUA_ID_ALTERACAO',
    P_USUA_ID_ALTERACAO
  );
 
  --Registrando informações para segmento DCTR
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BOOK_ID',
    NULL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'ISOC_ID',
    V_ISOC_ID
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_PESO_LIQUIDO',
    V_MERC_PESO_LIQUIDO
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_PESO_BRUTO',
    V_MERC_PESO_BRUTO
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CONT_TARA',
    V_CONT_TARA
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_CH_VZ',
    V_MERC_CH_VZ
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CTCA_ID',
    V_CTCA_ID
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CTCA_ID_ANTIGA',
    NULL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'PORT_ID_POD',
    V_PORT_ID_POD
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'PORT_ID_POL',
    V_PORT_ID_POL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'PORT_ID_FPOD',
    V_PORT_ID_FPOD
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'LINER',
    V_LINER
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE1',
    V_BUDL_CNTR_SLAVE1
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE2',
    V_BUDL_CNTR_SLAVE2
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE3',
    V_BUDL_CNTR_SLAVE3
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE4',
    V_BUDL_CNTR_SLAVE4
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE5',
    V_BUDL_CNTR_SLAVE5
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE6',
    V_BUDL_CNTR_SLAVE6
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE7',
    V_BUDL_CNTR_SLAVE7
  );
 
  --Registrando informações para segmento CLIE
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CLIENTE_ID',
    V_CLIENTE_ID
  );
 
  --Registrando informações para segmento TEMP
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_TEMPERATURA',
    V_MERC_TEMPERATURA
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_CO2',
    V_MERC_CO2
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_VENTILACAO',
    V_MERC_VENTILACAO
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_UMIDADE',
    V_MERC_UMIDADE
  );
END SP_DESOVA_MSG24;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_EQUIPAMENTO" (
  P_EQUIP_CODIGO_TOS         IN BHS.EQUIPAMENTO.EQUIP_CODIGO_TOS%TYPE,
  P_EQUIP_ID                 OUT BHS.EQUIPAMENTO.EQUIP_ID%TYPE
) IS 
  V_RETORNO                  BHS.EQUIPAMENTO.EQUIP_ID%TYPE;
  V_TIEQ_ID                  BHS.TIPO_EQUIPAMENTO.TIEQ_ID%TYPE;
  /******************************************************************************
   --Objeto: EQUIPAMENTO
   --Criação: T2S - 21/11/2013
   --Objetivo: RECUPERAR O ID DE UM EQUIPAMENTO E TRATAR DE INSERÍ-L0, CASO ELE NÃO EXISTA
   --Sistema: INTEGRADOR HOST-TOS
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/
BEGIN
    --Tenta buscar o ID do Equipamento
    SELECT 
       EQUIP_ID INTO V_RETORNO
    FROM BHS.EQUIPAMENTO
       WHERE LOWER(TRIM(EQUIP_CODIGO_TOS)) = LOWER(TRIM(P_EQUIP_CODIGO_TOS));
    
    P_EQUIP_ID := V_RETORNO;
EXCEPTION
   --Se equipamento não existir, então tente criá-lo com base no TOPO
   WHEN NO_DATA_FOUND THEN
      BEGIN
        --Buscando o tipo do equipamento
        BEGIN
          SELECT
            TIEQ_ID INTO V_TIEQ_ID
          FROM BHS.TIPO_EQUIPAMENTO
          WHERE TRIM(LOWER(TIEQ_CONSTANTE)) = (
            SELECT
              CHE_TYPE
            FROM TOPS.VIEW_CHE_MASTER
            WHERE TRIM(LOWER(CHE_ID)) = TRIM(LOWER(P_EQUIP_CODIGO_TOS))
          );
        EXCEPTION WHEN NO_DATA_FOUND THEN
          --Se não achar, então grave o tipo do equipamento no BHS
          V_TIEQ_ID := BHS.SQ_TIPO_EQUIPAMENTO.nextval;
          
          INSERT INTO BHS.TIPO_EQUIPAMENTO (
            TIEQ_ID,
            TIEQ_CONSTANTE,
            TIEQ_DESCRICAO
          )
          SELECT
            V_TIEQ_ID,
            CHE_TYPE,
            DESCR
          FROM TOPS.VIEW_CHE_MASTER
          WHERE TRIM(LOWER(CHE_ID)) = TRIM(LOWER(P_EQUIP_CODIGO_TOS));
        END;
      
        --Crie um ID para o novo equipamento...
        V_RETORNO := BHS.SQ_EQUIPAMENTO.nextval;
         
        --... E faça o seu cadastro na tabela EQUIPAMENTO
        INSERT INTO BHS.EQUIPAMENTO (
           EQUIP_ID, 
           EQUIP_TIEQ_ID,
           EQUIP_CODIGO_TOS,
           EQUIP_ATIVO
        ) VALUES (
           V_RETORNO,
           V_TIEQ_ID,
           TRIM(P_EQUIP_CODIGO_TOS),
           1
        );
  
        P_EQUIP_ID := V_RETORNO;      
      EXCEPTION WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE;
      END;
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END SP_EQUIPAMENTO;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_EXP_CHEIO_MSG24" (
  P_MERC_ID             IN BHS.MERCADORIA.MERC_ID%TYPE,
  P_USUA_ID_ALTERACAO   IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
  P_ENVIAR_LACRES       NUMBER DEFAULT NULL)
IS
  V_MPRO_ID             BHS.MENSAGENS_A_PROCESSAR.MPRO_ID%TYPE;
  V_BOOKING             TOPS.BOOKINGS.BOOK_NO%TYPE;
  V_ISOC_ID             BHS.CONTEINER.CONT_ISOC_ID%TYPE := NULL;
  V_MERC_PESO_LIQUIDO   BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE := NULL;
  V_MERC_PESO_BRUTO     BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE := NULL;
  V_MERC_ESCA_ID_EXP    BHS.MERCADORIA.MERC_ESCA_ID_EXP%TYPE;
  V_MERC_ESCA_ID_IMP    BHS.MERCADORIA.MERC_ESCA_ID_IMP%TYPE;
  V_CONT_TARA           BHS.CONTEINER.CONT_TARA%TYPE := NULL;
  V_MERC_CH_VZ          BHS.MERCADORIA.MERC_CH_VZ%TYPE := NULL;
  V_CTCA_ID             BHS.MERCADORIA.MERC_CTCA_ID%TYPE := NULL;
  V_PORT_ID_POL         BHS.PORTO.PORT_ID%TYPE;
  V_PORT_ID_POD         BHS.PORTO.PORT_ID%TYPE;
  V_PORT_ID_FPOD        BHS.PORTO.PORT_ID%TYPE;
  V_LINER               BHS.MERCADORIA.MERC_LOPA_ARM_EXP%TYPE;
  V_MERC_CATEGORIA      BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE;
  V_BUDL_CNTR_SLAVE1    BHS.BUNDLE.BUDL_CNTR_SLAVE1%TYPE;
  V_BUDL_CNTR_SLAVE2    BHS.BUNDLE.BUDL_CNTR_SLAVE2%TYPE;
  V_BUDL_CNTR_SLAVE3    BHS.BUNDLE.BUDL_CNTR_SLAVE3%TYPE;
  V_BUDL_CNTR_SLAVE4    BHS.BUNDLE.BUDL_CNTR_SLAVE4%TYPE;
  V_BUDL_CNTR_SLAVE5    BHS.BUNDLE.BUDL_CNTR_SLAVE5%TYPE;
  V_BUDL_CNTR_SLAVE6    BHS.BUNDLE.BUDL_CNTR_SLAVE6%TYPE;
  V_BUDL_CNTR_SLAVE7    BHS.BUNDLE.BUDL_CNTR_SLAVE7%TYPE;

  V_CLIENTE_ID          ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;

  V_MERC_TEMPERATURA    BHS.MERCADORIA.MERC_TEMPERATURA%TYPE:= NULL;
  V_MERC_VENTILACAO     BHS.MERCADORIA.MERC_VENTILACAO%TYPE;
  V_MERC_CO2            BHS.MERCADORIA.MERC_CO2%TYPE;
  V_MERC_UMIDADE        BHS.MERCADORIA.MERC_UMIDADE%TYPE;
  V_ISO_CODE            TOPS.BOOKINGS.ISO%TYPE; 
  V_CONT_NUMERO               BHS.CONTEINER.CONT_NUMERO%TYPE;
  V_DEP_CAR                   TOPS.ITEM.DEP_CAR%TYPE;
  V_MERC_PESO_BRUTO_MANIF     BHS.MERCADORIA.MERC_PESO_BRUTO_MANIF%TYPE;
  V_MERC_PESO_LIQUIDO_MANIF   BHS.MERCADORIA.MERC_PESO_LIQUIDO_MANIF%TYPE;

/******************************************************************************
--Criação: fabio pozo 19082015
--Objetivo: atualizar pesos
--Sistema: INTEGRADOR HOST-TOS
--Alteração:Mariana Alves - 11/11/2015
--Motivo da alteração:Correção da atualização de temperatura
--Alteração:Mariana Alves - 12/11/2015
--Motivo da alteração: Nova correção da atualização de temperatura
--Alteração:Mariana Alves - 18/11/2015
--Motivo da alteração: Adição da regra caso peso bruto/líquido do BHS seja nulo, preencher TOPO com o peso bruto/líquido manifestado.
--Alteração:Mariana Alves - 15/04/2016
--Motivo da alteração: Adição de tratamento para converter temperatura, retirar vírgula e adicionar ponto.
--Alteração: Diego (T2S) - 01/07/2016
--Motivo da alteração: Trocado o RAISE por RAISE_APPLICATION_ERROR no final da procedure. Corrigidos os tipos das variáveis V_ISOC_ID, V_CTCA_ID e V_LINER.
--Alteração: Diego (T2S) - 04/08/2016
--Motivo da alteração: Adicionado o parâmetro P_ENVIAR_LACRES, preenchido pela procedure TAS.SP_SUBSTITUIR_LACRES_ABERTURA
******************************************************************************/
BEGIN
  --Tratamento para casos de DESISTÊNCIA DE EMBARQUE onde o booking será nulo
    SELECT BO.BOOK_PORT_ID_POD,
           BO.BOOK_PORT_ID_POL,
           BO.BOOK_PORT_ID_FPOD,
           BO.BOOK_LOPA_ID_ARMADOR,
           BO.BOOK_NUMERO_BOOKING,
           IT.ISO
      INTO V_PORT_ID_POD,
           V_PORT_ID_POL,
           V_PORT_ID_FPOD,
           V_CLIENTE_ID,
           V_BOOKING,
           V_ISO_CODE
      FROM TOPS.ITEM IT, BHS.VW_MERCADORIA MERC, BHS.BOOKING BO
     WHERE     TRIM (IT.BOOK_NO) = BO.BOOK_NUMERO_BOOKING
           AND TRIM (IT.ITEM_NO) = MERC.CONTEINER
           AND TRIM (IT.DEP_CAR) = MERC.VIAGEM_EXP
           AND BO.BOOK_DTHR_CANCELAMENTO IS NULL
           AND MERC.MERC_ID = P_MERC_ID;

  SELECT TO_NUMBER (M.MERC_PESO_BRUTO) AS GROSS_WEIGHT,
         C.CONT_TARA AS TARE,
         M.MERC_PESO_LIQUIDO AS NET_WEIGHT,
         M.MERC_CH_VZ,
         M.MERC_LOPA_ARM_EXP,
         M.MERC_CTCA_ID,
         M.MERC_CO2,
         M.MERC_VENTILACAO,
         REPLACE(M.MERC_TEMPERATURA,',','.'),
         M.MERC_UMIDADE,
         C.CONT_ISOC_ID,
         B.BUDL_CNTR_SLAVE1,
         B.BUDL_CNTR_SLAVE2,
         B.BUDL_CNTR_SLAVE3,
         B.BUDL_CNTR_SLAVE4,
         B.BUDL_CNTR_SLAVE5,
         B.BUDL_CNTR_SLAVE6,
         B.BUDL_CNTR_SLAVE7,
         M.MERC_ESCA_ID_EXP,
         M.MERC_ESCA_ID_IMP,
         C.CONT_NUMERO,
         IT.DEP_CAR,
         M.MERC_PESO_BRUTO_MANIF,
         M.MERC_PESO_LIQUIDO_MANIF
    INTO V_MERC_PESO_BRUTO,
         V_CONT_TARA,
         V_MERC_PESO_LIQUIDO,
         V_MERC_CH_VZ,
         V_LINER,
         V_CTCA_ID,
         V_MERC_CO2,
         V_MERC_VENTILACAO,
         V_MERC_TEMPERATURA,
         V_MERC_UMIDADE,
         V_ISOC_ID,
         V_BUDL_CNTR_SLAVE1,
         V_BUDL_CNTR_SLAVE2,
         V_BUDL_CNTR_SLAVE3,
         V_BUDL_CNTR_SLAVE4,
         V_BUDL_CNTR_SLAVE5,
         V_BUDL_CNTR_SLAVE6,
         V_BUDL_CNTR_SLAVE7,
         V_MERC_ESCA_ID_EXP,
         V_MERC_ESCA_ID_IMP,
         V_CONT_NUMERO,
         V_DEP_CAR,
         V_MERC_PESO_BRUTO_MANIF,
         V_MERC_PESO_LIQUIDO_MANIF
    FROM BHS.MERCADORIA M
         INNER JOIN BHS.CONTEINER C
            ON (C.CONT_ID = M.MERC_CONT_ID)
         INNER JOIN BHS.ISOCODE I
            ON (I.ISOC_ID = C.CONT_ISOC_ID)
         LEFT OUTER JOIN BHS.ESCALA EI
            ON (EI.ESCA_ID = M.MERC_ESCA_ID_EXP)
         LEFT OUTER JOIN TOPS.ITEM IT
            ON (    TRIM (IT.ITEM_NO) = C.CONT_NUMERO
                AND ( (TRIM (IT.DEP_CAR) = EI.ESCA_VIAGEM_TOS_EXP)))
         LEFT OUTER JOIN BHS.BUNDLE B
            ON (B.BUDL_MERC_ID = M.MERC_ID)
   WHERE M.MERC_ID = P_MERC_ID;

   --Regra de Peso: 
   --Caso peso BRUTO verificado (BHS) seja NULO ou ZERADO, 
   --preencher TopO com peso bruto manifestado
   IF (V_MERC_PESO_BRUTO IS NULL OR V_MERC_PESO_BRUTO = 0) THEN
     V_MERC_PESO_BRUTO := V_MERC_PESO_BRUTO_MANIF;
   END IF;
   --Regra de Peso: 
   --Caso peso LÍQUIDO verificado (BHS) seja NULO ou ZERADO, 
   --preencher TopO com peso líquido manifestado
   IF (V_MERC_PESO_LIQUIDO IS NULL OR V_MERC_PESO_LIQUIDO = 0) THEN
     V_MERC_PESO_LIQUIDO := V_MERC_PESO_LIQUIDO_MANIF;
   END IF;

  V_MPRO_ID := BHS.SQ_MENSAGENS_A_PROCESSAR.NEXTVAL;

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR (MPRO_ID, MPRO_MESS_ID)
       VALUES (V_MPRO_ID, 24);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_ID',
               P_MERC_ID);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'CONT_NUMERO_ANTIGO',
               NULL);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_ESCA_ID_EXP',
               V_MERC_ESCA_ID_EXP);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_ESCA_ID_IMP',
               V_MERC_ESCA_ID_IMP);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_USUA_ID_ALTERACAO',
               P_USUA_ID_ALTERACAO);

  --Registrando informações para segmento DCTR
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BOOK_ID',
               NULL);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'ISOC_ID',
               V_ISOC_ID);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_PESO_LIQUIDO',
               V_MERC_PESO_LIQUIDO);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_PESO_BRUTO',
               V_MERC_PESO_BRUTO);

 INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'CONT_TARA',
               V_CONT_TARA);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_CH_VZ',
               V_MERC_CH_VZ);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'CTCA_ID',
               V_CTCA_ID);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'CTCA_ID_ANTIGA',
               NULL);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'PORT_ID_POD',
               V_PORT_ID_POD);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'PORT_ID_POL',
               V_PORT_ID_POL);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'PORT_ID_FPOD',
               V_PORT_ID_FPOD);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'LINER',
               V_LINER);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE1',
               V_BUDL_CNTR_SLAVE1);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE2',
               V_BUDL_CNTR_SLAVE2);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE3',
               V_BUDL_CNTR_SLAVE3);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE4',
               V_BUDL_CNTR_SLAVE4);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE5',
               V_BUDL_CNTR_SLAVE5);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE6',
               V_BUDL_CNTR_SLAVE6);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'BUDL_CNTR_SLAVE7',
               V_BUDL_CNTR_SLAVE7);

  --Registrando informações para segmento CLIE
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'CLIENTE_ID',
               V_CLIENTE_ID);

   --Correção da regra de temperatura
   BEGIN
     SELECT
     IR.FROZEN_TEMP
     INTO V_MERC_TEMPERATURA
     FROM 
     TOPS.ITEM I, 
     TOPS.ITEM_REEFER IR
     WHERE I.ITEM_KEY = IR.ITEM_KEY
     AND TRIM(I.ITEM_NO) = TRIM(V_CONT_NUMERO)
     AND TRIM(I.DEP_CAR) = TRIM(V_DEP_CAR);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
     V_MERC_TEMPERATURA := 9999;
   END;
       
   --Registrando informações para segmento TEMP
   IF  V_MERC_TEMPERATURA <>9999  THEN
   V_MERC_TEMPERATURA := REPLACE(V_MERC_TEMPERATURA,',','.');
                      INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_TEMPERATURA',
               V_MERC_TEMPERATURA);
   END IF;                 

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_CO2',
               V_MERC_CO2);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_VENTILACAO',
               V_MERC_VENTILACAO);

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (MPRF_ID,
                                                MPRF_MPRO_ID,
                                                MPRF_FILTRO,
                                                MPRF_VALOR_FILTRO)
       VALUES (BHS.SQ_MSGS_A_PROCESSAR_FILTRO.NEXTVAL,
               V_MPRO_ID,
               'MERC_UMIDADE',
               V_MERC_UMIDADE);

  IF (P_ENVIAR_LACRES = 1) THEN
       INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
        MPRF_ID,
        MPRF_MPRO_ID,
        MPRF_FILTRO,
        MPRF_VALOR_FILTRO
      ) VALUES (
        BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
        V_MPRO_ID,
        'ENVIAR_LACRES',
        P_ENVIAR_LACRES
      );
    END IF;

EXCEPTION
WHEN OTHERS THEN
 RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);

END SP_EXP_CHEIO_MSG24;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_GERAR_TRANSBORDO" (
 P_MERC_ID         IN BHS.MERCADORIA.MERC_ID%TYPE,
 P_ESCA_ID         IN BHS.ESCALA.ESCA_ID%TYPE,
 P_LOPA_ID_ARMADOR IN ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE,
 P_PORT_ID_LLPOD   IN BHS.PORTO.PORT_ID%TYPE,
 P_BOOK_NUMERO     IN BHS.BOOKING.BOOK_NUMERO_BOOKING%TYPE,
 P_PORT_ID_FPOD    IN BHS.DOCUMENTO.DCO_PORT_ID_FPOD%TYPE,
 P_BOOK_ID         IN BHS.BOOKING.BOOK_ID%TYPE DEFAULT NULL,
 P_ISO_ID          IN BHS.ISOCODE.ISOC_ID%TYPE DEFAULT NULL,
 P_USUA_ID         IN VARCHAR2 DEFAULT NULL)
IS
 V_MERC_CH_VZ      BHS.MERCADORIA.MERC_CH_VZ%TYPE;
 V_MERC_STATUS     BHS.MERCADORIA.MERC_STATUS%TYPE;
 V_DCO_ID          BHS.AMR_DOCUMENTO_MERCADORIA.AMDM_DCO_ID%TYPE;
 V_CONT_ID         BHS.CONTEINER.CONT_ID%TYPE;
 V_ATVI_ID         BHS.ATIVIDADE.ATVI_ID%TYPE;
 V_CONT_NUMERO     BHS.CONTEINER.CONT_NUMERO%TYPE;
 V_BOOK_ID_ANT     BHS.BOOKING.BOOK_ID%TYPE;
 V_BOOK_KEY        TOPS.BOOKINGS.BOOK_KEY%TYPE;
BEGIN
---------------------------------------------------------------------------------------------------------------
--Objeto: BHS.SP_GERAR_TRANSBORDO
--Criação: T2S - Data: 25/07/2014 
--Objetivo: procedure de geração de transbordo utilizada pelo BHS
--Sistema: BHS
--Alteração: Diego Mendoza (T2S) 29/02/2016
--Motivo da alteração: adicionado o parâmetro P_PORT_ID_FPOD. O parâmetro P_BOOK_ID foi trocado por P_BOOK_NUMERO que será gravado na tabela MERCADORIA para caso de vazios
--Alteração: Diego Mendoza (T2S) 03/10/2016
--Motivo da alteração: adicionado o parâmetro P_BOOK_ID para amarração com a mercadoria e gravação do ISO
--Alteração: Diego Mendoza (T2S) 01/11/2016
--Motivo da alteração: adicionado o parâmetro P_USUA_ID e o envio das mensagens 22 e 24
---------------------------------------------------------------------------------------------------------------
UPDATE BHS.MERCADORIA
  SET MERC_ESCA_ID_EXP = P_ESCA_ID,
      MERC_CTCA_ID = (SELECT CTCA_ID FROM CATEGORIA_CARGA WHERE CTCA_CONSTANTE = 'CS_TRANS'),
      MERC_LOPA_ARM_EXP = NVL(P_LOPA_ID_ARMADOR, MERC_LOPA_ARM_IMP),
      MERC_PORT_ID_LLPOD = P_PORT_ID_LLPOD
WHERE MERC_DT_CANCEL IS NULL
  AND MERC_ID = P_MERC_ID;


SELECT MERC_CH_VZ, MERC_STATUS, CONT_ID, CONT_NUMERO
  INTO V_MERC_CH_VZ, V_MERC_STATUS, V_CONT_ID, V_CONT_NUMERO
  FROM MERCADORIA
 INNER JOIN BHS.CONTEINER ON (CONT_ID = MERC_CONT_ID)
 WHERE MERC_ID = P_MERC_ID
   AND MERC_DT_CANCEL IS NULL;


IF (V_MERC_CH_VZ = 'E') THEN
  UPDATE BHS.MERCADORIA
     SET MERC_BOOKING_SAIDA = P_BOOK_NUMERO,
         MERC_PORT_ID_FPOD = P_PORT_ID_FPOD
   WHERE MERC_DT_CANCEL IS NULL
     AND MERC_ID = P_MERC_ID;
     
  IF (P_BOOK_ID IS NOT NULL) THEN
    IF (P_ISO_ID IS NOT NULL) THEN
      UPDATE BHS.CONTEINER SET
        CONT_ISOC_ID_ORIGINAL = NVL(CONT_ISOC_ID_ORIGINAL, CONT_ISOC_ID),
        CONT_ISOC_ID = P_ISO_ID,
        CONT_DATA_MODIFICACAO = SYSDATE
      WHERE CONT_ID = V_CONT_ID;
    END IF;
    
    BEGIN
      SELECT MAX(B.BOOK_ID) INTO V_BOOK_ID_ANT
      FROM TAS.MERCADORIA M_TAS
      INNER JOIN BHS.ITEM_BOOKING IB ON (IB.ITBO_MERC_ID_TAS = M_TAS.MERC_ID)
      INNER JOIN BHS.BOOKING B ON (B.BOOK_ID = IB.ITBO_BOOK_ID)
      WHERE M_TAS.MERC_ID_BHS = P_MERC_ID
        AND B.BOOK_DTHR_CANCELAMENTO IS NULL
        AND IB.ITBO_DTHR_CANCELAMENTO IS NULL;
    EXCEPTION WHEN OTHERS THEN
      NULL;
    END;
    
    IF (V_BOOK_ID_ANT IS NOT NULL) THEN
        BHS.SP_DESASSOCIAR_MERC_BOOKING(P_MERC_ID, V_BOOK_ID_ANT);
    END IF;
    BHS.SP_ASSOCIAR_MERCADORIA_BOOKING(P_MERC_ID, P_BOOK_ID);
    
    BEGIN
      SELECT MIN(BOOK_KEY) INTO V_BOOK_KEY FROM TOPS.BOOKINGS
      WHERE TRIM(BOOK_NO) = P_BOOK_NUMERO
        AND TRIM(TFC_CODE) = (SELECT ESCA_VIAGEM_TOS_EXP FROM BHS.ESCALA WHERE ESCA_ID = P_ESCA_ID)
        AND HIST_FLG <> 'Y';
        
      UPDATE TOPS.ITEM SET
        BOOK_KEY = V_BOOK_KEY,
        BOOK_NO = P_BOOK_NUMERO
      WHERE TRIM(ITEM_NO) = V_CONT_NUMERO
        AND HIST_FLG <> 'Y'
        AND FEL = 'E';
        
      EXCEPTION WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao atualizar o booking no TopO. Detalhes: ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    END;
    
    BEGIN
      IF (V_MERC_STATUS = 'A') THEN
        BHS.SP_MENSAGEM22(P_MERC_ID);
      ELSIF (V_MERC_STATUS = 'T') THEN
        BHS.SP_MENSAGEM24_PRE(P_MERC_ID, NULL, NULL, NULL, NULL, P_USUA_ID);
      END IF;
      EXCEPTION WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao enviar a mensagem ao TopO. Detalhes: ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    END;
  END IF;
END IF;
 
EXCEPTION WHEN OTHERS THEN
 ROLLBACK;
 RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);

END SP_GERAR_TRANSBORDO;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_ISOCODE" (
  P_ISOC_CODIGO            IN BHS.ISOCODE.ISOC_CODIGO%TYPE,
  P_ISOC_ID                OUT BHS.ISOCODE.ISOC_CODIGO%TYPE
) IS 
  V_RETORNO                BHS.ISOCODE.ISOC_ID%TYPE;
  /******************************************************************************
   --Objeto: ISOCODE
   --Criação: T2S - 27/10/2013
   --Objetivo: RECUPERAR O ID DE UM ISOCDE E TRATAR DE INSERÍ-L0, CASO ELE NÃO EXISTA
   --Sistema: INTEGRADOR HOST-TOS
   --Alteração: -
   --Motivo da alteração: -
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/
BEGIN
    --Tenta buscar o ID do IsoCode
    SELECT 
       ISOC_ID INTO V_RETORNO
    FROM BHS.ISOCODE
       WHERE LOWER(TRIM(ISOC_CODIGO)) = LOWER(TRIM(P_ISOC_CODIGO));
    
    P_ISOC_ID := V_RETORNO;
EXCEPTION
   --Se o IsoCode não existir, então tente criá-lo.
   WHEN NO_DATA_FOUND THEN
      BEGIN
        --Crie um ID para ele...
        V_RETORNO := BHS.SQ_ISOCODE.NEXTVAL;
         
        --... E faça o seu cadastro na tabela ISOCODE
        INSERT INTO BHS.ISOCODE (
          ISOC_ID,
          ISOC_CODIGO,
          ISOC_ALTURA,
          ISOC_DESCRICAO,
          ISOC_TARA,
          ISOC_TAMANHO,
          ISOC_SIGLA
        ) SELECT
           V_RETORNO,
           UPPER(TRIM(P_ISOC_CODIGO)),
           TO_CHAR(HEIGHT),
           DESCR,
           TARE * 1000, /*Convertendo a tara, em toneladas, para kg*/
           TO_CHAR(LENGTH),
           CTR_TYPE
          FROM TOPS.VIEW_ISO_CODE
          WHERE UPPER(TRIM(ISO)) = UPPER(TRIM(P_ISOC_CODIGO));

        P_ISOC_ID := V_RETORNO;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RAISE;
      END;
   WHEN OTHERS THEN
      RAISE;
END SP_ISOCODE;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_LOG_PESAGEM" (
P_MERC_ID                     IN BHS.MERCADORIA.MERC_ID%TYPE, --ID da mercadoria do BHS
P_USUARIO                     IN BHS.LOG_PESAGEM.LOGP_USUARIO%TYPE, --Sistema que executou mecanismo que grava LOG. Pode ser 'MENSAGEM 20', 'MENSAGEM 09' ou 'BALANÇA RODOVIÁRIA'
P_PESO_BRUTO_BHS_ANT          IN BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_BHS_ANT%TYPE DEFAULT NULL,
P_PESO_BRUTO_BHS_NOVO         IN BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_BHS_NOVO%TYPE DEFAULT NULL,
P_PESO_BRUTO_MANIF_BHS_ANT    IN BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_BHS_NOVO%TYPE DEFAULT NULL,
P_PESO_BRUTO_MANIF_BHS_NOVO   IN BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_MANIF_BHS_NOVO%TYPE DEFAULT NULL,
P_PESO_LIQ_BHS_ANT            IN BHS.LOG_PESAGEM.LOGP_PESO_LIQ_BHS_ANT%TYPE DEFAULT NULL,
P_PESO_LIQ_BHS_NOVO           IN BHS.LOG_PESAGEM.LOGP_PESO_LIQ_BHS_NOVO%TYPE DEFAULT NULL,
P_PESO_LIQ_MANIF_BHS_ANT      IN BHS.LOG_PESAGEM.LOGP_PESO_LIQ_MANIF_BHS_ANT%TYPE DEFAULT NULL,
P_PESO_LIQ_MANIF_BHS_NOVO     IN BHS.LOG_PESAGEM.LOGP_PESO_LIQ_MANIF_BHS_NOVO%TYPE DEFAULT NULL,
P_TARA_BHS_ANT                IN BHS.LOG_PESAGEM.LOGP_TARA_BHS_ANT%TYPE DEFAULT NULL,
P_TARA_BHS_NOVO               IN BHS.LOG_PESAGEM.LOGP_TARA_BHS_NOVO%TYPE DEFAULT NULL,
P_GROSS_TOPS_ANT              IN BHS.LOG_PESAGEM.LOGP_GROSS_TOPS_ANT%TYPE DEFAULT NULL,
P_GROSS_TOPS_NOVO             IN BHS.LOG_PESAGEM.LOGP_GROSS_TOPS_NOVO%TYPE DEFAULT NULL,
P_TARE_TOPS_ANT               IN BHS.LOG_PESAGEM.LOGP_TARE_TOPS_ANT%TYPE DEFAULT NULL,
P_TARE_TOPS_NOVO              IN BHS.LOG_PESAGEM.LOGP_TARE_TOPS_NOVO%TYPE DEFAULT NULL,
P_CGOGROSSWT_TOPS_ANT         IN BHS.LOG_PESAGEM.LOGP_CGOGROSSWT_TOPS_ANT%TYPE DEFAULT NULL,
P_CGOGROSSWT_TOPS_NOVO        IN BHS.LOG_PESAGEM.LOGP_CGOGROSSWT_TOPS_NOVO%TYPE DEFAULT NULL,
P_USUARIO_MENSAGEM            IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE, --Usuário da rede que realizou pesagem, seja via RTG, GATE ou BALANÇA.
P_EQUIPAMENTO                 IN BHS.EQUIPAMENTO.EQUIP_ID%TYPE DEFAULT NULL, --Descrição do equipamento (Número/Gate da Lane, Número do RTG ou Número da Balança) 
P_CARG_ID                     IN INTERFACE.ACTIVITY.CARG_ID%TYPE DEFAULT NULL
)
IS
V_PESO_BRUTO_BHS_ANT          BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_BHS_ANT%TYPE DEFAULT P_PESO_BRUTO_BHS_ANT;
V_PESO_BRUTO_BHS_NOVO         BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_BHS_NOVO%TYPE DEFAULT P_PESO_BRUTO_BHS_NOVO;
V_PESO_BRUTO_MANIF_BHS_ANT    BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_BHS_NOVO%TYPE DEFAULT P_PESO_BRUTO_MANIF_BHS_ANT;
V_PESO_BRUTO_MANIF_BHS_NOVO   BHS.LOG_PESAGEM.LOGP_PESO_BRUTO_MANIF_BHS_NOVO%TYPE DEFAULT P_PESO_BRUTO_MANIF_BHS_NOVO;
V_PESO_LIQ_BHS_ANT            BHS.LOG_PESAGEM.LOGP_PESO_LIQ_BHS_ANT%TYPE DEFAULT P_PESO_LIQ_BHS_ANT;
V_PESO_LIQ_BHS_NOVO           BHS.LOG_PESAGEM.LOGP_PESO_LIQ_BHS_NOVO%TYPE DEFAULT P_PESO_LIQ_BHS_NOVO;
V_PESO_LIQ_MANIF_BHS_ANT      BHS.LOG_PESAGEM.LOGP_PESO_LIQ_MANIF_BHS_ANT%TYPE DEFAULT P_PESO_LIQ_MANIF_BHS_ANT;
V_PESO_LIQ_MANIF_BHS_NOVO     BHS.LOG_PESAGEM.LOGP_PESO_LIQ_MANIF_BHS_NOVO%TYPE DEFAULT P_PESO_LIQ_MANIF_BHS_NOVO;
V_TARA_BHS_ANT                BHS.LOG_PESAGEM.LOGP_TARA_BHS_ANT%TYPE DEFAULT P_TARA_BHS_ANT;
V_TARA_BHS_NOVO               BHS.LOG_PESAGEM.LOGP_TARA_BHS_NOVO%TYPE DEFAULT P_TARA_BHS_NOVO;
V_GROSS_TOPS_ANT              BHS.LOG_PESAGEM.LOGP_GROSS_TOPS_ANT%TYPE DEFAULT P_GROSS_TOPS_ANT;
V_GROSS_TOPS_NOVO             BHS.LOG_PESAGEM.LOGP_GROSS_TOPS_NOVO%TYPE DEFAULT P_GROSS_TOPS_NOVO;
V_TARE_TOPS_ANT               BHS.LOG_PESAGEM.LOGP_TARE_TOPS_ANT%TYPE DEFAULT P_TARE_TOPS_ANT;
V_TARE_TOPS_NOVO              BHS.LOG_PESAGEM.LOGP_TARE_TOPS_NOVO%TYPE DEFAULT P_TARE_TOPS_NOVO;
V_CGOGROSSWT_TOPS_ANT         BHS.LOG_PESAGEM.LOGP_CGOGROSSWT_TOPS_ANT%TYPE DEFAULT P_CGOGROSSWT_TOPS_ANT;
V_CGOGROSSWT_TOPS_NOVO        BHS.LOG_PESAGEM.LOGP_CGOGROSSWT_TOPS_NOVO%TYPE DEFAULT P_CGOGROSSWT_TOPS_NOVO;
V_CONTEINER                   BHS.CONTEINER.CONT_NUMERO%TYPE;
V_VIAGEM_EXP                  BHS.ESCALA.ESCA_VIAGEM_TOS_EXP%TYPE;
V_VIAGEM_IMP                  BHS.ESCALA.ESCA_VIAGEM_TOS_IMP%TYPE;
V_USUARIO_MENSAGEM            BHS.LOG_PESAGEM.LOGP_USUARIO_MENSAGEM%TYPE;
V_ITEM_KEY                    BHS.LOG_PESAGEM.LOGP_ITEM_KEY%TYPE;
V_EQUIPAMENTO                 BHS.LOG_PESAGEM.LOGP_EQUIPAMENTO%TYPE DEFAULT NULL;
V_AMTR_GATE_IP_PESO_OUT       BHS.AMR_TRANSPORTE_MERCADORIA.AMTR_GATE_IP_PESO_OUT%TYPE DEFAULT NULL;
V_VISIT_CODE                  TOPS.ITEM.VISIT_CODE%TYPE DEFAULT NULL;

 
/******************************************************************************
--Criação: T2S - 05/11/2015
--Objetivo: CRIAR LOG QUANDO UM PROCEDIMENTO DE PESAGEM FOR REALIZADO PELA OPERAÇÃO
--Sistema: INTEGRADOR HOST-TOS
--Alteração: Mariana Alves - 18/11/2015
--Motivo da alteração: Adição da regra caso peso bruto/líquido do BHS seja nulo, preencher TOPO com o peso bruto/líquido manifestado.
--Alteração: Mariana Alves - 03/12/2015
--Motivo da alteração: Adição do campo cargID e tratamento para disparo do log de pesagem na mensagem 14
--Alteração: Mariana Alves - 04/12/2015
--Motivo da alteração: Adição do log de pesagem na função de balança
--Alteração: Mariana Alves - 11/02/2016
--Motivo da alteração: Correção da busca na tabela AMR_TRANSPORTE_MERCADORIA por Visit Code
******************************************************************************/

BEGIN
  IF P_USUARIO = 'MENSAGEM 9' OR P_USUARIO = 'MENSAGEM 14' OR P_USUARIO = 'BALANÇA' THEN
    SELECT 
      MERC_PESO_BRUTO, 
      MERC_PESO_BRUTO_MANIF,
      MERC_PESO_LIQUIDO,
      MERC_PESO_LIQUIDO_MANIF,
      MERC_TARA_MANIF,
      CONT_NUMERO,
      EXP.ESCA_VIAGEM_TOS_EXP,
      IMP.ESCA_VIAGEM_TOS_IMP
    INTO 
      V_PESO_BRUTO_BHS_NOVO,
      V_PESO_BRUTO_MANIF_BHS_NOVO,
      V_PESO_LIQ_BHS_NOVO,
      V_PESO_LIQ_MANIF_BHS_NOVO, 
      V_TARA_BHS_NOVO,
      V_CONTEINER,
      V_VIAGEM_EXP,
      V_VIAGEM_IMP
    FROM MERCADORIA
    INNER JOIN CONTEINER ON(MERC_CONT_ID = CONT_ID)
    LEFT JOIN ESCALA EXP ON(MERC_ESCA_ID_EXP = EXP.ESCA_ID)
    LEFT JOIN ESCALA IMP ON(MERC_ESCA_ID_IMP = IMP.ESCA_ID)
    WHERE 
      MERC_ID = P_MERC_ID;
      
    BEGIN
    
      IF P_EQUIPAMENTO IS NOT NULL THEN
        SELECT  
          EQUIP_CODIGO_TOS 
        INTO
          V_EQUIPAMENTO
        FROM EQUIPAMENTO 
        WHERE 
          EQUIP_ID = P_EQUIPAMENTO;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      RAISE;
    END;
    
  ELSIF P_USUARIO = 'MENSAGEM 20' THEN 
    SELECT 
      MERC_PESO_BRUTO, 
      MERC_PESO_BRUTO_MANIF,
      MERC_PESO_LIQUIDO,
      MERC_PESO_LIQUIDO_MANIF,
      MERC_TARA_MANIF,
      CONT_NUMERO,
      EXP.ESCA_VIAGEM_TOS_EXP,
      IMP.ESCA_VIAGEM_TOS_IMP
    INTO 
      V_PESO_BRUTO_BHS_NOVO,
      V_PESO_BRUTO_MANIF_BHS_NOVO,
      V_PESO_LIQ_BHS_NOVO,
      V_PESO_LIQ_MANIF_BHS_NOVO, 
      V_TARA_BHS_NOVO,
      V_CONTEINER,
      V_VIAGEM_EXP,
      V_VIAGEM_IMP
    FROM MERCADORIA
    INNER JOIN CONTEINER ON(MERC_CONT_ID = CONT_ID)
    LEFT JOIN ESCALA EXP ON(MERC_ESCA_ID_EXP = EXP.ESCA_ID)
    LEFT JOIN ESCALA IMP ON(MERC_ESCA_ID_IMP = IMP.ESCA_ID)
    WHERE 
      MERC_ID = P_MERC_ID;
     BEGIN
         SELECT
            (GROSS * 1000),
            (CGO_GROSS_WT * 1000),
            (TARE * 1000),
            ITEM_KEY,
            TRIM(VISIT_CODE)
          INTO
            V_GROSS_TOPS_ANT,
            V_CGOGROSSWT_TOPS_ANT,
            V_TARE_TOPS_ANT,
            V_ITEM_KEY,
            V_VISIT_CODE
          FROM TOPS.ITEM
          WHERE
            TRIM(ITEM_NO) = V_CONTEINER AND 
            (TRIM(ARR_CAR) = V_VIAGEM_IMP OR
            TRIM(DEP_CAR) = V_VIAGEM_EXP);
        EXCEPTION
          WHEN OTHERS THEN
            V_GROSS_TOPS_ANT := NULL;
            V_CGOGROSSWT_TOPS_ANT := NULL;
            V_TARE_TOPS_ANT := NULL;
            V_ITEM_KEY := NULL;
            V_VISIT_CODE := NULL;
    END;      
     BEGIN
         IF V_VISIT_CODE IS NOT NULL THEN
            SELECT 
              AMTR_GATE_IP_PESO_OUT 
            INTO
              V_AMTR_GATE_IP_PESO_OUT
            FROM BHS.AMR_TRANSPORTE_MERCADORIA 
            WHERE 
            ROWNUM = 1 
            AND AMTR_AGEN_ID = V_VISIT_CODE;
         END IF;
     
        IF V_AMTR_GATE_IP_PESO_OUT IS NOT NULL THEN
          SELECT 
            GATE_IP_OCR
          INTO
            V_EQUIPAMENTO
          FROM GATE.GATE 
          WHERE 
            ROWNUM = 1 
            AND GATE_IP = V_AMTR_GATE_IP_PESO_OUT;
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        V_AMTR_GATE_IP_PESO_OUT := NULL;
      END;          
  END IF;
  

    
    /*Adiçao de regra: caso peso bruto verificado seja nulo, usar peso bruto manifestado
     Correção do log para os casos em que a mensagem 24 atualiza apenas o TOPO e o BHS permanece nulo
     */
    IF V_PESO_BRUTO_BHS_NOVO IS NULL OR V_PESO_BRUTO_BHS_NOVO = 0 THEN
      V_GROSS_TOPS_NOVO := V_PESO_BRUTO_MANIF_BHS_NOVO;
    ELSE
      V_GROSS_TOPS_NOVO := V_PESO_BRUTO_BHS_NOVO;
    END IF;
    
    /*Adiçao de regra: caso peso LÍQUIDO verificado seja nulo, usar peso LÍQUIDO manifestado
      Correção do log para os casos em que a mensagem 24 atualiza apenas o TOPO e o BHS permanece nulo
     */
    IF V_PESO_LIQ_BHS_NOVO IS NULL OR V_PESO_LIQ_BHS_NOVO = 0 THEN
      V_CGOGROSSWT_TOPS_NOVO := V_PESO_LIQ_MANIF_BHS_NOVO;
    ELSE
      V_CGOGROSSWT_TOPS_NOVO := V_PESO_LIQ_BHS_NOVO;
    END IF;

    V_TARE_TOPS_NOVO := V_TARA_BHS_NOVO;

  SELECT 
    USUA_LOGIN
  INTO 
    V_USUARIO_MENSAGEM
  FROM ACCESSCONTROL.USUARIO
  WHERE 
    USUA_ID = P_USUARIO_MENSAGEM;
 
  INSERT INTO LOG_PESAGEM 
    (LOGP_ID, 
    LOGP_MERC_ID, 
    LOGP_USUARIO, 
    LOGP_PESO_BRUTO_BHS_ANT, 
    LOGP_PESO_BRUTO_BHS_NOVO, 
    LOGP_PESO_BRUTO_MANIF_BHS_ANT, 
    LOGP_PESO_BRUTO_MANIF_BHS_NOVO, 
    LOGP_PESO_LIQ_BHS_ANT, 
    LOGP_PESO_LIQ_BHS_NOVO, 
    LOGP_PESO_LIQ_MANIF_BHS_ANT, 
    LOGP_PESO_LIQ_MANIF_BHS_NOVO, 
    LOGP_TARA_BHS_ANT, 
    LOGP_TARA_BHS_NOVO, 
    LOGP_GROSS_TOPS_ANT, 
    LOGP_GROSS_TOPS_NOVO, 
    LOGP_TARE_TOPS_ANT, 
    LOGP_TARE_TOPS_NOVO, 
    LOGP_CGOGROSSWT_TOPS_ANT, 
    LOGP_CGOGROSSWT_TOPS_NOVO,
    LOGP_DT_LOG,
    LOGP_USUARIO_MENSAGEM,
    LOGP_ITEM_KEY,
    LOGP_EQUIPAMENTO,
    LOGP_CARG_ID) 
  VALUES 
    (SQ_LOG_PESAGEM.NEXTVAL, 
    P_MERC_ID, 
    P_USUARIO, 
    V_PESO_BRUTO_BHS_ANT, 
    V_PESO_BRUTO_BHS_NOVO, 
    V_PESO_BRUTO_MANIF_BHS_ANT, 
    V_PESO_BRUTO_MANIF_BHS_NOVO, 
    V_PESO_LIQ_BHS_ANT, 
    V_PESO_LIQ_BHS_NOVO, 
    V_PESO_LIQ_MANIF_BHS_ANT, 
    V_PESO_LIQ_MANIF_BHS_NOVO, 
    V_TARA_BHS_ANT, 
    V_TARA_BHS_NOVO, 
    V_GROSS_TOPS_ANT, 
    V_GROSS_TOPS_NOVO, 
    V_TARE_TOPS_ANT, 
    V_TARE_TOPS_NOVO, 
    V_CGOGROSSWT_TOPS_ANT,  
    V_CGOGROSSWT_TOPS_NOVO,
    SYSDATE,
    V_USUARIO_MENSAGEM,
    V_ITEM_KEY,
    V_EQUIPAMENTO,
    P_CARG_ID);
    
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN 
    ROLLBACK;
    RAISE;
END SP_LOG_PESAGEM;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_MENSAGEM04" (
   P_MERC_ID              IN BHS.MERCADORIA.MERC_ID%TYPE,
   P_TIPO_BLOQUEIO        IN BHS.BLOQUEIO.BLOQ_CONSTANTE%TYPE,
   P_EQUIPAMENTO          IN BHS.EQUIPAMENTO.EQUIP_ID%TYPE,
   P_USUARIO_CONFERENTE   IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
   P_USUARIO_MOTORISTA    IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
   P_ATIVIDADE_DTHR_INI   IN VARCHAR2,
   P_ATIVIDADE_DTHR_FIM   IN VARCHAR2,
   P_ATIVIDADE_TIPO       IN BHS.TIPO_ATIVIDADE.TIAT_CONSTANTE%TYPE,
   P_MERC_POS_OUTBOUND    IN BHS.MERCADORIA.MERC_POS_OUTBOUND%TYPE,
   P_ATUALIZAR_GUIA_TOS   IN NUMBER := 0,
   P_FLAG_PESO            IN VARCHAR2,
   P_LISTA_IMOS           IN VARCHAR2)
IS
   V_ATVI_ID       BHS.ATIVIDADE.ATVI_ID%TYPE;
   V_AMBM_ID       BHS.AMR_BLOQUEIO_MERCADORIA.AMBM_ID%TYPE;
   V_ITEM_KEY      TOPS.ITEM.ITEM_KEY%TYPE;
   V_NUMERO_GUIA   BHS.AMR_GUIA_MERCADORIA.AMGM_NUMERO_GUIA%TYPE;
   V_TRA_TOS       BHS.TRA.TRA_TOS%TYPE;
   V_COUNT         NUMBER;
   V_AVARIA        NUMBER;
   V_CONTEINER     BHS.CONTEINER.CONT_NUMERO%TYPE;
   V_CARG_ID       INTERFACE.ACTIVITY.CARG_ID%TYPE DEFAULT NULL;
   V_CAAC_STATUS   INTERFACE.ACTIVITY.CAAC_STATUS%TYPE DEFAULT NULL;
   V_CAAC_PROCESS  INTERFACE.ACTIVITY.CAAC_PROCESS%TYPE DEFAULT NULL;
   V_BAIN_PESO     EDISRV.BAPLIE_IN.BAIN_PESO%TYPE;
   V_MERC_CTCA_ID  BHS.MERCADORIA.MERC_CTCA_ID%TYPE;
   V_IMO_ID        BHS.IMO.IMO_ID%TYPE;

   CURSOR BLOQUEIOS_ATIVOS_CURSOR /*A consulta abaixo recupera todos os bloqueios ativos da mercadoria*/
   IS
      SELECT AMBM_ID
        FROM BHS.AMR_BLOQUEIO_MERCADORIA
       WHERE AMBM_DT_FIM IS NULL AND AMBM_MERC_ID = P_MERC_ID;

   CURSOR LISTA_IMOS_CURSOR /*A consulta abaixo transforma um VARCHAR2 separado por vrgula em uma "tabela"*/
   IS
     SELECT TRIM(REGEXP_SUBSTR(P_LISTA_IMOS, '[^,]+', 1, LEVEL))
     FROM DUAL
       CONNECT BY REGEXP_SUBSTR(P_LISTA_IMOS, '[^,]+', 1, LEVEL) IS NOT NULL;
/******************************************************************************
   --Objeto: MENSAGEM04
   --Criação: T2S - 01/08/2013
   --Objetivo: CONFIRMAR DESCARGA DE MERCADORIA
   --Sistema: INTEGRADOR HOST-TOS
   --Alteração: ÍTALO - 14/03/2016
   --Motivo da alteração: RETIRAR DA MENSAGEM04 O INSERT DAS AVARIAS PADRÕES E INCLUIR AS MESMAS NA MENSAGEM07
   --Alteração: ÍTALO - 22/03/2016
   --Motivo da alteração: REALIZAR ALTERAÇÃO DE STATUS E PROCESS DA MENSAGEM 6 PARA REPROCESSAMENTO DA MESMA SE ELA PROCESSOU COM ERRO ORIGINALMENTE 
   --Alteração: Allan Motroni - 13/04/2016
   --Motivo da alteração: Inclusão do campo P_FLAG_PESO para alterar o peso verificado com o valor do peso manifestado.
   --Alteração: MARIANA - 22/06/2016 
   --Motivo da alteração: Inclusão de regra para inserir peso do Baplie (Projeto SOLAS)
   --Alteração: MARIANA - 06/07/2016 
   --Motivo da alteração: Incluindo regra de busca do peso apenas quando houver solicitação de VGM
   --Alteração: LEONARDO (T2S) - 29/03/2017
   --Motivo da alteração: Associando os IMOs de contêineres de remoção terra à mercadoria do BHS
   --Alteração: DIEGO (T2S) - 26/04/2017
   --Motivo da alteração: Ajuste no processo de alteração de status e process das mensagens 6 com erro
   ******************************************************************************/
BEGIN
   --Atualizando o status da mercadoria para "T" (No Terminal)
   UPDATE BHS.MERCADORIA
      SET MERC_STATUS = 'T', MERC_POS_OUTBOUND = P_MERC_POS_OUTBOUND
    WHERE MERC_ID = P_MERC_ID;

   --Gravando a atividade referente a esta mercadoria
   BHS.SP_ATIVIDADE_MERCADORIA ('I',
                                P_ATIVIDADE_TIPO /*Indica que o tipo das atividades serão sempre DESCARGA*/
                                                ,
                                'MNAVI', /*Indica que o Handling das atividades serão sempre MOVIMENTAÇÃO NO NAVIO*/
                                P_EQUIPAMENTO,
                                1, /*Indica que as atividades serão sempre ativas*/
                                P_ATIVIDADE_DTHR_INI,
                                P_ATIVIDADE_DTHR_FIM,
                                NULL,       /*Não há detalhes da localização*/
                                P_MERC_ID,
                                NULL,   /*Não há veículo para esta atividade*/
                                V_ATVI_ID);

--   SELECT COUNT (*)
--     INTO V_COUNT
--     FROM BHS.AMR_AVARIA_MERCADORIA
--    WHERE AMAM_MERC_ID = P_MERC_ID;

--   IF (V_COUNT = 0)
--   THEN
--     
--
--        INSERT INTO BHS.AMR_AVARIA_MERCADORIA (
--        AMAM_ID,
--        AMAM_MERC_ID,
--        AMAM_AVAR_ID,
--        AMAM_TIAV_ID_COMPLEMENTO,
--        AMAM_DT_CRIACAO,
--        AMAM_ATIVO,
--        AMAM_OBSERVACAO,
--        AMAM_USUA_ID
--      ) VALUES (
--        BHS.SQ_AMR_AVARIA_MERCADORIA.nextval,
--        P_MERC_ID,
--        18,
--        10,
--        SYSDATE,
--        1,
--        NULL,
--        P_USUARIO_CONFERENTE
--      );
--
--     
--
--      INSERT INTO BHS.AMR_AVARIA_MERCADORIA (
--        AMAM_ID,
--        AMAM_MERC_ID,
--        AMAM_AVAR_ID,
--        AMAM_TIAV_ID_COMPLEMENTO,
--        AMAM_DT_CRIACAO,
--        AMAM_ATIVO,
--        AMAM_OBSERVACAO,
--        AMAM_USUA_ID
--      ) VALUES (
--        BHS.SQ_AMR_AVARIA_MERCADORIA.nextval,
--        P_MERC_ID,
--        19,
--        10,
--      SYSDATE,
--        1,
--        NULL,
--        P_USUARIO_CONFERENTE
--      );
--
--     
--
--     INSERT INTO BHS.AMR_AVARIA_MERCADORIA (
--        AMAM_ID,
--        AMAM_MERC_ID,
--        AMAM_AVAR_ID,
--        AMAM_TIAV_ID_COMPLEMENTO,
--        AMAM_DT_CRIACAO,
--        AMAM_ATIVO,
--        AMAM_OBSERVACAO,
--        AMAM_USUA_ID
--      ) VALUES (
--        BHS.SQ_AMR_AVARIA_MERCADORIA.nextval,
--        P_MERC_ID,
--        20,
--        10,
--       SYSDATE,
--        1,
--        NULL,
--        P_USUARIO_CONFERENTE
--      );
--   END IF;


   --Grava os usuários que realizaram as atividades referentes a esta mercadoria
   BHS.SP_ATIVIDADE_USUARIO (V_ATVI_ID,
                             P_USUARIO_CONFERENTE,
                             'CS_CONFERENTE' /*Indica que o tipo de acesso do usuário é CONFERENTE*/
                                            );

   BHS.SP_ATIVIDADE_USUARIO (V_ATVI_ID, P_USUARIO_MOTORISTA, 'CS_MOTORISTA' /*Indica que o tipo de acesso do usuário é MOTORISTA*/
                                                                           );

   --Grava um bloqueio para esta mercadoria, caso ele seja necessário
   IF P_TIPO_BLOQUEIO IS NOT NULL
   THEN
      SP_BLOQUEIO_MERCADORIA ('I',
                              P_MERC_ID,
                              P_TIPO_BLOQUEIO,
                              P_ATIVIDADE_DTHR_FIM,
                              NULL,
                              P_USUARIO_CONFERENTE,
                              1);
   END IF;

   --Bloco de código que reenviará ao TOS mensagens 26 relativas a bloqueios ativos no BHS
   OPEN BLOQUEIOS_ATIVOS_CURSOR;

   LOOP
      FETCH BLOQUEIOS_ATIVOS_CURSOR INTO V_AMBM_ID;

      EXIT WHEN BLOQUEIOS_ATIVOS_CURSOR%NOTFOUND;

      --Dispara a mensagem 26 para o bloqueio ativo desta mercadoria
      BHS.SP_MENSAGEM26 (V_AMBM_ID);
   END LOOP;

   CLOSE BLOQUEIOS_ATIVOS_CURSOR;

   IF P_ATUALIZAR_GUIA_TOS = 1
   THEN
      NULL;
   /*BEGIN
     SELECT
       ITEM_KEY
     INTO
       V_ITEM_KEY
     FROM VW_CONTAINER_TOS_IMP
     WHERE MERC_ID_BHS = P_MERC_ID;

     SELECT
       AMGM_NUMERO_GUIA, TRA_TOS
     INTO
       V_NUMERO_GUIA, V_TRA_TOS
     FROM
       MERCADORIA
     LEFT JOIN AMR_GUIA_MERCADORIA ON (AMGM_MERC_ID = P_MERC_ID AND AMGM_STATUS = 1)
     LEFT JOIN TRA ON (TRA_ID = MERC_TRA_ID)
     WHERE
       MERC_ID = P_MERC_ID;

     UPDATE
       TOPS.ITEM
     SET
       GMCI = (SUBSTR(V_NUMERO_GUIA, 1, 7) || SUBSTR(V_NUMERO_GUIA, 10, 12)), PLACE_OF_DELIVERY = V_TRA_TOS
     WHERE ITEM_KEY = V_ITEM_KEY;

     INSERT INTO TOPS.ITEM_SPECIAL_HANDLING (ITEM_KEY, CODE, CRT_TS, UPD_TS) VALUES (V_ITEM_KEY, 'GMCI', SYSDATE, SYSDATE);

     SP_MENSAGEM24_PRE(P_MERC_ID, NULL, NULL, NULL, P_USUARIO_CONFERENTE);
   EXCEPTION
     WHEN OTHERS THEN
       RAISE;
   END;*/
   END IF;
   
   --Verificar se existe última mensagem 7 processada com erro "Status da Mercadoria ou Mercadoria não encontrada" de mesma data ou posterior à mensagem 4 e reprocessá-la
  BEGIN
    SELECT CONT.CONT_NUMERO, MERC.MERC_CTCA_ID INTO V_CONTEINER, V_MERC_CTCA_ID FROM BHS.CONTEINER CONT 
    INNER JOIN BHS.MERCADORIA MERC ON MERC.MERC_CONT_ID = CONT.CONT_ID WHERE MERC.MERC_ID = P_MERC_ID;
    
    SELECT MAX (DISTINCT AC.CARG_ID) INTO V_CARG_ID FROM INTERFACE.ACTIVITY AC WHERE AC.CAAC_DATA = V_CONTEINER AND AC.MESS_ID = 4 
    AND TO_DATE(AC.CAAC_DATE, 'DD/MM/YYYY') <= TO_DATE(SYSDATE, 'DD/MM/YYYY');
  
    SELECT MAX(DISTINCT A.CARG_ID), A.CAAC_STATUS, A.CAAC_PROCESS
      INTO 
      V_CARG_ID,
      V_CAAC_STATUS,
      V_CAAC_PROCESS 
    FROM INTERFACE.ACTIVITY A 
    WHERE A.CAAC_DATA = V_CONTEINER
    AND A.MESS_ID = 7
    AND TO_DATE(A.CAAC_DATE, 'DD/MM/YYYY HH:MI') >= (SELECT TO_DATE(S.CAAC_DATE, 'DD/MM/YYYY HH:MI') FROM INTERFACE.ACTIVITY S WHERE ROWNUM = 1 AND S.CARG_ID = V_CARG_ID)
    GROUP BY A.CAAC_STATUS, A.CAAC_PROCESS;
    
    --Caso haja uma mensagem 7 recente e com erro, reprocessar  
    IF V_CARG_ID IS NOT NULL AND V_CAAC_STATUS = 1 AND V_CAAC_PROCESS = 1 THEN
      UPDATE INTERFACE.ACTIVITY SET
      CAAC_STATUS = 0,
      CAAC_PROCESS = 0
      WHERE CARG_ID = V_CARG_ID;
    END IF;
    
  EXCEPTION
    WHEN OTHERS THEN
      V_CONTEINER := NULL;
      V_CAAC_STATUS := NULL;
      V_CAAC_PROCESS := NULL;
  END;
  
  --Alterando o peso verificado com o valor do peso manifestado 
  IF P_FLAG_PESO = '1' THEN  
      IF V_MERC_CTCA_ID = 3 THEN  --Se for transbordo, buscar peso do BAPLIE IN (Projetos SOLAS)
          BEGIN
            SELECT 
                BAIN.BAIN_PESO
                INTO 
                V_BAIN_PESO
                FROM EDISRV.BAPLIE_IN BAIN
                INNER JOIN BHS.VW_MERCADORIA MERC ON (MERC.CONTEINER = BAIN.BAIN_CONTEINER AND MERC.VIAGEM_IMP = BAIN.BAIN_VIAGEM_TOS)
                WHERE BAIN_VGM = 1
                AND MERC.MERC_ID = P_MERC_ID;
          EXCEPTION
          WHEN OTHERS THEN
                V_BAIN_PESO := NULL;
                --Se não encontrar o peso do Baplie, preencher com o peso manifestado
                UPDATE MERCADORIA SET 
                MERC_PESO_BRUTO = MERC_PESO_BRUTO_MANIF,
                MERC_PESO_LIQUIDO = MERC_PESO_LIQUIDO_MANIF
                WHERE MERC_ID = P_MERC_ID; 
          END;  
      ELSE
          UPDATE MERCADORIA SET 
              MERC_PESO_BRUTO = MERC_PESO_BRUTO_MANIF,
              MERC_PESO_LIQUIDO = MERC_PESO_LIQUIDO_MANIF
          WHERE 
              MERC_ID = P_MERC_ID;   
      END IF;
           
  END IF;
  
  --Bloco responsável por associar um novo IMO a uma mercadoria 
  IF TRIM(P_LISTA_IMOS) IS NOT NULL THEN
      OPEN LISTA_IMOS_CURSOR;
      LOOP
        FETCH LISTA_IMOS_CURSOR INTO V_IMO_ID;
        EXIT WHEN LISTA_IMOS_CURSOR%NOTFOUND;
        
        BHS.SP_IMO_MERCADORIA('I', P_MERC_ID, V_IMO_ID);
      END LOOP;
      CLOSE LISTA_IMOS_CURSOR;
  END IF;
  
  BEGIN
    V_CARG_ID := NULL;
    --Verificar se há mensagem 6 com erro para ser reprocessada
    SELECT
      MAX(DISTINCT A.CARG_ID) INTO V_CARG_ID
    FROM INTERFACE.ACTIVITY A 
    WHERE A.CAAC_DATA = V_CONTEINER
      AND A.MESS_ID = 6
      AND A.CAAC_STATUS = 1
      AND A.CAAC_PROCESS = 1
      AND A.CAAC_DATE BETWEEN (SYSDATE - 1) AND SYSDATE
    GROUP BY A.CAAC_STATUS, A.CAAC_PROCESS;
    
    --Caso haja uma mensagem 6 recente e com erro, reprocessar
    IF V_CARG_ID IS NOT NULL THEN
      UPDATE INTERFACE.ACTIVITY SET
      CAAC_STATUS = 0,
      CAAC_PROCESS = 0
      WHERE CARG_ID = V_CARG_ID;
    END IF;
    
    EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
      
END SP_MENSAGEM04;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_MENSAGEM14" (
    /*Parâmetros básicos*/
    P_MERC_ID       IN BHS.MERCADORIA.MERC_ID%TYPE,
    P_EQUIPAMENTO   IN BHS.EQUIPAMENTO.EQUIP_ID%TYPE,
    P_USUARIO       IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
    P_ATVI_DTHR_INI IN VARCHAR2,
    P_ATVI_DTHR_FIM IN VARCHAR2,
    /*Segmento DCTR*/
    P_ESCA_ID_EXP_TOS_NOVA  IN BHS.ESCALA.ESCA_VIAGEM_TOS_EXP%TYPE,
    P_ESCA_ID_IMP_TOS_NOVA  IN BHS.ESCALA.ESCA_VIAGEM_TOS_IMP%TYPE,
    P_CONT_NUMERO_NOVO      IN BHS.CONTEINER.CONT_NUMERO%TYPE,
    P_ISOC_ID_NOVO          IN BHS.ISOCODE.ISOC_ID%TYPE,
    P_CTCA_ID_NOVA          IN BHS.CATEGORIA_CARGA.CTCA_ID%TYPE,
    P_MERC_PESO_LIQUI_NOVO  IN BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE,
    P_MERC_PESO_BRUTO_NOVO  IN BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE,
    P_CONT_TARA_NOVA        IN BHS.CONTEINER.CONT_TARA%TYPE,
    P_PARAM_TENTATIVAS      IN BHS.HISTORICO_PESAGEM.HPES_PARAM_NUM_TENTATIVAS%TYPE,
    P_PARAM_PORCENTAGEM     IN BHS.HISTORICO_PESAGEM.HPES_PARAM_PORCENTAGEM%TYPE,
    P_DOCUMENTO_NUMERO_NOVO IN BHS.BOOKING.BOOK_NUMERO_BOOKING%TYPE,
    P_PORT_POL_NOVO         IN BHS.PORTO.PORT_PENTAGRAMA%TYPE,
    P_PORT_POD_NOVO         IN BHS.PORTO.PORT_PENTAGRAMA%TYPE,
    P_PORT_FPOD_NOVO        IN BHS.PORTO.PORT_PENTAGRAMA%TYPE,
    P_MERC_LOPA_ARM_EXP     IN ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE,
    P_MERC_LOPA_ARM_IMP     IN ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE,
    P_BUDL_CNTR_SLAVE1      IN BHS.BUNDLE.BUDL_CNTR_SLAVE1%TYPE,
    P_BUDL_CNTR_SLAVE2      IN BHS.BUNDLE.BUDL_CNTR_SLAVE2%TYPE,
    P_BUDL_CNTR_SLAVE3      IN BHS.BUNDLE.BUDL_CNTR_SLAVE3%TYPE,
    P_BUDL_CNTR_SLAVE4      IN BHS.BUNDLE.BUDL_CNTR_SLAVE4%TYPE,
    P_BUDL_CNTR_SLAVE5      IN BHS.BUNDLE.BUDL_CNTR_SLAVE5%TYPE,
    P_BUDL_CNTR_SLAVE6      IN BHS.BUNDLE.BUDL_CNTR_SLAVE6%TYPE,
    P_BUDL_CNTR_SLAVE7      IN BHS.BUNDLE.BUDL_CNTR_SLAVE7%TYPE,
    /*Segmento EXCE*/
    P_EXCE_FRONTAL  IN BHS.EXCESSO.EXCE_FRONTAL%TYPE,
    P_EXCE_TRASEIRO IN BHS.EXCESSO.EXCE_TRASEIRO%TYPE,
    P_EXCE_ALTURA   IN BHS.EXCESSO.EXCE_ALTURA%TYPE,
    P_EXCE_LAT_ESQ  IN BHS.EXCESSO.EXCE_LAT_ESQ%TYPE,
    P_EXCE_LAT_DIR  IN BHS.EXCESSO.EXCE_LAT_DIR%TYPE,
    /*Segmento TEMP*/
    P_FLAG_TEMP      IN NUMBER,
    P_MERC_TEMP_NOVA IN BHS.MERCADORIA.MERC_TEMPERATURA%TYPE,
    P_MERC_UMID_NOVA IN BHS.MERCADORIA.MERC_UMIDADE%TYPE,
    P_MERC_VENT_NOVA IN BHS.MERCADORIA.MERC_VENTILACAO%TYPE,
    P_MERC_CO2_NOVA  IN BHS.MERCADORIA.MERC_CO2%TYPE,
    P_MORF_DT_INICIO IN VARCHAR2,
    P_MORF_DT_FIM    IN VARCHAR2,
    /*Segmento CAPE*/
    P_LISTA_IMOS VARCHAR2,
    /*Lista de códigos IMO separados por vírgula*/
    /*Segmento CLIE*/
    P_LOPA_ID IN ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE,
    /*Segmento DCEN*/
    P_DOCUMENTO_NUMERO IN BHS.BOOKING.BOOK_NUMERO_BOOKING%TYPE,
    P_TIPO_DOCUMENTO   IN BHS.TIPO_DOCUMENTO.TIDO_CONSTANTE%TYPE,
    /*Flags de processamento*/
    P_CRIAR_DIVERG_PESO     IN NUMBER,
    P_REMOVER_CONTROLE_PESO IN NUMBER,
    P_MERC_PESO_LIQUI_MANIF IN BHS.MERCADORIA.MERC_PESO_LIQUIDO_MANIF%TYPE,
    P_CARG_ID IN INTERFACE.ACTIVITY.CARG_ID%TYPE,
    P_SORO_ID IN BHS.SOLICITACAO_ROLAGEM.SORO_ID%TYPE)
IS
  V_SOURCE_ID TOPS.THALT.SOURCE_ID%TYPE;
  V_VIAGEM_TOS_EXP BHS.ESCALA.ESCA_VIAGEM_TOS_EXP%TYPE;
  V_VIAGEM_TOS_IMP BHS.ESCALA.ESCA_VIAGEM_TOS_IMP%TYPE;

  V_COUNT_EXCESSO PLS_INTEGER;
  V_COUNT_FLAT_RACK PLS_INTEGER;  
  V_COUNT_OPEN_TOP PLS_INTEGER;
  V_COUNT_PLATAFORMA PLS_INTEGER;
  V_PESAGEM PLS_INTEGER            := 0; --Variável determina cenários de excesso que não devem permitir alteração de peso pela mensagem 14
  V_MERC_PESO_BRUTO BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE;
  V_MERC_PESO_LIQUIDO BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE;
  V_CONTEINER                   BHS.CONTEINER.CONT_NUMERO%TYPE;
  V_VIAGEM_EXP                  BHS.ESCALA.ESCA_VIAGEM_TOS_EXP%TYPE;
  V_VIAGEM_IMP                  BHS.ESCALA.ESCA_VIAGEM_TOS_IMP%TYPE;
  V_GROSS_TOPS                  TOPS.ITEM.GROSS%TYPE;
  V_CGOGROSSWT_TOPS             TOPS.ITEM.CGO_GROSS_WT%TYPE;
  V_TARE_TOPS                   TOPS.ITEM.TARE%TYPE;
  V_CARG_ID                     INTERFACE.ACTIVITY.CARG_ID%TYPE DEFAULT NULL;
  V_CAAC_STATUS                 INTERFACE.ACTIVITY.CAAC_STATUS%TYPE DEFAULT NULL;
  V_CAAC_PROCESS                INTERFACE.ACTIVITY.CAAC_PROCESS%TYPE DEFAULT NULL;

  V_ATVI_ID BHS.ATIVIDADE.ATVI_ID%TYPE;
  V_AVAR_ID BHS.AVARIA.AVAR_ID%TYPE;
  V_CONT_ID BHS.CONTEINER.CONT_ID%TYPE;
  V_ROLAGEM_BOOKING PLS_INTEGER := 0;
  V_BOOK_ID BHS.BOOKING.BOOK_ID%TYPE := 0;
  V_BOOK_ID_ATUAL BHS.BOOKING.BOOK_ID%TYPE := 0;
  V_IMO_ID BHS.IMO.IMO_ID%TYPE;
  V_HPES_ID BHS.HISTORICO_PESAGEM.HPES_ID%TYPE;
  V_TICKET_PESAGEM VARCHAR2(10);
  V_COUNT PLS_INTEGER;
  V_AUX PLS_INTEGER            := 0;
  V_ATUALIZAR_PESO PLS_INTEGER := 0;
  V_CTCA_CONSTANTE  BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE;
  V_ESCA_ID_ANTES NUMBER(38,0);
  V_ESCA_ID_DEPOIS NUMBER(38,0);
  V_POSICIONAMENTO PLS_INTEGER;
  V_VERMAS NUMBER(1,0);
  V_SORO_ID BHS.SOLICITACAO_ROLAGEM.SORO_ID%TYPE;
  V_RLNA_ID BHS.ROLLOVER_NAVIO.RLNA_ID%TYPE := 0;
  V_STSR_ID BHS.STATUS_SOLICITACAO_ROLAGEM.STSR_ID%TYPE;
  V_STSR_ID_CONCLUIDO BHS.STATUS_SOLICITACAO_ROLAGEM.STSR_ID%TYPE;
  
  --A consulta abaixo transforma um VARCHAR2 separado por vírgula em uma "tabela"  
  CURSOR LISTA_IMOS_CURSOR  
  IS
    SELECT TRIM(REGEXP_SUBSTR(P_LISTA_IMOS, '[^,]+', 1, LEVEL))
    FROM DUAL
      CONNECT BY REGEXP_SUBSTR(P_LISTA_IMOS, '[^,]+', 1, LEVEL) IS NOT NULL;
BEGIN

  /* BLOCO COMENTADO - TROCA DE CATEGORIA PASSARÁ A SER FEITA PELA MENSAGEM 17
  --Bloco responsável por atualizar a categoria da mercadoria
  IF P_CTCA_ID_NOVA IS NOT NULL THEN
    --Atualizando a categoria da mercadoria
    UPDATE BHS.MERCADORIA
    SET MERC_CTCA_ID = P_CTCA_ID_NOVA
    WHERE MERC_ID    = P_MERC_ID;
    --Gravando a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'CATE',
    --Indica que o tipo das atividades serão sempre ALTERAÇÃO DE CATEGORIA
    'CORR',
    --Indica que o Handling das atividades serão sempre CORREO
    NULL, 1,
    --Indica que as atividades sero sempre ativas
    P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    --No h detalhes sobre a localização da mercadoria
    P_MERC_ID, NULL,
    --No h veculo para esta atividade
    V_ATVI_ID );
    --Gravando o usuário que realizou a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
    --Indica que o tipo de acesso do usuário  CONFERENTE
    );   
    
      SELECT CTCA_CONSTANTE
      INTO V_CTCA_CONSTANTE
      FROM BHS.CATEGORIA_CARGA
      WHERE CTCA_ID = P_CTCA_ID_NOVA;
        
    
    IF V_CTCA_CONSTANTE='CS_REMO_BORDO' THEN
      --Atualizando o status da mercadoria para "S" (Sado do Terminal)
      UPDATE BHS.MERCADORIA
      SET MERC_STATUS = 'S'
      WHERE MERC_ID   = P_MERC_ID; 
    
      --Gravando a atividade referente a esta mercadoria
      BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'REMO', 'MNAVI', P_EQUIPAMENTO, 1,
      --Indica que as atividades sero sempre ativas
      P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
      --No h detalhes sobre a localização da mercadoria
      P_MERC_ID, NULL,
      --No h veculo para esta atividade
      V_ATVI_ID);
    END IF;
    
  END IF;
  */

  --Bloco responsável por atualizar o contêiner da mercadoria
  IF P_CONT_NUMERO_NOVO IS NOT NULL THEN
    --Recupera/insere o contêiner
    SP_CONTEINER(P_CONT_NUMERO_NOVO, P_ISOC_ID_NOVO, V_CONT_ID);
    --Atualiza o contêiner da mercadoria
    UPDATE BHS.MERCADORIA
    SET MERC_CONT_ID = V_CONT_ID
    WHERE MERC_ID    = P_MERC_ID;
    --Registra uma atividade de alteração de Contêiner da mercadoria
    BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'CNTR',
    /*Indica que o tipo da atividade ser ALTERAÇÃO DE CONTÊINER*/
    'CORR',
    /*Indica que o handling ser sempre CORREO*/
    P_EQUIPAMENTO, 1,
    /*Indica que a atividade  ativa*/
    P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    /*No h detalhes da localização*/
    P_MERC_ID, NULL,
    /*No h veculo para esta atividade*/
    V_ATVI_ID );
    --Grava o usuário que realizou a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
    /*Indica que o tipo de acesso do usuário  CONFERENTE*/
    );
  END IF;
  
  --Seleciona dados da mercadoria existente, utilizado abaixo
  SELECT
    MERC_PESO_BRUTO,
    MERC_PESO_LIQUIDO,
    CONT_NUMERO,
    EXP.ESCA_VIAGEM_TOS_EXP,
    IMP.ESCA_VIAGEM_TOS_IMP
    INTO
    V_MERC_PESO_BRUTO,
    V_MERC_PESO_LIQUIDO,
    V_CONTEINER,
    V_VIAGEM_EXP,
    V_VIAGEM_IMP
  FROM BHS.MERCADORIA
  INNER JOIN BHS.CONTEINER ON(MERC_CONT_ID = CONT_ID)
  LEFT JOIN BHS.ESCALA EXP ON(MERC_ESCA_ID_EXP = EXP.ESCA_ID)
  LEFT JOIN BHS.ESCALA IMP ON(MERC_ESCA_ID_IMP = IMP.ESCA_ID)
  WHERE MERC_ID = P_MERC_ID;  
  
  --Bloco responsável por atualizar o ISO Code do contêiner associado  mercadoria
  IF P_ISOC_ID_NOVO IS NOT NULL THEN
    UPDATE BHS.CONTEINER
    SET CONT_ISOC_ID = P_ISOC_ID_NOVO
    WHERE CONT_ID    =
      (SELECT MERC_CONT_ID FROM BHS.MERCADORIA WHERE MERC_ID = P_MERC_ID
      );
    --Registra uma atividade de alteração de ISO CODE da mercadoria
    BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'ISOC',
    /*Indica que o tipo da atividade ser ALTERAÇÃO DE ISOCODE*/
    'CORR',
    /*Indica que o handling ser sempre CORREO?*/
    P_EQUIPAMENTO, 1,
    /*Indica que a atividade  ativa*/
    P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    /*No h detalhes da localização*/
    P_MERC_ID, NULL,
    /*No h veculo para esta atividade*/
    V_ATVI_ID );
    --Grava o usuário que realizou a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
    /*Indica que o tipo de acesso do usuário  CONFERENTE*/
    );
  END IF;
  
  --Bloco responsável por obter o ID do booking atual
  BEGIN
    SELECT
      ITBO_BOOK_ID INTO V_BOOK_ID_ATUAL
    FROM BHS.ITEM_BOOKING IB
    INNER JOIN TAS.MERCADORIA M ON (IB.ITBO_MERC_ID_TAS = M.MERC_ID)
    WHERE M.MERC_ID_BHS = P_MERC_ID
      AND IB.ITBO_DTHR_CANCELAMENTO IS NULL;
  EXCEPTION
    WHEN OTHERS THEN
      V_BOOK_ID_ATUAL := 0;
  END;
  
  --Bloco responsável por obter o ID do novo booking
  IF P_DOCUMENTO_NUMERO_NOVO IS NOT NULL THEN
    --Recupera o ID do booking
    SELECT B.BOOK_ID
    INTO V_BOOK_ID
    FROM BHS.BOOKING B
    WHERE UPPER(TRIM(B.BOOK_NUMERO_BOOKING)) = UPPER(TRIM(P_DOCUMENTO_NUMERO_NOVO))
    AND B.BOOK_DTHR_CANCELAMENTO            IS NULL;
  END IF;
  
  --Bloco responsável por registrar a alteração da viagem de exportao da mercadoria
  --Se houve alteração somente da viagem de exportao, registrar o seu rollover
  SELECT 
  ESCA_IMP.ESCA_VIAGEM_TOS_IMP, 
  ESCA_EXP.ESCA_VIAGEM_TOS_EXP 
  INTO
  V_VIAGEM_TOS_IMP,
  V_VIAGEM_TOS_EXP
  FROM BHS.MERCADORIA MERC 
  LEFT JOIN BHS.ESCALA ESCA_IMP ON (ESCA_IMP.ESCA_ID = MERC.MERC_ESCA_ID_IMP)
  LEFT JOIN BHS.ESCALA ESCA_EXP ON (ESCA_EXP.ESCA_ID = MERC.MERC_ESCA_ID_EXP)
  WHERE MERC_ID = P_MERC_ID; 
  
  --Verifica se o booking da mercadoria foi alterado ou não
  V_ROLAGEM_BOOKING := (CASE WHEN V_BOOK_ID_ATUAL > 0 AND V_BOOK_ID > 0 AND V_BOOK_ID_ATUAL <> V_BOOK_ID THEN 1 ELSE 0 END);

  --Se houve alteração de booking ou viagem
  IF V_ROLAGEM_BOOKING = 1 OR NVL(V_VIAGEM_TOS_IMP, 'NULL') <> NVL(P_ESCA_ID_IMP_TOS_NOVA, 'NULL') OR NVL(V_VIAGEM_TOS_EXP,'NULL') <> NVL(P_ESCA_ID_EXP_TOS_NOVA,'NULL') THEN
    --Se for TRANSBORDO ou EXPORTAÇÃO, inserir ROLLOVER
    IF P_ESCA_ID_EXP_TOS_NOVA IS NOT NULL THEN
      --Buscar os IDs das viagens exp antes e depois
      SELECT MERC_ESCA_ID_EXP INTO V_ESCA_ID_ANTES FROM BHS.MERCADORIA WHERE MERC_ID = P_MERC_ID;
      SELECT ESCA_ID INTO V_ESCA_ID_DEPOIS FROM BHS.ESCALA WHERE (ESCA_VIAGEM_TOS_EXP = P_ESCA_ID_EXP_TOS_NOVA);
      
      IF NVL(V_ESCA_ID_ANTES, '0') <> V_ESCA_ID_DEPOIS AND V_ESCA_ID_DEPOIS > 0 THEN
        V_RLNA_ID := BHS.SQ_ROLLOVER_NAVIO.nextval;
        
        INSERT
        INTO BHS.ROLLOVER_NAVIO
          (
            RLNA_ID,
            RLNA_MERC_ID,
            RLNA_ESCA_ID_ANTES,
            RLNA_ESCA_ID_DEPOIS,
            RLNA_DT_CRIACAO,
            RLNA_USUA_ID,
            RLNA_CARG_ID
          )
          VALUES
          (
            V_RLNA_ID,
            P_MERC_ID,
            V_ESCA_ID_ANTES,
            V_ESCA_ID_DEPOIS,
            TO_DATE(P_ATVI_DTHR_FIM, 'DD/MM/YYYY HH24:MI:SS'),
            P_USUARIO,
            P_CARG_ID
          );
          
        --Caso haja posicionamento para a mercadoria, atualizar as tabelas APONTAMENTO_SERVICO E EVENTO do schema Billing
        SELECT COUNT(*) INTO V_POSICIONAMENTO FROM TAS.POSICIONAMENTO
        WHERE POSI_MERC_ID_BHS = P_MERC_ID
        AND POSI_DT_CONFIRMACAO IS NOT NULL
        AND POSI_DT_CANCELADO IS NULL;
        
        SELECT COUNT(*) INTO V_VERMAS 
        FROM BHS.AMR_MERCADORIA_VERMAS AMMV 
        WHERE AMMV.AMMV_MERC_ID_BHS = P_MERC_ID;
        
        IF (V_POSICIONAMENTO > 0 OR V_VERMAS > 0) AND V_ESCA_ID_ANTES > 0 AND V_ESCA_ID_DEPOIS > 0 THEN
          UPDATE BILLING.APONTAMENTO_SERVICO SET
            APSE_ESCA_ID = V_ESCA_ID_DEPOIS
          WHERE APSE_MERC_ID = P_MERC_ID AND APSE_ESCA_ID = V_ESCA_ID_ANTES;
          
          UPDATE BILLING.EVENTO SET
            VALOR_1 = V_ESCA_ID_DEPOIS
          WHERE VALOR_2 = P_MERC_ID AND VALOR_1 = V_ESCA_ID_ANTES;
        END IF;
        
        END IF;
      
      --Atualiza uma solicitação de rolagem pendente, confirmada manualmente ou de porto (criada pela Mensagem 18)
      IF P_SORO_ID > 0 THEN
        SELECT SORO_STSR_ID INTO V_STSR_ID FROM BHS.SOLICITACAO_ROLAGEM WHERE SORO_ID = P_SORO_ID;
        SELECT STSR_ID INTO V_STSR_ID_CONCLUIDO FROM BHS.STATUS_SOLICITACAO_ROLAGEM WHERE STSR_CONSTANTE = 'CS_CONCLUIDO';
        
        UPDATE BHS.SOLICITACAO_ROLAGEM
          SET SORO_RLNA_ID = (CASE WHEN V_RLNA_ID > 0 THEN V_RLNA_ID ELSE SORO_RLNA_ID END),
              SORO_ESCA_ID_ANTIGO = (CASE WHEN V_RLNA_ID > 0 THEN V_ESCA_ID_ANTES ELSE SORO_ESCA_ID_ANTIGO END),
              SORO_ESCA_ID_NOVO = (CASE WHEN V_RLNA_ID > 0 THEN V_ESCA_ID_DEPOIS ELSE SORO_ESCA_ID_NOVO END),
              SORO_BOOK_ID_ANTIGO = (CASE WHEN SORO_SOLIC_AUTOMATICA = 1 AND V_BOOK_ID_ATUAL > 0 THEN V_BOOK_ID_ATUAL ELSE SORO_BOOK_ID_ANTIGO END),
              SORO_BOOK_ID_NOVO = (CASE WHEN SORO_SOLIC_AUTOMATICA = 1 AND V_BOOK_ID > 0 THEN V_BOOK_ID ELSE SORO_BOOK_ID_NOVO END),
              SORO_DT_CONCLUSAO = SYSDATE,
              SORO_USUA_ID_CONCLUSAO = P_USUARIO,
              SORO_STSR_ID = V_STSR_ID_CONCLUIDO,
              SORO_TIRO_ID = (CASE WHEN V_RLNA_ID > 0 THEN (SELECT TIRO_ID FROM BHS.TIPO_ROLAGEM WHERE TIRO_CONSTANTE = 'NAVIO') ELSE SORO_TIRO_ID END)
          WHERE SORO_ID = P_SORO_ID;
        
        INSERT INTO BHS.HISTORICO_STATUS_SOLIC_ROLAGEM (
          HSSR_ID,
          HSSR_SORO_ID,
          HSSR_DATA,
          HSSR_STSR_ID_ANTES,
          HSSR_STSR_ID_DEPOIS,
          HSSR_USUA_ID,
          HSSR_MOTIVO
        ) VALUES (
          BHS.SQ_HIST_STATUS_SOLIC_ROLAGEM.NEXTVAL,
          P_SORO_ID,
          SYSDATE,
          V_STSR_ID,
          V_STSR_ID_CONCLUIDO,
          P_USUARIO,
          'MENSAGEM 14'
        );
      --Cria uma solicitação de rolagem
      ELSIF P_SORO_ID = -1 THEN
        SELECT STSR_ID INTO V_STSR_ID_CONCLUIDO FROM BHS.STATUS_SOLICITACAO_ROLAGEM WHERE STSR_CONSTANTE = 'CS_CONCLUIDO';
        
        V_SORO_ID := BHS.SQ_SOLICITACAO_ROLAGEM.NEXTVAL;
      
        INSERT INTO BHS.SOLICITACAO_ROLAGEM (
          SORO_ID,
          SORO_SEQ_GRUPO_SOLIC,
          SORO_MERC_ID,
          SORO_STSR_ID,
          SORO_PERFIL_SOLICITANTE,
          SORO_SOLIC_AUTOMATICA,
          SORO_TIRO_ID,
          SORO_ESCA_ID_ANTIGO,
          SORO_ESCA_ID_NOVO,
          SORO_BOOK_ID_ANTIGO,
          SORO_BOOK_ID_NOVO,
          SORO_DT_CRIACAO,
          SORO_USUA_ID_CRIACAO,
          SORO_DT_CONCLUSAO,
          SORO_USUA_ID_CONCLUSAO,
          SORO_RLNA_ID
        ) VALUES (
          V_SORO_ID,
          BHS.SQ_GRUPO_SOLICITACAO_ROLAGEM.NEXTVAL,
          P_MERC_ID,
          V_STSR_ID_CONCLUIDO,
          'S', /* Perfil: sistema */
          1, /* Solicitação automática */
          (SELECT TIRO_ID FROM BHS.TIPO_ROLAGEM WHERE TIRO_CONSTANTE = (CASE WHEN V_RLNA_ID > 0 THEN 'NAVIO' ELSE 'BKG' END)),
          (CASE WHEN V_RLNA_ID > 0 THEN V_ESCA_ID_ANTES ELSE NULL END),
          (CASE WHEN V_RLNA_ID > 0 THEN V_ESCA_ID_DEPOIS ELSE NULL END),
          (CASE WHEN V_BOOK_ID_ATUAL > 0 THEN V_BOOK_ID_ATUAL ELSE NULL END),
          (CASE WHEN V_BOOK_ID > 0 THEN V_BOOK_ID ELSE NULL END),
          SYSDATE, /* Data de criação */
          P_USUARIO, /* Usuário de criação */
          SYSDATE, /* Data de conclusão */
          P_USUARIO, /* Usuário de conclusão */
          (CASE WHEN V_RLNA_ID > 0 THEN V_RLNA_ID ELSE NULL END)
        );
        
        INSERT INTO BHS.HISTORICO_STATUS_SOLIC_ROLAGEM (
          HSSR_ID,
          HSSR_SORO_ID,
          HSSR_DATA,
          HSSR_STSR_ID_ANTES,
          HSSR_STSR_ID_DEPOIS,
          HSSR_USUA_ID,
          HSSR_MOTIVO
        ) VALUES (
          BHS.SQ_HIST_STATUS_SOLIC_ROLAGEM.NEXTVAL,
          V_SORO_ID,
          SYSDATE,
          NULL,
          V_STSR_ID_CONCLUIDO,
          P_USUARIO,
          'MENSAGEM 14'
        );
      END IF;
    END IF;

    --Atualiza a viagem de exportação da mercadoria
    UPDATE BHS.MERCADORIA
    SET MERC_ESCA_ID_EXP =
      (SELECT ESCA_ID
      FROM BHS.ESCALA
      WHERE ESCA_VIAGEM_TOS_EXP = P_ESCA_ID_EXP_TOS_NOVA
      ),
      MERC_STATUS_SISCARGA = NULL
    WHERE MERC_ID = P_MERC_ID;

    --Atualiza a viagem de importação da mercadoria
    UPDATE BHS.MERCADORIA
    SET MERC_ESCA_ID_IMP =
      (SELECT ESCA_ID
      FROM BHS.ESCALA
      WHERE ESCA_VIAGEM_TOS_IMP = P_ESCA_ID_IMP_TOS_NOVA
      ),
      MERC_STATUS_SISCARGA = NULL
    WHERE MERC_ID = P_MERC_ID;

    --Registra uma atividade de alteração de viagem da mercadoria
    BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'VIAG',
    /*Indica que o tipo da atividade ser ALTERAÇÃO DE VIAGEM*/
    'CORR',
    /*Indica que o handling ser sempre CORREO*/
    P_EQUIPAMENTO, 1,
    /*Indica que a atividade  ativa*/
    P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    /*No h detalhes da localização*/
    P_MERC_ID, NULL,
    /*No h veculo para esta atividade*/
    V_ATVI_ID );
    --Grava o usuário que realizou a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
    /*Indica que o tipo de acesso do usuário  CONFERENTE*/
    );    
  END IF;
  
  --Bloco responsável por atualizar o armador de importao da mercadoria
  IF P_MERC_LOPA_ARM_IMP IS NOT NULL THEN
    --Atualiza o armador
    UPDATE BHS.MERCADORIA
    SET MERC_LOPA_ARM_IMP = P_MERC_LOPA_ARM_IMP
    WHERE MERC_ID         = P_MERC_ID;
    --Registra uma atividade de alteração de armador da mercadoria
    BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'LINE',
    /*Indica que o tipo da atividade ser ALTERAÇÃO DE ARMADOR*/
    'CORR',
    /*Indica que o handling ser sempre CORREO*/
    P_EQUIPAMENTO, 1,
    /*Indica que a atividade  ativa*/
    P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    /*Não há detalhes da localização*/
    P_MERC_ID, NULL,
    /*Não há veculo para esta atividade*/
    V_ATVI_ID );
    --Grava o usuário que realizou a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
    /*Indica que o tipo de acesso do usuário  CONFERENTE*/
    );
  END IF;
  --Bloco responsável por atualizar o armador de exportao da mercadoria
  IF P_MERC_LOPA_ARM_EXP IS NOT NULL THEN
    --Atualiza o armador
    UPDATE BHS.MERCADORIA
    SET MERC_LOPA_ARM_EXP = P_MERC_LOPA_ARM_EXP
    WHERE MERC_ID         = P_MERC_ID;
    --Registra uma atividade de alteração de armador da mercadoria
    BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'LINE',
    /*Indica que o tipo da atividade ser ALTERAÇÃO DE ARMADOR*/
    'CORR',
    /*Indica que o handling ser sempre CORREO*/
    P_EQUIPAMENTO, 1,
    /*Indica que a atividade  ativa*/
    P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    /*Não há detalhes da localização*/
    P_MERC_ID, NULL,
    /*Não há veculo para esta atividade*/
    V_ATVI_ID );
    --Grava o usuário que realizou a atividade referente a esta mercadoria
    BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
    /*Indica que o tipo de acesso do usuário  CONFERENTE*/
    );
  END IF;
  --Bloco responsável por associar o novo booking à mercadoria
  IF V_BOOK_ID > 0 THEN
    UPDATE BHS.ITEM_BOOKING
    SET ITBO_BOOK_ID        = V_BOOK_ID
    WHERE ITBO_MERC_ID_TAS IN (SELECT MERC_ID FROM TAS.MERCADORIA WHERE MERC_ID_BHS = P_MERC_ID)
      AND ITBO_DTHR_CANCELAMENTO IS NULL;
  END IF;
  --Verificando se existe bundle para a mercadoria
  SELECT COUNT(BUDL_ID)
  INTO V_COUNT
  FROM BHS.BUNDLE
  WHERE BUDL_MERC_ID = P_MERC_ID;
  --Se já tem, então atualiza os respectivos bundles da mercadoria
  IF V_COUNT > 0 THEN
    UPDATE BHS.BUNDLE
    SET BUDL_CNTR_SLAVE1 = NVL(P_BUDL_CNTR_SLAVE1, BUDL_CNTR_SLAVE1),
      BUDL_CNTR_SLAVE2   = NVL(P_BUDL_CNTR_SLAVE2, BUDL_CNTR_SLAVE2),
      BUDL_CNTR_SLAVE3   = NVL(P_BUDL_CNTR_SLAVE3, BUDL_CNTR_SLAVE3),
      BUDL_CNTR_SLAVE4   = NVL(P_BUDL_CNTR_SLAVE4, BUDL_CNTR_SLAVE4),
      BUDL_CNTR_SLAVE5   = NVL(P_BUDL_CNTR_SLAVE5, BUDL_CNTR_SLAVE5),
      BUDL_CNTR_SLAVE6   = NVL(P_BUDL_CNTR_SLAVE6, BUDL_CNTR_SLAVE6),
      BUDL_CNTR_SLAVE7   = NVL(P_BUDL_CNTR_SLAVE7, BUDL_CNTR_SLAVE7)
    WHERE BUDL_MERC_ID   = P_MERC_ID;
    --Se no tem, e se pelo menos um contêiner slave foi informado, então crie um registro de bundle para esta mercadoria
  ELSIF P_BUDL_CNTR_SLAVE1 IS NOT NULL OR P_BUDL_CNTR_SLAVE2 IS NOT NULL OR P_BUDL_CNTR_SLAVE3 IS NOT NULL OR P_BUDL_CNTR_SLAVE4 IS NOT NULL OR P_BUDL_CNTR_SLAVE5 IS NOT NULL OR P_BUDL_CNTR_SLAVE6 IS NOT NULL OR P_BUDL_CNTR_SLAVE7 IS NOT NULL THEN
    INSERT
    INTO BHS.BUNDLE
      (
        BUDL_ID,
        BUDL_MERC_ID,
        BUDL_CNTR_MASTER,
        BUDL_CNTR_SLAVE1,
        BUDL_CNTR_SLAVE2,
        BUDL_CNTR_SLAVE3,
        BUDL_CNTR_SLAVE4,
        BUDL_CNTR_SLAVE5,
        BUDL_CNTR_SLAVE6,
        BUDL_CNTR_SLAVE7
      )
      VALUES
      (
        BHS.SQ_BUNDLE.NEXTVAL,
        P_MERC_ID,
        (SELECT C.CONT_NUMERO
        FROM BHS.MERCADORIA M
        INNER JOIN BHS.CONTEINER C
        ON (C.CONT_ID   = M.MERC_CONT_ID)
        WHERE M.MERC_ID = P_MERC_ID
        ),
        P_BUDL_CNTR_SLAVE1,
        P_BUDL_CNTR_SLAVE2,
        P_BUDL_CNTR_SLAVE3,
        P_BUDL_CNTR_SLAVE4,
        P_BUDL_CNTR_SLAVE5,
        P_BUDL_CNTR_SLAVE6,
        P_BUDL_CNTR_SLAVE7
      );
  END IF;
  --Se o peso mudou, registre a alteração na tabela de histórico de pesagem e verifique se poderá alterar ou não o seu peso
  
  IF P_CTCA_ID_NOVA IS NULL THEN  
    SELECT CTCA_CONSTANTE
    INTO V_CTCA_CONSTANTE
    FROM BHS.MERCADORIA MERC
    INNER JOIN BHS.CATEGORIA_CARGA CTCA ON (CTCA.CTCA_ID = MERC.MERC_CTCA_ID)
    WHERE MERC.MERC_ID = P_MERC_ID; 
  ELSE  
    SELECT CTCA_CONSTANTE
    INTO V_CTCA_CONSTANTE
    FROM BHS.CATEGORIA_CARGA
    WHERE CTCA_ID = P_CTCA_ID_NOVA;
  END IF;
  
  --Apenas para os casos de TRANSBORDO o peso no deve ser atualizado atravs da mensagem 14, pois no haver pesagem no RTG.
  --IF P_MERC_PESO_LIQUI_NOVO IS NOT NULL THEN
  
    --Verifica se contêiner tem excesso
     SELECT COUNT(*)
     INTO V_COUNT_EXCESSO
     FROM BHS.EXCESSO 
     WHERE EXCE_MERC_ID = P_MERC_ID;
     
     --Verifica se contêiner  plataforma
     SELECT COUNT(*)
     INTO V_COUNT_PLATAFORMA
     FROM BHS.MERCADORIA MERC
     INNER JOIN BHS.CONTEINER CONT ON (CONT.CONT_ID = MERC.MERC_CONT_ID)
     INNER JOIN BHS.ISOCODE ISO ON (ISO.ISOC_ID = CONT.CONT_ISOC_ID)
     WHERE UPPER(ISO.ISOC_SIGLA) LIKE UPPER('P%') --PLATAFORMA
     AND MERC.MERC_ID = P_MERC_ID;
     
     --Verifica se contêiner  flat rack
     SELECT COUNT(*)
     INTO V_COUNT_FLAT_RACK
     FROM BHS.MERCADORIA MERC
     INNER JOIN BHS.CONTEINER CONT ON (CONT.CONT_ID = MERC.MERC_CONT_ID)
     INNER JOIN BHS.ISOCODE ISO ON (ISO.ISOC_ID = CONT.CONT_ISOC_ID)
     WHERE UPPER(ISO.ISOC_SIGLA) LIKE UPPER('F%')
     AND MERC.MERC_ID = P_MERC_ID; --FLAT RACK
     
     --Verifica se contêiner  open top
     SELECT COUNT(*)
     INTO V_COUNT_OPEN_TOP
     FROM BHS.MERCADORIA MERC
     INNER JOIN BHS.CONTEINER CONT ON (CONT.CONT_ID = MERC.MERC_CONT_ID)
     INNER JOIN BHS.ISOCODE ISO ON (ISO.ISOC_ID = CONT.CONT_ISOC_ID)
     WHERE UPPER(ISO.ISOC_SIGLA) LIKE UPPER('U%')
     AND MERC.MERC_ID = P_MERC_ID; --OPEN TOP
     
  IF (V_COUNT_OPEN_TOP > 0 AND V_COUNT_EXCESSO > 0) OR V_COUNT_FLAT_RACK > 0 OR V_COUNT_PLATAFORMA > 0 OR V_COUNT_EXCESSO > 0 THEN
  V_PESAGEM := 1;
  END IF;
  --============================
  -- INCIO VERIFICAO DE PESAGEM
  --============================
  
  BEGIN
   SELECT
      (GROSS * 1000),
      (CGO_GROSS_WT * 1000),
      (TARE * 1000)
    INTO
      V_GROSS_TOPS,
      V_CGOGROSSWT_TOPS,
      V_TARE_TOPS
    FROM TOPS.ITEM
    WHERE
      TRIM(ITEM_NO) = V_CONTEINER AND 
      (TRIM(ARR_CAR) = V_VIAGEM_IMP OR
      TRIM(DEP_CAR) = V_VIAGEM_EXP);
  EXCEPTION
    WHEN OTHERS THEN
      V_GROSS_TOPS := NULL;
      V_CGOGROSSWT_TOPS := NULL;
      V_TARE_TOPS := NULL;
  END;
   --============================
  -- TÉRMINO VERIFICAÇÃO DE PESAGEM
  --============================ 
  
  
  IF P_MERC_PESO_LIQUI_NOVO IS NOT NULL
  AND V_CTCA_CONSTANTE <> 'CS_TRANS'
  AND V_PESAGEM = 0 THEN
    V_HPES_ID               := BHS.SQ_HISTORICO_PESAGEM.nextval;
    INSERT
    INTO BHS.HISTORICO_PESAGEM
      (
        HPES_ID,
        HPES_DIVERGENCIA,
        HPES_PARAM_NUM_TENTATIVAS,
        HPES_PARAM_PORCENTAGEM,
        HPES_CH_VZ,
        HPES_DT_PESAGEM,
        HPES_PESO_LIQ_VERIF,
        HPES_PESO_LIQ_MANIF,
        HPES_MERC_ID
      )
      VALUES
      (
        V_HPES_ID,
        P_CRIAR_DIVERG_PESO,
        P_PARAM_TENTATIVAS,
        P_PARAM_PORCENTAGEM,
        (SELECT MERC_CH_VZ FROM BHS.MERCADORIA WHERE MERC_ID = P_MERC_ID
        ),
        TO_DATE(P_ATVI_DTHR_FIM, 'DD/MM/YYYY HH24:MI:SS'),
        P_MERC_PESO_LIQUI_NOVO,
        P_MERC_PESO_LIQUI_MANIF, --NVL((SELECT MERC_PESO_LIQUIDO FROM BHS.MERCADORIA WHERE MERC_ID = P_MERC_ID), P_MERC_PESO_LIQUI_MANIF),
        P_MERC_ID
      );
    --Busca o ID da avaria de divergência de peso
    SELECT AVAR_ID
    INTO V_AVAR_ID
    FROM BHS.AVARIA A
    INNER JOIN BHS.TIPO_AVARIA TIAV_TIPO
    ON (TIAV_TIPO.TIAV_ID = A.AVAR_TIAV_ID)
    INNER JOIN BHS.TIPO_AVARIA TIAV_LOCAL
    ON (TIAV_LOCAL.TIAV_ID          = A.AVAR_TIAV_ID_LOCAL)
    WHERE TIAV_TIPO.TIAV_CODIGO_DTE = '32'
    AND TIAV_LOCAL.TIAV_CODIGO_DTE  = '23';
    --Se houve divergência, aumente a quantidade de tentativas de pesagem
    IF P_CRIAR_DIVERG_PESO = 1 THEN
      --Se esta atualização provém de um limite de tentativas de pesagem, remova as tentativas anteriores registradas
      IF P_REMOVER_CONTROLE_PESO = 1 THEN
        DELETE FROM BHS.CONTROLE_DIVERGENCIA_PESAGEM WHERE CDPE_MERC_ID = P_MERC_ID;
        V_ATUALIZAR_PESO := 1;
      ELSE
        --Checa se existe relao entre tentativas de pesagem e mercadoria
        SELECT COUNT(CDPE_ID)
        INTO V_COUNT
        FROM BHS.CONTROLE_DIVERGENCIA_PESAGEM
        WHERE CDPE_MERC_ID = P_MERC_ID;
        --Se não existir, crie um novo registro para realizar este controle
        IF V_COUNT = 0 THEN
          INSERT
          INTO BHS.CONTROLE_DIVERGENCIA_PESAGEM
            (
              CDPE_ID,
              CDPE_MERC_ID
            )
            VALUES
            (
              BHS.SQ_CONTR_DIVERGENCIA_PESAGEM.nextval,
              P_MERC_ID
            );
          --Caso contrário, apenas incremente a quantidade de tentativas
        ELSE
          UPDATE BHS.CONTROLE_DIVERGENCIA_PESAGEM
          SET CDPE_TENTATIVAS = CDPE_TENTATIVAS + 1
          WHERE CDPE_MERC_ID  = P_MERC_ID;
        END IF;
      END IF;
      --Agora se não houve divergncia ento atualize o peso (lquido e bruto)
    ELSE
      V_ATUALIZAR_PESO := 1;
    END IF;
    IF V_ATUALIZAR_PESO = 1 THEN
      --Atualiza o peso lquido, o bruto (se houve alteração)
      UPDATE BHS.MERCADORIA
      SET MERC_PESO_LIQUIDO = P_MERC_PESO_LIQUI_NOVO,
        MERC_PESO_BRUTO     = NVL(P_MERC_PESO_BRUTO_NOVO, MERC_PESO_BRUTO)
      WHERE MERC_ID         = P_MERC_ID;
      --Atualizando a tara do contêiner (se houve alteração)
      IF P_CONT_TARA_NOVA IS NOT NULL THEN
        UPDATE BHS.CONTEINER
        SET CONT_TARA = P_CONT_TARA_NOVA
        WHERE CONT_ID =
          (SELECT MERC_CONT_ID FROM BHS.MERCADORIA WHERE MERC_ID = P_MERC_ID
          );
      END IF;
      --Cria um ticket para essa pesagem
      V_TICKET_PESAGEM := (EXTRACT(YEAR FROM TO_DATE(P_ATVI_DTHR_FIM, 'DD/MM/YYYY HH24:MI:SS')) || LPAD(BHS.SQ_TICKET_PESAGEM.NEXTVAL, 6, '0'));
      UPDATE BHS.HISTORICO_PESAGEM
      SET HPES_TICKET_PESAGEM = V_TICKET_PESAGEM
      WHERE HPES_ID           = V_HPES_ID;
      UPDATE BHS.MERCADORIA
      SET MERC_TICKET_PESAGEM = V_TICKET_PESAGEM
      WHERE MERC_ID           = P_MERC_ID;
      -- Caso for repesagem, atualizar os usuarios e datas de posicionado e finalizao no posicionamento
      UPDATE TAS.POSICIONAMENTO
      SET POSI_DT_POSICIONADO = TO_DATE(P_ATVI_DTHR_INI, 'DD/MM/YYYY HH24:MI:SS'),
        POSI_USUA_POSICIONADO = P_USUARIO,
        POSI_DT_FINALIZADO    = TO_DATE(P_ATVI_DTHR_FIM, 'DD/MM/YYYY HH24:MI:SS'),
        POSI_USUA_FINALIZACAO = P_USUARIO
      WHERE POSI_MERC_ID_BHS  = P_MERC_ID
      AND TIPO_ID             =
        (SELECT TIPO_ID FROM TAS.TIPO_POSICIONAMENTO WHERE TIPO_CONSTANTE = 'REPES'
        )
      AND POSI_DT_CONFIRMACAO IS NOT NULL
      AND POSI_DT_POSICIONADO IS NULL
      AND POSI_DT_FINALIZADO  IS NULL
      AND POSI_DT_CANCELADO   IS NULL;
      --Registra uma atividade de alteração de peso da mercadoria
      BHS.SP_ATIVIDADE_MERCADORIA( 'I', 'PESO',
      /*Indica que o tipo da atividade ser ALTERAÇÃO DE PESO*/
      'CORR',
      /*Indica que o handling ser sempre CORREO*/
      P_EQUIPAMENTO, 1,
      /*Indica que a atividade  ativa*/
      P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
      /*No h detalhes da localização*/
      P_MERC_ID, NULL,
      /*No h veculo para esta atividade*/
      V_ATVI_ID );
      --Grava o usuário que realizou a atividade referente a esta mercadoria
      BHS.SP_ATIVIDADE_USUARIO( V_ATVI_ID, P_USUARIO, 'CS_CONFERENTE'
      /*Indica que o tipo de acesso do usuário  CONFERENTE*/
      );
      IF P_CRIAR_DIVERG_PESO = 1 THEN
        --Insere a amarrao entre avaria (divergncia de peso) e mercadoria, se no existir
        BHS.SP_AVARIA_MERCADORIA('I', P_MERC_ID, V_AVAR_ID, NULL, 1, NULL, P_USUARIO, NULL);
      ELSE
        -- Desativar avaria de divergncia de peso
        BHS.SP_AVARIA_MERCADORIA('U', P_MERC_ID, V_AVAR_ID, NULL, 0, NULL, P_USUARIO, NULL);
      END IF;
    END IF;
  END IF;
  
  --Dispara LOG de PESAGEM informando atualizao do peso
  SP_LOG_PESAGEM(P_MERC_ID, 
                 'MENSAGEM 14', 
                 NULL, 
                 P_MERC_PESO_BRUTO_NOVO,
                 NULL, 
                 NULL, 
                 NULL, 
                 P_MERC_PESO_LIQUI_NOVO, 
                 NULL, 
                 NULL, 
                 NULL, 
                 NULL, 
                 V_GROSS_TOPS, 
                 NULL, 
                 V_TARE_TOPS, 
                 NULL, 
                 V_CGOGROSSWT_TOPS, 
                 NULL, 
                 P_USUARIO, 
                 P_EQUIPAMENTO, 
                 P_CARG_ID);

    --Bloco responsável por atualizar os excessos da mercadoria
    SELECT COUNT(EXCE_ID)
    INTO V_COUNT
    FROM BHS.EXCESSO
    WHERE EXCE_MERC_ID = P_MERC_ID;
    --Checa se existe algum excesso registrado para a mercadoria
    IF (P_EXCE_FRONTAL IS NOT NULL OR P_EXCE_TRASEIRO IS NOT NULL OR P_EXCE_ALTURA IS NOT NULL OR P_EXCE_LAT_ESQ IS NOT NULL OR P_EXCE_LAT_DIR IS NOT NULL) THEN
      --Se no existir, crie um registro sobre excessos para a mercadoria
      IF V_COUNT = 0 THEN
      INSERT
      INTO BHS.EXCESSO
        (
          EXCE_ID,
          EXCE_MERC_ID,
          EXCE_FRONTAL,
          EXCE_TRASEIRO,
          EXCE_ALTURA,
          EXCE_LAT_ESQ,
          EXCE_LAT_DIR
        )
        VALUES
        (
          BHS.SQ_EXCESSO.nextval,
          P_MERC_ID,
          P_EXCE_FRONTAL,
          P_EXCE_TRASEIRO,
          P_EXCE_ALTURA,
          P_EXCE_LAT_ESQ,
          P_EXCE_LAT_DIR
        );
        ELSE        
          UPDATE BHS.EXCESSO
          SET EXCE_FRONTAL   = P_EXCE_FRONTAL,
            EXCE_TRASEIRO    = P_EXCE_TRASEIRO,
            EXCE_ALTURA      = P_EXCE_ALTURA,
            EXCE_LAT_ESQ     = P_EXCE_LAT_ESQ,
            EXCE_LAT_DIR     = P_EXCE_LAT_DIR
          WHERE EXCE_MERC_ID = P_MERC_ID;        
        END IF;
      --Caso contrrio, atualize o excesso que foi informado via parmetro
    ELSIF V_COUNT > 0 AND (P_EXCE_FRONTAL IS NULL AND P_EXCE_TRASEIRO IS NULL AND P_EXCE_ALTURA IS NULL AND P_EXCE_LAT_ESQ IS NULL AND P_EXCE_LAT_DIR IS NULL) THEN
        DELETE FROM BHS.EXCESSO WHERE EXCE_MERC_ID = P_MERC_ID;  
    END IF;

  --Atualizando temperatura, umidade, ventilao e CO2 da mercadoria, se houve alguma alteração nestes dados
  IF P_FLAG_TEMP = 1 THEN
    UPDATE BHS.MERCADORIA
    SET MERC_TEMPERATURA = P_MERC_TEMP_NOVA,
      MERC_UMIDADE       = NVL(P_MERC_UMID_NOVA, MERC_UMIDADE),
      MERC_CO2           = NVL(P_MERC_CO2_NOVA, MERC_CO2),
      MERC_VENTILACAO    = NVL(P_MERC_VENT_NOVA, MERC_VENTILACAO)
    WHERE MERC_ID        = P_MERC_ID;
  END IF;
  --Se houve mudança de temperatura, registre esta alteração
  IF P_MERC_TEMP_NOVA IS NOT NULL THEN
    INSERT
    INTO BHS.MONITORAMENTO_REFER
      (
        MORF_ID,
        MORF_MERC_ID,
        MORF_TEMP,
        MORF_DT_INICIO,
        MORF_DT_FINAL
      )
      VALUES
      (
        BHS.SQ_MONITORAMENTO_REFER.nextval,
        P_MERC_ID,
        P_MERC_TEMP_NOVA,
        TO_DATE(P_MORF_DT_INICIO, 'DD/MM/YYYY HH24:MI:SS'),
        TO_DATE(P_MORF_DT_FIM, 'DD/MM/YYYY HH24:MI:SS')
      );
  END IF;
  
  --Alteração caso categoria seja TRANSBORDO ou REMOÇÃO TERRA
  IF P_PORT_POD_NOVO IS NOT NULL THEN
    UPDATE MERCADORIA
    SET MERC_PORT_ID_LLPOD =
      (SELECT PORT_ID FROM PORTO WHERE PORT_PENTAGRAMA = P_PORT_POD_NOVO
      )
    WHERE MERC_ID = P_MERC_ID;
  END IF;
  
  --Alteração caso categoria seja REMOÇÃO TERRA
  IF V_CTCA_CONSTANTE = 'CS_REMO_TERRA' THEN
  
      IF P_PORT_POL_NOVO IS NOT NULL THEN
        UPDATE MERCADORIA
        SET MERC_PORT_ID_POL =
          (SELECT PORT_ID FROM PORTO WHERE PORT_PENTAGRAMA = P_PORT_POL_NOVO)
        WHERE MERC_ID = P_MERC_ID;
      END IF;
      
      IF P_PORT_POD_NOVO IS NOT NULL THEN
        UPDATE MERCADORIA
        SET MERC_PORT_ID_POD =
          (SELECT PORT_ID FROM PORTO WHERE PORT_PENTAGRAMA = P_PORT_POD_NOVO)
        WHERE MERC_ID = P_MERC_ID;
      END IF;
      
      IF P_PORT_FPOD_NOVO IS NOT NULL THEN
        UPDATE MERCADORIA
        SET MERC_PORT_ID_FPOD =
          (SELECT PORT_ID FROM PORTO WHERE PORT_PENTAGRAMA = P_PORT_FPOD_NOVO)
        WHERE MERC_ID = P_MERC_ID;
      END IF;
  
  END IF;
  
  --Bloco responsável por associar um novo IMO a uma mercadoria 
  IF TRIM(P_LISTA_IMOS) IS NOT NULL THEN
    OPEN LISTA_IMOS_CURSOR;
    LOOP
      FETCH LISTA_IMOS_CURSOR INTO V_IMO_ID;
      EXIT
    WHEN LISTA_IMOS_CURSOR%NOTFOUND;
      
      SELECT COUNT(AMIM_ID)
      INTO V_COUNT
      FROM BHS.AMR_IMO_MERCADORIA
      WHERE AMIM_MERC_ID = P_MERC_ID
      AND AMIM_IMO_ID    = V_IMO_ID;
      --Amarra o IMO apenas se j no existir uma amarrao entre ambos
      IF V_COUNT = 0 THEN
        INSERT
        INTO BHS.AMR_IMO_MERCADORIA
          (
            AMIM_ID,
            AMIM_MERC_ID,
            AMIM_IMO_ID
          )
          VALUES
          (
            BHS.SQ_AMR_IMO_MERCADORIA.nextval,
            P_MERC_ID,
            V_IMO_ID
          );
      END IF;
      
    END LOOP;
  CLOSE LISTA_IMOS_CURSOR;
  
   --MARIANA 20/01/2016: Os processos IMPO e CABO estão com problemas de inclusão de IMO no TOPO durante a leitura do baplie via TOPO. Para evitar remoção indevida, 
   --suspendemos temporariamente esta ação.
   IF V_CTCA_CONSTANTE <> 'CS_IMPO' AND V_CTCA_CONSTANTE <> 'CS_CABO' THEN
      --Deletar todos os IMOS que esto no BHS, mas no esto no TOPO.
      DELETE FROM BHS.AMR_IMO_MERCADORIA
      WHERE AMIM_MERC_ID = P_MERC_ID
        AND AMIM_IMO_ID IN (
          --Todos os IMOS do BHS
          SELECT AMIM_IMO_ID
          FROM BHS.AMR_IMO_MERCADORIA
          WHERE AMIM_MERC_ID = P_MERC_ID
          AND AMIM_IMO_ID NOT IN
          (
            --Todos os IMOS do TOPO
            SELECT TRIM(REGEXP_SUBSTR(P_LISTA_IMOS, '[^,]+', 1, LEVEL))
            FROM DUAL
            CONNECT BY REGEXP_SUBSTR(P_LISTA_IMOS, '[^,]+', 1, LEVEL) IS NOT NULL
          ));
    END IF;  
  ELSE
    --MARIANA 20/01/2016: Os processos IMPO e CABO estão com problemas de inclusão de IMO no TOPO durante a leitura do baplie via TOPO. Para evitar remoção indevida, 
    --suspendemos temporariamente esta ação.
    IF V_CTCA_CONSTANTE <> 'CS_IMPO' AND V_CTCA_CONSTANTE <> 'CS_CABO' THEN
      DELETE FROM BHS.AMR_IMO_MERCADORIA WHERE AMIM_MERC_ID = P_MERC_ID;    
    END IF;
  END IF;
 
  --Verificar se existe ltima mensagem 17 processada com erro "Mercadoria no encontrada" de mesma data ou posterior  mensagem 14 e reprocess-la
  BEGIN
    SELECT MAX(DISTINCT A.CARG_ID), A.CAAC_STATUS, A.CAAC_PROCESS
      INTO 
      V_CARG_ID,
      V_CAAC_STATUS,
      V_CAAC_PROCESS
    FROM INTERFACE.ACTIVITY A 
    WHERE A.CAAC_DATA = V_CONTEINER
    AND A.MESS_ID = 17
    AND TO_DATE(A.CAAC_DATE, 'DD/MM/YYYY HH:MI') >= (SELECT TO_DATE(S.CAAC_DATE, 'DD/MM/YYYY HH:MI') FROM INTERFACE.ACTIVITY S WHERE ROWNUM = 1 AND S.CARG_ID = P_CARG_ID)
    GROUP BY A.CAAC_STATUS, A.CAAC_PROCESS;
    
    --Buscar mensagens geradas a partir to TOPX (tela RCM). Desconsiderar mensagens 17 geradas por esta tela "Restowed Containers Enquiry"           
    SELECT         
    SOURCE_ID         
    INTO V_SOURCE_ID        
    FROM TOPS.THALT         
    WHERE CARG_ID = V_CARG_ID;        
        
    --Caso haja uma mensagem 17 recente e com erro, reprocessar  
    IF V_CARG_ID IS NOT NULL AND V_CAAC_STATUS = 1 AND V_CAAC_PROCESS = 1 AND V_SOURCE_ID <> 'RCM' THEN
      UPDATE INTERFACE.ACTIVITY SET
      CAAC_STATUS = 0,
      CAAC_PROCESS = 0
      WHERE CARG_ID = V_CARG_ID;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      V_CONTEINER := NULL;
      V_CAAC_STATUS := NULL;
      V_CAAC_PROCESS := NULL;
  END;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END SP_MENSAGEM14
---------------------------------------------------------------------------------------------------------------
--Objeto: BHS.SP_MENSAGEM14
--Criao: T2S - Data: 20/08/2013
--Objetivo: procedure de processamento da mensagem 14
--Sistema: HOST
--Alteração: Hugo Gomes - Data: 15/04/2014
--Motivo da alteração: implementao das regras de atualização do posicionamento, quando repesagem
--Alteração: Hugo Gomes - Data: 16/04/2014
--Motivo da alteração: atualizao dos usuários de posicionado e finalizado no posicionamento, quando repesagem
--Alteração: Alexandre Alves - Data: 11/05/2015
--Motivo da alteração: Contemplar exclusção de IMO e temperatura de acordo com correções realizadas no serviço da mensagem.
--Alteração: Mariana Alves - Data: 23/11/2015
--Motivo da alteração: Adição de tratamento para casos de transbordo 
--Alteração: Mariana Alves - Data: 03/12/2015
--Motivo da alteração: Adio do parâmetro CARG ID e disparo do log de pesagem
--Alteração: Leonardo Batistela - Data: 05/01/2016
--Motivo da alteração: Remoção do bloco responsável por atualizar a categoria da mercadoria, que passar a ser realizado pela Mensagem 17
--Alteração: Mariana Alves - Data: 18/01/2016
--Motivo da alteração: Alteração da regra de troca de viagem, prevendo rollover para TRANB e EXP e troca para todas as outras modalidades
--Alteração: Mariana Alves - Data: 16/02/2016
--Motivo da alteração: Adição de regra para reprocessar mensagem 17 com erro "Mercadoria no encontrada", para os casos de troca de categoria e navio/viagem
--Alteração: Mariana Alves - Data: 16/02/2016
--Motivo da alteração: Tratamento de exception na regra para reprocessar mensagem 17 com erro "Mercadoria no encontrada"
--Alteração: Mariana Alves - Data: 28/04/2016
--Motivo da alteração: Retirada regra que restringia deletar todos os excessos de um contêiner, Inserida regra para deletar IMOs do BHS que foram deletados no TOPO 
--Alteração: Mariana Alves - Data: 29/04/2016
--Motivo da alteração: Inserida regra para deletar registro de excesso, ao invs de apenas atualizar todos os campos para "null". Correo para os casos sem excesso.
--Alteração: Mariana Alves e Vanessa Freitas - Data: 03/05/2016
--Motivo da alteração: Tratamento para no reprocessar mensagem 17 vinda do TOPX
--Alteração: Mariana Alves - Data: 20/05/2016
--Motivo da alteração: Adicionando condição para deletar IMOS para casos que não sejam IMPORTAÇÃO ou CABO.
--Alteração: Diego Mendoza (T2S) - Data: 15/07/2016
--Motivo da alteração: Atualização do apontamento e evento do schema BILLING ao gravar rollover caso haja posicionamento.
--Alteração: Ítalo Petrucio - Data: 25/07/2016
--Motivo da alteração: Correção na exclusão de IMO por Mercadoria.
--Alteração: Mariana Alves - Data: 07/12/2016 
--Motivo da alteração: INCLUIR CAMPOS POL, FPOD, POD, LLPOD
--Alteração: Diego Mendoza (T2S) - Data: 08/08/2017
--Motivo da alteração: Apagada a flag MERC_STATUS_SISCARGA quando houver troca de viagem
--Alteração: Leonardo Batistela (T2S) - Data: 19/09/2017
--Motivo da alteração: Criar/atualizar solicitação de rolagem e adicionada linha do erro no RAISE.
--Alteração: Leonardo Batistela (T2S) - Data: 20/03/2018
--Motivo da alteração: Ajustes nas condições do insert na BHS.ROLLOVER_NAVIO para gravar mesmo se a viagem exp antiga for nula.
--Alteração: Manoel Fernando - Data: 12/08/2019
--Motivo da alteração: Colocando validação na alteração de viagem para contâineres com solicitação vermas.
---------------------------------------------------------------------------------------------------------------
;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_MENSAGEM20" (
    P_MERC_ID                  IN BHS.MERCADORIA.MERC_ID%TYPE,
    P_EQUIPAMENTO              IN BHS.EQUIPAMENTO.EQUIP_ID%TYPE,
    P_USUARIO                  IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
    P_AGEN_ID                  IN TAS.AGENDAMENTO.AGEN_ID%TYPE,
    P_ATVI_DTHR_INI            IN VARCHAR2,
    P_ATVI_DTHR_FIM            IN VARCHAR2,
    P_VEIC_ID                  IN TAS.VEICULO.VEIC_ID%TYPE,
    P_AMTR_ID                  IN AMR_TRANSPORTE_MERCADORIA.AMTR_ID%TYPE,
    P_AMTR_DT_SAIDA            IN VARCHAR2,
    P_AMTR_PESO_OUT            IN AMR_TRANSPORTE_MERCADORIA.AMTR_PESO_OUT%TYPE,
    P_LIMPAR_MERC_AGEN         IN NUMBER, /*Flag para definir se será necessário desassociar a mercadoria do agendamento*/
    P_CRIAR_BLOQ_DOCUMENTAL IN NUMBER
  )
IS
  V_ATVI_ID BHS.ATIVIDADE.ATVI_ID%TYPE;
  V_MERC_ID BHS.MERCADORIA.MERC_ID%TYPE;
  V_MERC_ID_AGENDAMENTO BHS.MERCADORIA.MERC_ID%TYPE; --Variável criada para buscar o MERC_ID a partir do AGENDAMENTO, caso P_MERC_ID = 0
  V_TRA_ID_ORIGEM BHS.MERCADORIA.MERC_TRA_ID_ORIGEM%TYPE;
  V_MERC_PESO_BRUTO BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE;
  V_PESO_IN BHS.AMR_TRANSPORTE_MERCADORIA.AMTR_PESO_IN%TYPE;
  V_PESO_OUT BHS.AMR_TRANSPORTE_MERCADORIA.AMTR_PESO_OUT%TYPE;
  V_FEL BHS.MERCADORIA.MERC_CH_VZ%TYPE;
  V_CTCA BHS.MERCADORIA.MERC_CTCA_ID%TYPE;
  V_LIMPAR_MERC_AGEN NUMBER;
  V_CATEGORIA BHS.CATEGORIA_CARGA.CTCA_COD_TOS%TYPE;
  V_TRA_DEST BHS.TRA.TRA_TOS%TYPE;
  V_TRA_ORIG BHS.TRA.TRA_TOS%TYPE;
  V_PESO_BRUTO_NOVO BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE;
  V_PESO_LIQUIDO_NOVO BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE;
  V_PESO_BRUTO_MANIF BHS.MERCADORIA.MERC_PESO_BRUTO_MANIF%TYPE;
  V_PESO_LIQUIDO_MANIF BHS.MERCADORIA.MERC_PESO_LIQUIDO_MANIF%TYPE;
  V_TARA_MANIF BHS.MERCADORIA.MERC_TARA_MANIF%TYPE;
  V_FLAG_TELA NUMBER;
  V_CATEGORIA_AGENDAMENTO TAS.CATEGORIA.CATE_CONSTANTE%TYPE;
  V_TOTAL NUMBER;
  
  /******************************************************************************
  --Objeto: MENSAGEM20
  --Criação: T2S - 16/08/2013
  --Objetivo: SAÍDA DE CONTAINERS DO GATE ( GATE OUT )
  --Sistema: INTEGRADOR HOST-TOS
  --Alteração: Leonardo Batistela - Data: 17/07/2014
  --Motivo da alteração: adicionada a correção do agendamento e mercadoria do TAS, em caso de categoria TRA_DIR com desistência da transportadora.
  --Alteração: Leonardo (T2S) - Data: 09/09/2014
  --Motivo da alteração: adicionada a gravação automática do peso de contêineres de remoção externa.
  --Alteração: Leonardo (T2S) - Data: 19/09/2014
  --Motivo da alteração: retirada a condição que evitava a sobrescrita do peso, nos casos de remoção externa.
  --Motivo da alteração: Inclusão da regra de pesagem da mercadoria e disparo da mensagem 24.
  --Alteração: T2S - 13/10/2015
  --Alteração: T2S - 23/10/2015
  --Motivo da Alteração: Alterar atualização da tabela AMR_TRANSPORTE_MERCADORIA para registrar IP do Gate onde foi realizada a pesagem.
  --Alteração: Mariana Alves - 19/11/2015
  --Motivo da Alteração: Adição de regra para casos de DESISTÊNCIA DE EXPORTAÇÃO
  --Alteração: Mariana Alves - 23/11/2015
  --Motivo da Alteração: Correção da condição de pesos negativos/zerados para contêineres TRA
  --Alteração: Mariana Alves - 21/12/2015
  --Motivo da Alteração: Correção de casos em que peso do gate dá negativo e não houve repesagem na balança TOLEDO
  --Alteração: Allan Motroni - 14/09/2016
  --Motivo da Alteração: Verificação de cancelamento de entrada no Gate para não cair na validação de peso
  --Alteração: Diego (T2S) - 27/12/2016
  --Motivo da Alteração: Adicionada regra para baixa de lacre BTP para contêineres cheios na saída da carreta sem mercadoria
  --Alteração: Diego (T2S) - 24/01/2017
  --Motivo da Alteração: Adicionado parâmetro P_CRIAR_BLOQ_DOCUMENTAL para criação de bloqueio documental
  ******************************************************************************/
BEGIN
  V_MERC_ID_AGENDAMENTO := P_MERC_ID;
  
  -- Atualizando o peso, operador do gate e a data de saída da mercadoria pelo gate
  UPDATE BHS.AMR_TRANSPORTE_MERCADORIA
  SET AMTR_DT_SAIDA      = TO_DATE(P_AMTR_DT_SAIDA, 'DD/MM/YYYY HH24:MI:SS'),
    AMTR_PESO_OUT        = P_AMTR_PESO_OUT,
    AMTR_USR_OUT         = P_USUARIO,
    AMTR_TICKET_PESO_OUT = (EXTRACT(YEAR FROM TO_DATE(P_ATVI_DTHR_FIM, 'DD/MM/YYYY HH24:MI:SS'))
    || LPAD(BHS.SQ_TICKET_PESAGEM.NEXTVAL, 6, '0')),
    AMTR_GATE_IP_PESO_OUT =
    (SELECT GATE_IP
    FROM
      (SELECT GATE_IP
      FROM GATE.BALANCA_HISTORICO BAHI
      INNER JOIN GATE.GATE GT
      ON GT.GATE_ID      = BAHI.GATE_ID
      WHERE AGEN_ID      = P_AGEN_ID
      AND GT.GATE_IN_OUT = 'OUT'
      ORDER BY BAHI.BAHI_DT_INICIO DESC
      )
    WHERE ROWNUM <=1
    )
  WHERE AMTR_ID = P_AMTR_ID;
  
  SELECT NVL(MAX(SEQ_NO),1)
  INTO V_FLAG_TELA
  FROM TOPS.THALT t
  WHERE T.VISIT_CODE=TO_CHAR(P_AGEN_ID)
  AND mess_id       =20
  AND SOURCE_ID     ='T21';
  -- Se a flag estiver marcada, desassocia a mercadoria do TAS com a do BHS, e também desassocia a mercadoria do agendamento
  IF P_LIMPAR_MERC_AGEN = 1 THEN
    SELECT NVL(MAX(MERC_ID),2)
    INTO V_LIMPAR_MERC_AGEN
    FROM TAS.AGENDAMENTO
    WHERE AGEN_ID        = P_AGEN_ID;
    IF V_LIMPAR_MERC_AGEN>2 THEN
      --Desassociando a mercadoria do TAS com a do BHS
      UPDATE TAS.MERCADORIA
      SET MERC_ID_BHS = NULL
      WHERE MERC_ID   =
        (SELECT MERC_ID FROM TAS.AGENDAMENTO WHERE AGEN_ID = P_AGEN_ID
        );
      --Desassociando a mercadoria do agendamento
      UPDATE TAS.AGENDAMENTO
      SET MERC_ID   = NULL
      WHERE AGEN_ID = P_AGEN_ID;
    END IF;
  END IF;
  -- Se a mercadoria foi enviada, então altere o seu status e grave uma atividade
  IF P_MERC_ID IS NOT NULL OR P_MERC_ID > 0 THEN
    -- Finalizar posicionamento(s) abertos.
    UPDATE TAS.POSICIONAMENTO
    SET POSI_DT_FINALIZADO   = TO_DATE (P_ATVI_DTHR_INI, 'DD/MM/YYYY HH24:MI:SS'),
      POSI_USUA_FINALIZACAO  = P_USUARIO
    WHERE POSI_MERC_ID_BHS   = P_MERC_ID
    AND POSI_DT_CANCELADO   IS NULL
    AND POSI_DT_POSICIONADO IS NOT NULL
    AND POSI_DT_FINALIZADO  IS NULL;
    --Gravando a atividade referente a este veículo
     BHS.SP_ATIVIDADE_MERCADORIA ('I', 'GOUT'
    /*Indica que o tipo das atividades serão sempre GATE OUT*/
     , 'MGATE',
    /*Indica que o Handling das atividades serão sempre MOVIMENTAÇÃO NO GATE */
      P_EQUIPAMENTO, 1,
    /*Indica que as atividades serão sempre ativas*/
      P_ATVI_DTHR_INI, P_ATVI_DTHR_FIM, NULL,
    /*Não há detalhes da localização*/
      P_MERC_ID, P_VEIC_ID, V_ATVI_ID);
      BHS.SP_ATIVIDADE_USUARIO (V_ATVI_ID, P_USUARIO, 'CS_OPER_GATE');
    --Atualizando o status da mercadoria para "S" (Saída do Terminal)
    UPDATE BHS.MERCADORIA
    SET MERC_STATUS = 'S'
    WHERE MERC_ID   = P_MERC_ID;
  
  --Se a mercadoria não foi enviada (MERC_ID = 0), verifica se é de remoção externa e se é necessário atualizar seu peso
  ELSE
    BEGIN
      --Busca a mercadoria do agendamento
      SELECT MERC_ID,
        MERC_TRA_ID_ORIGEM,
        MERC_PESO_BRUTO
      INTO V_MERC_ID_AGENDAMENTO,
        V_TRA_ID_ORIGEM,
        V_MERC_PESO_BRUTO
      FROM BHS.MERCADORIA
      INNER JOIN BHS.AMR_TRANSPORTE_MERCADORIA
      ON (AMTR_MERC_ID   = MERC_ID)
      WHERE AMTR_AGEN_ID = P_AGEN_ID;
    EXCEPTION
      WHEN OTHERS THEN
        V_MERC_ID_AGENDAMENTO := NULL;
        V_TRA_ID_ORIGEM       := NULL;
        V_MERC_PESO_BRUTO     := NULL;
    END;
     
    -- Verificar os lacres BTP (cntrs cheios) e realizar a baixa na tabela LACRE_ARMAZEM se necessário
    BEGIN
      FOR LACRES_BTP IN (
        SELECT
          ALAM_ID, ALAM_NUM_LACRE
        FROM BHS.AMR_LACRE_MERCADORIA
        INNER JOIN BHS.MERCADORIA ON (MERC_ID = ALAM_MERC_ID)
        WHERE MERC_ID = V_MERC_ID_AGENDAMENTO
          AND MERC_CH_VZ = 'F'
          AND LACR_INSPECIONADO = 1
          AND ALAM_TILA_ID = (SELECT TILA_ID FROM BHS.TIPO_LACRE WHERE TILA_TOS = 'BTP')
          AND UPPER(TRIM(ALAM_NUM_LACRE)) IN (
            SELECT LAAR_NUMERO FROM BHS.LACRE_ARMAZEM WHERE
              LAAR_ALAM_ID IS NULL
          )
      )
      LOOP
        UPDATE BHS.LACRE_ARMAZEM SET
          LAAR_LAAS_ID = (SELECT LAAS_ID FROM BHS.LACRE_ARMAZEM_STATUS WHERE LAAS_CONSTANTE = 'CS_BAIXA'),
          LAAR_ALAM_ID = LACRES_BTP.ALAM_ID,
          LAAR_DT_BAIXA = SYSDATE,
          LAAR_OBSERVACAO = 'Baixa realizada no gate out (mensagem 20)'
        WHERE LAAR_NUMERO = LACRES_BTP.ALAM_NUM_LACRE;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN NULL;
    END;
    
    IF (V_MERC_ID_AGENDAMENTO IS NOT NULL AND P_CRIAR_BLOQ_DOCUMENTAL = 1) THEN
      BHS.SP_BLOQUEIO_MERCADORIA('I', V_MERC_ID_AGENDAMENTO, 'CS_BLOQ_DCEN', TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS'), NULL, P_USUARIO, 1);
    END IF;
  END IF;
  
    --Busca dados para regra de peso da mercadoria.
    BEGIN
      SELECT CTCA_COD_TOS,
        DEST.TRA_TOS,
        ORIG.TRA_TOS,
        MERC_PESO_BRUTO_MANIF,
        MERC_PESO_LIQUIDO_MANIF,
        MERC_TARA_MANIF
      INTO V_CATEGORIA,
        V_TRA_DEST,
        V_TRA_ORIG,
        V_PESO_BRUTO_MANIF,
        V_PESO_LIQUIDO_MANIF,
        V_TARA_MANIF
      FROM BHS.MERCADORIA
      INNER JOIN BHS.CATEGORIA_CARGA ON(MERC_CTCA_ID = CTCA_ID)
      LEFT  JOIN BHS.TRA DEST ON(MERC_TRA_ID = DEST.TRA_ID)
      LEFT  JOIN BHS.TRA ORIG ON(MERC_TRA_ID_ORIGEM = ORIG.TRA_ID)
      WHERE MERC_ID         = V_MERC_ID_AGENDAMENTO;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      V_MERC_ID_AGENDAMENTO := NULL;
    END;
    --Verifica se a tela é T21 e ID da mercadoria está preenchido. Caso não esteja preenchido, não fazer consistência de pesagem.
    IF V_FLAG_TELA        >1 
    AND (V_MERC_ID_AGENDAMENTO IS NOT NULL OR V_MERC_ID_AGENDAMENTO > 0) 
    THEN
      --Atualiza o peso da mercadoria, se ela for de remoção externa ou Importação TRA (TRA Direto)
      IF V_TRA_ID_ORIGEM IS NOT NULL OR (V_CATEGORIA = 'I' AND V_TRA_DEST != 'BTP' AND V_TRA_ORIG IS NULL) THEN
        SELECT AMTR_PESO_IN,
          AMTR_PESO_OUT
        INTO V_PESO_IN,
          V_PESO_OUT
        FROM BHS.AMR_TRANSPORTE_MERCADORIA
        WHERE AMTR_ID = P_AMTR_ID;
        --Verifica se existe peso IN e OUT.
        --Se existir calcula o peso: peso do Gate In - o peso do Gate Out.
        --IF V_PESO_IN           > 0 AND V_PESO_OUT > 0 THEN
          --Se Importação TRA, realiza cálculo do Gate OUT (Cheio) menos o Gate IN (Vazio)
          --Senão, realiza cálculo do Gate IN (Cheio) menos o Gate OUT (Vazio)
          IF V_CATEGORIA = 'I' AND V_TRA_DEST != 'BTP' AND V_TRA_ORIG IS NULL THEN
            V_PESO_BRUTO_NOVO   :=  V_PESO_OUT - V_PESO_IN;
            V_PESO_LIQUIDO_NOVO := (V_PESO_OUT - V_PESO_IN) - V_TARA_MANIF;
          ELSE
            V_PESO_BRUTO_NOVO   :=  V_PESO_IN - V_PESO_OUT;
            V_PESO_LIQUIDO_NOVO := (V_PESO_IN - V_PESO_OUT) - V_TARA_MANIF;
          END IF;
          
          --REMOÇÃO EXTERNA: Caso V_PESO_BRUTO_NOVO/V_PESO_LIQUIDO_NOVO der NEGATIVO ou ZERO, preencher campo com NULL para sinalizar necessidade de repesagem
          --Próxima mensagem 14 vai automaticamente preencher um novo peso
          IF V_PESO_BRUTO_NOVO <= 0 
          OR V_PESO_BRUTO_NOVO IS NULL
          OR V_PESO_LIQUIDO_NOVO <= 0 
          OR V_PESO_LIQUIDO_NOVO IS NULL
          THEN
           IF V_CATEGORIA = 'I' AND V_TRA_DEST != 'BTP' AND V_TRA_ORIG IS NULL THEN
              V_PESO_BRUTO_NOVO := V_PESO_BRUTO_MANIF;
              V_PESO_LIQUIDO_NOVO := V_PESO_LIQUIDO_MANIF;
            ELSE
              V_PESO_BRUTO_NOVO := NULL;
              V_PESO_LIQUIDO_NOVO := NULL;
            END IF;
          END IF;
        
        --ATUALIZAR PESO SOMENTE SE PESOS BRUTO/LÍQUIDO AFERIDOS NO GATE NÃO FOREM NULOS OU ZERADOS OU NEGATIVOS
        IF V_PESO_BRUTO_NOVO IS NOT NULL
          AND V_PESO_LIQUIDO_NOVO IS NOT NULL
          AND V_PESO_LIQUIDO_NOVO > 0 
          AND V_PESO_BRUTO_NOVO > 0 
        THEN
          --Atualiza o peso da mercadoria no BHS com os novos valores.
          UPDATE BHS.MERCADORIA
          SET MERC_PESO_BRUTO = V_PESO_BRUTO_NOVO,
            MERC_PESO_LIQUIDO = V_PESO_LIQUIDO_NOVO
          WHERE MERC_ID       = V_MERC_ID_AGENDAMENTO;
          --Chama a procedure SP_LOG_PESAGEM para logar a alteração do peso.
          --Envia a Mensagem 24 para atualizar o peso no TOPO através da procedure SP_MENSAGEM24_PRE.
          --Se caso importação TRA, não enviar Mensagem 24 (TopO não permite enviar mensagem 24 após saída do contêiner do terminal)
          IF (V_CATEGORIA = 'I' OR V_CATEGORIA = 'T') AND (V_TRA_DEST = 'BTP' OR V_TRA_DEST IS NULL) THEN
            SP_MENSAGEM24_PRE(V_MERC_ID_AGENDAMENTO, NULL, NULL, NULL, NULL, P_USUARIO);
          END IF;
          SP_LOG_PESAGEM(V_MERC_ID_AGENDAMENTO, 'MENSAGEM 20', NULL, V_PESO_BRUTO_NOVO, NULL, NULL, NULL, V_PESO_LIQUIDO_NOVO, NULL, NULL, NULL, V_TARA_MANIF, NULL, NULL, NULL, NULL, NULL, NULL, P_USUARIO, P_EQUIPAMENTO);
        END IF;
      END IF;
    END IF;
  
  -- Executando a confirmação de saída do GATE
  SP_AGENDAMENTO (P_AGEN_ID, 'OUT');
  --Recupera a mercadoria de exportação para atualização do peso no TOPO através da mensagem 24
  --Carla/Gabriel - 23/09
  /*SELECT NVL(MAX(MERC.MERC_ID),2)
    INTO V_MERC_ID
    FROM BHS.MERCADORIA MERC,
      TAS.MERCADORIA MERTAS,
      TAS.AGENDAMENTO AG
    WHERE MERC.MERC_ID    = MERTAS.MERC_ID_BHS
    AND AG.MERC_ID        = MERTAS.MERC_ID
    AND MERC.MERC_CTCA_ID = 4
    AND MERC.MERC_CH_VZ   ='F'
    AND AG.AGEN_ID        =P_AGEN_ID;*/

  BEGIN
    SELECT
    NVL(MAX(MERC.MERC_ID),2), C.CATE_CONSTANTE
    INTO  V_MERC_ID, V_CATEGORIA_AGENDAMENTO
    FROM BHS.MERCADORIA MERC
    INNER JOIN TAS.MERCADORIA MERTAS ON (MERC.MERC_ID    = MERTAS.MERC_ID_BHS)
    INNER JOIN TAS.AGENDAMENTO AG ON (AG.MERC_ID         = MERTAS.MERC_ID)
    INNER JOIN TAS.CATEGORIA_EFETIVA CE ON (CE.CAEF_ID = AG.CAEF_ID)
    INNER JOIN TAS.CATEGORIA_BASE CB ON (CB.CABA_ID = CE.CABA_ID)
    INNER JOIN TAS.CATEGORIA C ON (C.CATE_ID = CB.CATE_ID)
    WHERE 
        MERC.MERC_CTCA_ID = 4
    AND MERC.MERC_CH_VZ   = 'F'
    AND AG.AGEN_ID        = P_AGEN_ID
    GROUP BY C.CATE_CONSTANTE;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
      V_TARA_MANIF := NULL;
  END;

  IF V_MERC_ID          > 2 AND V_FLAG_TELA > 1 THEN
    --Se for DESISTÊNCIA DE EMBARQUE, não realizar cálculo
    IF V_CATEGORIA_AGENDAMENTO <> 'DES_EXP' THEN
      --Atualiza o peso da mercadoria, se ela for de exportação
      BEGIN
        SELECT MERC_TARA_MANIF
        INTO V_TARA_MANIF
        FROM BHS.MERCADORIA
        WHERE MERC_ID = V_MERC_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
        V_TARA_MANIF := NULL;
      END;
      
      SELECT AMTR_PESO_IN,
        AMTR_PESO_OUT
      INTO V_PESO_IN,
        V_PESO_OUT
      FROM BHS.AMR_TRANSPORTE_MERCADORIA
      WHERE AMTR_ID          = P_AMTR_ID;
  
        --Realiza cálculo do Gate IN (Cheio) menos o Gate OUT (Vazio)
        V_PESO_BRUTO_NOVO   :=  V_PESO_IN - V_PESO_OUT;
        V_PESO_LIQUIDO_NOVO := (V_PESO_IN - V_PESO_OUT) - V_TARA_MANIF;
        --Caso V_PESO_BRUTO_NOVO/V_PESO_LIQUIDO_NOVO der NEGATIVO ou ZERO, preencher campo com NULL para sinalizar necessidade de repesagem
        --Próxima mensagem 14 vai automaticamente preencher um novo peso
        IF V_PESO_BRUTO_NOVO <= 0 OR V_PESO_LIQUIDO_NOVO <= 0 THEN
          V_PESO_BRUTO_NOVO := NULL;
          V_PESO_LIQUIDO_NOVO := NULL;
        END IF;
      
      --
      SELECT 
        COUNT(*) INTO V_TOTAL 
      FROM tops.TRUCK T 
      INNER JOIN tops.TRK_TRANSACT TT ON T.TRK_KEY = TT.TRK_KEY 
      WHERE 
        TT.JOB_STS = 'Z' and trim(TT.VISIT_CODE) = TRIM(P_AGEN_ID);
      
      --ATUALIZAR PESO SOMENTE SE PESOS BRUTO/LÍQUIDO AFERIDOS NO GATE NÃO FOREM NULOS OU ZERADOS OU NEGATIVOS OU NÃO FOR UMA ENTRADA CANCELADA NO GATE (V_TOTAL)
      IF V_PESO_BRUTO_NOVO IS NOT NULL AND V_PESO_LIQUIDO_NOVO IS NOT NULL AND V_PESO_BRUTO_NOVO > 0 AND V_PESO_LIQUIDO_NOVO > 0 AND V_TOTAL < 1 THEN
        UPDATE BHS.MERCADORIA
        SET MERC_PESO_BRUTO = V_PESO_BRUTO_NOVO,
          MERC_PESO_LIQUIDO = V_PESO_LIQUIDO_NOVO
        WHERE MERC_ID       = V_MERC_ID;
        BHS.SP_EXP_CHEIO_MSG24 (V_MERC_ID, P_USUARIO);
        SP_LOG_PESAGEM(V_MERC_ID, 'MENSAGEM 20', NULL, V_PESO_BRUTO_NOVO, NULL, NULL, NULL, V_PESO_LIQUIDO_NOVO, NULL, NULL, NULL, V_TARA_MANIF, NULL, NULL, NULL, NULL, NULL, NULL, P_USUARIO, P_EQUIPAMENTO);
      END IF;
    END IF;
  END IF;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);

END SP_MENSAGEM20;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_MENSAGEM24_POS" (
  P_MERC_ID                    IN BHS.MERCADORIA.MERC_ID%TYPE,
  P_RLNA_ESCA_ID_ANTES         IN BHS.ROLLOVER_NAVIO.RLNA_ESCA_ID_ANTES%TYPE,
  P_RLNA_ESCA_ID_DEPOIS        IN BHS.ROLLOVER_NAVIO.RLNA_ESCA_ID_DEPOIS%TYPE,
  --P_RLNA_LOPA_ID               IN BHS.ROLLOVER_NAVIO.RLNA_LOPA_ID%TYPE,
  P_RLNA_LINER                 IN ACCESSCONTROL.LOCAL_PARCEIRO.BTP_EMP_CONSTANTE%TYPE,
  P_TRCA_MERC_CTCA_ANTIGA      IN VARCHAR2,
  P_TRCA_MERC_CTCA_NOVA        IN VARCHAR2,
  P_USUA_ID_ALTERACAO          IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
  P_MORF_TEMP                  IN BHS.MONITORAMENTO_REFER.MORF_TEMP%TYPE,
  P_MORF_DT_INICIO             IN VARCHAR2,
  P_MORF_DT_FINAL              IN VARCHAR2,
  P_BLOQ_CONF_LACRE            IN NUMBER DEFAULT NULL /* Flag que indica se o bloqueio Conferencia Lacre será criado */
) IS
  V_MPRO_ID                     BHS.MENSAGENS_A_PROCESSAR.MPRO_ID%TYPE;
  V_LOPA_ID                     ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
  V_MERC_STATUS                 BHS.MERCADORIA.MERC_STATUS%TYPE;
  V_CTCA_CONSTANTE              BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE;
  V_MERC_CH_VZ                  BHS.MERCADORIA.MERC_CH_VZ%TYPE;
  V_MERC_BOOKING_SAIDA          BHS.MERCADORIA.MERC_BOOKING_SAIDA%TYPE;
  V_CONTEINER                   BHS.VW_MERCADORIA.CONTEINER%TYPE;
  V_VIAGEM_IMP                  BHS.VW_MERCADORIA.VIAGEM_IMP%TYPE;
/******************************************************************************
--Criação: T2S - 06/09/2013
--Objetivo: GRAVAR ROLLOVER NO NAVIO, TROCA DE CATEGORIA E/OU UM MONITORAMENTO REFER
--Sistema: INTEGRADOR HOST-TOS
--Alteração: - Allan Motroni - 28/07/2015
--Motivo da alteração: - Não executar caso status da mercadoria seja 'S' (saída)
--Alteração: Diego Mendoza - 08/04/2016
--Motivo da alteração: Atualização do campo TOPS_ITEM.BOOK_NO para casos de transbordo de contêineres vazios
--Alteração: Allan Motroni 17/05/2017
--Motivo da alteração: Adicionado o parâmetro P_BLOQ_CONF_LACRE
******************************************************************************/
BEGIN
  --Busca o ID do armador
  SELECT LOPA_ID INTO V_LOPA_ID
  FROM ACCESSCONTROL.LOCAL_PARCEIRO
  WHERE BTP_EMP_CONSTANTE = P_RLNA_LINER
  AND ROWNUM = 1;

  SELECT
    MERC_STATUS,
    CAT.CTCA_CONSTANTE,
    MERC_CH_VZ,
    MERC_BOOKING_SAIDA
  INTO
    V_MERC_STATUS,
    V_CTCA_CONSTANTE,
    V_MERC_CH_VZ,
    V_MERC_BOOKING_SAIDA
  FROM BHS.MERCADORIA
  INNER JOIN BHS.CATEGORIA_CARGA CAT ON (CAT.CTCA_ID = MERC_CTCA_ID)
  WHERE MERC_ID = P_MERC_ID;
  
  BEGIN
    IF (V_MERC_CH_VZ = 'E') THEN
      SELECT
        CONTEINER,
        VIAGEM_IMP
      INTO
        V_CONTEINER,
        V_VIAGEM_IMP
      FROM BHS.VW_MERCADORIA
      WHERE MERC_ID = P_MERC_ID;
      
      IF (V_CTCA_CONSTANTE = 'CS_TRANS' OR V_CTCA_CONSTANTE = 'CS_IMPO') THEN
        UPDATE TOPS.ITEM
        SET BOOK_NO = (CASE WHEN V_CTCA_CONSTANTE = 'CS_TRANS' THEN RPAD(V_MERC_BOOKING_SAIDA, 20, ' ') ELSE ' ' END)
        WHERE TRIM(ITEM_NO) = V_CONTEINER AND
        TRIM(ARR_CAR) = V_VIAGEM_IMP;
      END IF;
    END IF;
    
    EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

IF(V_MERC_STATUS != 'S') THEN
  --Grava um rollover no navio referente a esta mercadoria
  IF (
    P_RLNA_ESCA_ID_DEPOIS IS NOT NULL AND
    --P_RLNA_LOPA_ID IS NOT NULL AND
    V_LOPA_ID IS NOT NULL AND
    (P_RLNA_ESCA_ID_ANTES != P_RLNA_ESCA_ID_DEPOIS)
  ) THEN
    BHS.SP_ROLLOVER_NAVIO(
      P_MERC_ID,
      P_RLNA_ESCA_ID_ANTES,
      P_RLNA_ESCA_ID_DEPOIS,
      --P_RLNA_LOPA_ID
      V_LOPA_ID
    );
  END IF;
  
  --Registra troca de categoria
  IF (
    P_TRCA_MERC_CTCA_ANTIGA IS NOT NULL AND
    P_TRCA_MERC_CTCA_NOVA IS NOT NULL AND
    P_TRCA_MERC_CTCA_ANTIGA != P_TRCA_MERC_CTCA_NOVA
  ) THEN
    BHS.SP_TROCA_CATEGORIA (
      P_TRCA_MERC_CTCA_ANTIGA,
      P_MERC_ID,
      P_USUA_ID_ALTERACAO
    );
  END IF;
  
  --Grava uma mudança de temperatura
  IF (
    P_MORF_TEMP IS NOT NULL AND
    P_MORF_DT_INICIO IS NOT NULL AND
    P_MORF_DT_FINAL IS NOT NULL
  ) THEN
    INSERT INTO BHS.MONITORAMENTO_REFER (
      MORF_ID,
      MORF_TEMP,
      MORF_DT_INICIO,
      MORF_DT_FINAL,
      MORF_MERC_ID
    ) VALUES (
      BHS.SQ_MONITORAMENTO_REFER.nextval,
      P_MORF_TEMP,
      TO_DATE(P_MORF_DT_INICIO, 'DD/MM/YYYY HH24:MI:SS'),
      TO_DATE(P_MORF_DT_FINAL, 'DD/MM/YYYY HH24:MI:SS'),
      P_MERC_ID
    );
  END IF;
  
  --Atualiza o status da mensagem a processar para 1
  UPDATE MENSAGENS_A_PROCESSAR SET MPRO_STATUS_PROCESSADO = 1
  WHERE MPRO_STATUS_PROCESSADO = 0
    AND MPRO_ID IN
    (
      SELECT M.MPRO_ID
      FROM MENSAGENS_A_PROCESSAR_FILTRO MF
      INNER JOIN MENSAGENS_A_PROCESSAR M ON (M.MPRO_ID = MF.MPRF_MPRO_ID)
      WHERE MF.MPRF_FILTRO = 'MERC_ID' AND M.MPRO_MESS_ID = 24 AND MF.MPRF_VALOR_FILTRO = TO_CHAR(P_MERC_ID)
    );
    
  IF P_BLOQ_CONF_LACRE IS NOT NULL AND P_BLOQ_CONF_LACRE = 1 THEN
      SP_BLOQUEIO_MERCADORIA ('I', P_MERC_ID, 'CS_CONFERENCIA_LACRE', TO_CHAR (SYSDATE, 'DD/MM/YYYY HH24:MI:SS'), NULL, P_USUA_ID_ALTERACAO, 1);
  END IF;
    
END IF;
END SP_MENSAGEM24_POS;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_MENSAGEM24_PRE" (
 P_MERC_ID                   IN BHS.MERCADORIA.MERC_ID%TYPE,
 P_CONT_NUMERO_ANTIGO        IN BHS.CONTEINER.CONT_NUMERO%TYPE,
 P_MERC_CTCA_ID_ANTIGA       IN BHS.MERCADORIA.MERC_CTCA_ID%TYPE,
 P_MERC_ESCA_ID_EXP_ANTIGA   IN BHS.MERCADORIA.MERC_ESCA_ID_EXP%TYPE,
 P_MERC_ESCA_ID_IMP_ANTIGA   IN BHS.MERCADORIA.MERC_ESCA_ID_IMP%TYPE,
 P_USUA_ID_ALTERACAO         IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
 P_DELIVERY_PLACE            VARCHAR2 DEFAULT NULL,
 P_MERC_REPESAGEM            NUMBER DEFAULT NULL,
 P_ENVIAR_LACRES             NUMBER DEFAULT NULL,
 P_SPECIAL_HANDLING          VARCHAR2 DEFAULT NULL)
IS
 V_MPRO_ID                   BHS.MENSAGENS_A_PROCESSAR.MPRO_ID%TYPE;

 --Atributos do segmento DCTR
 V_BOOK_ID                   BHS.BOOKING.BOOK_ID%TYPE := NULL;
 V_ISOC_ID                   BHS.ISOCODE.ISOC_ID%TYPE := NULL;
 V_MERC_PESO_LIQUIDO         BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE := NULL;
 V_MERC_PESO_BRUTO           BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE := NULL;
 V_CONT_TARA                 BHS.CONTEINER.CONT_TARA%TYPE := NULL;
 V_MERC_CH_VZ                BHS.MERCADORIA.MERC_CH_VZ%TYPE := NULL;
 V_CTCA_ID                   BHS.CATEGORIA_CARGA.CTCA_COD_TOS%TYPE := NULL;
 V_PORT_ID_POL               BHS.PORTO.PORT_ID%TYPE;
 V_PORT_ID_POD               BHS.PORTO.PORT_ID%TYPE;
 V_PORT_ID_FPOD              BHS.PORTO.PORT_ID%TYPE;
 V_PORT_ID_LLPOD             BHS.PORTO.PORT_ID%TYPE;
 V_MERC_STATUS              BHS.MERCADORIA.MERC_STATUS%TYPE;
 
 V_LINER                     ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
 V_MERC_CATEGORIA            BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE;
 V_BUDL_CNTR_SLAVE1          BHS.BUNDLE.BUDL_CNTR_SLAVE1%TYPE;
 V_BUDL_CNTR_SLAVE2          BHS.BUNDLE.BUDL_CNTR_SLAVE2%TYPE;
 V_BUDL_CNTR_SLAVE3          BHS.BUNDLE.BUDL_CNTR_SLAVE3%TYPE;
 V_BUDL_CNTR_SLAVE4          BHS.BUNDLE.BUDL_CNTR_SLAVE4%TYPE;
 V_BUDL_CNTR_SLAVE5          BHS.BUNDLE.BUDL_CNTR_SLAVE5%TYPE;
 V_BUDL_CNTR_SLAVE6          BHS.BUNDLE.BUDL_CNTR_SLAVE6%TYPE;
 V_BUDL_CNTR_SLAVE7          BHS.BUNDLE.BUDL_CNTR_SLAVE7%TYPE;
  
 --Atributos do segmento CLIE
 V_CLIENTE_ID                ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;

 --Atributos do segmento TEMP
 V_MERC_TEMPERATURA          BHS.MERCADORIA.MERC_TEMPERATURA%TYPE;
 V_MERC_VENTILACAO           BHS.MERCADORIA.MERC_VENTILACAO%TYPE;
 V_MERC_CO2                  BHS.MERCADORIA.MERC_CO2%TYPE;
 V_MERC_UMIDADE              BHS.MERCADORIA.MERC_UMIDADE%TYPE;
 
 V_MERC_PESO_BRUTO_MANIF     BHS.MERCADORIA.MERC_PESO_BRUTO_MANIF%TYPE;
 V_MERC_PESO_LIQUIDO_MANIF   BHS.MERCADORIA.MERC_PESO_LIQUIDO_MANIF%TYPE;
 V_MERC_TARA_MANIF           BHS.MERCADORIA.MERC_TARA_MANIF%TYPE;
 
/******************************************************************************
--Criação: T2S - 16/09/2013
--Objetivo: CRIAR MENSAGEM A PROCESSAR QUANDO HOUVER ATUALIZAÇÕES DOS DADOS DE UMA MERCADORIA
--Sistema: INTEGRADOR HOST-TOS
--Alteração: - Paulo Cesar  16/10/2014
--Motivo da alteração: - Remover selecao campos de Peso Bruto, Peso Liquido e Tara do BHS quando a categoria carga for Exportacao
--Alteração: - Hugo Gomes - 02/12/2014
--Motivo da alteração: - Corrigida forma de obtenção de dados da mercadoria
--Alteração: - Leonardo (T2S) - 03/12/2014
--Motivo da alteração: - Retirado o novo parâmetro P_SPECIAL_HANDLE
--Alteração: - Leonardo (T2S) - 04/12/2014
--Motivo da alteração: - Correção da ordem dos pesos da mercadoria
--Alteração: T2S - 13/10/2015   
--Motivo da alteração: Comentada a regra de repesagem.
--Alteração: Mariana Alves - 12/11/2015   
--Motivo da alteração: Colocada condição para evitar que casos de exportação sejam processados por essa procedure.
--Alteração: Mariana Alves - 18/11/2015
--Motivo da alteração: Adição da regra caso peso bruto/líquido do BHS seja nulo, preencher TOPO com o peso bruto/líquido manifestado.
--Alteração: Diego Mendoza - 22/02/2016
--Motivo da alteração: Preenchimento da V_PORT_ID_FPOD com o FPOD da Mercadoria para casos de transbordo de vazios ou cancelamento
--Alteração: Mariana Alves - 12/04/2016
--Motivo da alteração: Correção do erro value is not numeric enviado pelo TOPO ao processar temperatura separada por vírgula. Exemplo: -1,4. A alteração substitui a vírgula por ponto.
--Alteração: Diego (T2S) - 04/08/2016
--Motivo da alteração: Adicionado o parâmetro P_ENVIAR_LACRES, preenchido pela procedure TAS.SP_SUBSTITUIR_LACRES_ABERTURA
--Alteração: Leonardo Batistela (T2S) - 30/11/2016
--Motivo da alteração: Agora o peso líquido manifestado será enviado no lugar do verificado somente quando o contêiner for cheio.
--Alteração: Mariana Alves - 07/12/2016
--Motivo da alteração: INCLUIR CAMPOS POL, FPOD, POD, LLPOD quando for remoção terra
--Alteração: Mariana Alves - 23/01/2016
--Motivo da alteração: Tratamento do peso bruto para contêineres vazios (preencher com a TARA caso o peso líquido for negativo ou nulo)
--Alteração: Allan Motroni - 03/02/2017
--Motivo da alteração: Novo parâmetro 'Special Handling' na procedure e ao gravar registros na tabela MENSAGENS_A_PROCESSAR_FILTRO
--Alteração: Italo Silva - 20/06/2017
--Motivo da alteração: Correção do tipo da variavelV_ISOC_ID 
******************************************************************************/
--------------------------------------------------------------------------
--OBJETO: BHS.SP_MENSAGEM24_PRE
--OBJETIVO: INSERIR ROTINA DE VERIFICACAO DE DELIVERY PLACE DE WG OK
--SISTEMA: BHS
--CRIAÇÃO: PAULO CÉSAR - DATA: <29052015>
--------------------------------------------------------------------------
BEGIN
 --Os demais atributos da mensagem são preenchidas em tempo de execução da view

 --Consultando dados básicos da mercadoria e de suas amarrações pertinentes à mensagem 24
 SELECT CTCA_CONSTANTE, MERC_CH_VZ, MERC_STATUS
   INTO V_MERC_CATEGORIA, V_MERC_CH_VZ, V_MERC_STATUS
   FROM BHS.MERCADORIA
   JOIN CATEGORIA_CARGA ON (CTCA_ID = MERC_CTCA_ID)
  WHERE MERC_ID = P_MERC_ID;

IF V_MERC_STATUS <> 'S' THEN

    --Evitando que casos de exportação sejam processados
    IF V_MERC_CATEGORIA <> 'CS_EXP' THEN

     IF V_MERC_CATEGORIA = 'CS_TRANS' THEN
       --Se transbordo, porto deve ser o LLPOD da tabela MERCADORIA
       SELECT
         MIN(D.DCO_BOOK_ID),
         MIN(MERC.MERC_PORT_ID_LLPOD),
         MIN(D.DCO_PORT_ID_POL),
         MIN(D.DCO_PORT_ID_FPOD),
         MIN(D.DCO_LOPA_ID)
       INTO
         V_BOOK_ID,
         V_PORT_ID_POD,
         V_PORT_ID_POL,
         V_PORT_ID_FPOD,
         V_CLIENTE_ID
       FROM DOCUMENTO D
       INNER JOIN AMR_DOCUMENTO_MERCADORIA DM ON (DM.AMDM_DCO_ID = D.DCO_ID)
       INNER JOIN MERCADORIA MERC ON (MERC.MERC_ID = DM.AMDM_MERC_ID)
       WHERE DM.AMDM_MERC_ID = P_MERC_ID;
     ELSIF V_MERC_CATEGORIA = 'CS_REMO_TERRA' THEN        
        --Se REMOÇÃO TERRA, porto deve ser da tabela MERCADORIA        
       SELECT        
         MERC.MERC_PORT_ID_POD,        
         MERC.MERC_PORT_ID_POL,        
         MERC.MERC_PORT_ID_FPOD,        
         MERC.MERC_PORT_ID_LLPOD        
       INTO        
         V_PORT_ID_POD,        
         V_PORT_ID_POL,        
         V_PORT_ID_FPOD,        
         V_PORT_ID_LLPOD        
       FROM MERCADORIA MERC        
       WHERE MERC.MERC_ID = P_MERC_ID;
     ELSE
       SELECT
         MIN(D.DCO_BOOK_ID),
         MIN(D.DCO_PORT_ID_POD),
         MIN(D.DCO_PORT_ID_POL),
         MIN(D.DCO_PORT_ID_FPOD),
         MIN(D.DCO_LOPA_ID)
       INTO
         V_BOOK_ID,
         V_PORT_ID_POD,
         V_PORT_ID_POL,
         V_PORT_ID_FPOD,
         V_CLIENTE_ID
       FROM DOCUMENTO D
       INNER JOIN AMR_DOCUMENTO_MERCADORIA DM ON (DM.AMDM_DCO_ID = D.DCO_ID)
       WHERE DM.AMDM_MERC_ID = P_MERC_ID;
     END IF;
     
     --Transbordo de vazio ou cancelamento de transbordo: enviar o FPOD da mercadoria na Mensagem 24 
     IF (V_MERC_CATEGORIA = 'CS_TRANS' OR V_MERC_CATEGORIA = 'CS_IMPO') AND V_MERC_CH_VZ = 'E' THEN
       SELECT MERC_PORT_ID_FPOD INTO V_PORT_ID_FPOD
       FROM MERCADORIA
       WHERE MERC_ID = P_MERC_ID;
     END IF;

     SELECT
     --Comentado pois sempre considerará o peso do BHS como correto
     --T2S
     --13/10/2015 
       --CASE WHEN P_DELIVERY_PLACE = 'WGOK' OR P_MERC_REPESAGEM = 1 THEN
       TO_NUMBER(M.MERC_PESO_BRUTO),
       --ELSE TO_NUMBER(IT.GROSS) * 1000 END GROSS_WEIGHT,
       --CASE WHEN P_DELIVERY_PLACE = 'WGOK' OR P_MERC_REPESAGEM = 1 THEN
       M.MERC_TARA_MANIF,
       --ELSE TO_NUMBER(IT.TARE) * 1000 END TARE,
       --CASE WHEN P_DELIVERY_PLACE = 'WGOK' OR P_MERC_REPESAGEM = 1 THEN
       M.MERC_PESO_LIQUIDO,
       --ELSE (TO_NUMBER(IT.GROSS) * 1000 - TO_NUMBER(IT.TARE) * 1000) END NET_WEIGHT,
       M.MERC_CH_VZ,
       NVL(M.MERC_LOPA_ARM_IMP, M.MERC_LOPA_ARM_EXP),
       M.MERC_CTCA_ID,
       M.MERC_CO2,
       M.MERC_VENTILACAO,
       REPLACE(M.MERC_TEMPERATURA,',','.'),
       M.MERC_UMIDADE,
       C.CONT_ISOC_ID,
       B.BUDL_CNTR_SLAVE1,
       B.BUDL_CNTR_SLAVE2,
       B.BUDL_CNTR_SLAVE3,
       B.BUDL_CNTR_SLAVE4,
       B.BUDL_CNTR_SLAVE5,
       B.BUDL_CNTR_SLAVE6,
       B.BUDL_CNTR_SLAVE7,
       M.MERC_PESO_BRUTO_MANIF,
       M.MERC_PESO_LIQUIDO_MANIF,
       M.MERC_TARA_MANIF
     INTO
       V_MERC_PESO_BRUTO,
       V_CONT_TARA,
       V_MERC_PESO_LIQUIDO,
       V_MERC_CH_VZ,
       V_LINER,
       V_CTCA_ID,
       V_MERC_CO2,
       V_MERC_VENTILACAO,
       V_MERC_TEMPERATURA,
       V_MERC_UMIDADE,
       V_ISOC_ID,
       V_BUDL_CNTR_SLAVE1,
       V_BUDL_CNTR_SLAVE2,
       V_BUDL_CNTR_SLAVE3,
       V_BUDL_CNTR_SLAVE4,
       V_BUDL_CNTR_SLAVE5,
       V_BUDL_CNTR_SLAVE6,
       V_BUDL_CNTR_SLAVE7,
       V_MERC_PESO_BRUTO_MANIF,
       V_MERC_PESO_LIQUIDO_MANIF,
       V_MERC_TARA_MANIF
     FROM BHS.MERCADORIA M
     INNER JOIN BHS.CONTEINER C ON (C.CONT_ID = M.MERC_CONT_ID)
     INNER JOIN BHS.ISOCODE I ON (I.ISOC_ID = C.CONT_ISOC_ID)
     LEFT OUTER JOIN BHS.ESCALA EI ON (EI.ESCA_ID = M.MERC_ESCA_ID_IMP)
     LEFT OUTER JOIN BHS.ESCALA EE ON (EE.ESCA_ID = M.MERC_ESCA_ID_EXP)
     LEFT OUTER JOIN TOPS.ITEM IT ON (TRIM(IT.ITEM_NO) = C.CONT_NUMERO AND ((TRIM(IT.ARR_CAR) = EI.ESCA_VIAGEM_TOS_IMP) OR (TRIM(IT.DEP_CAR) = EE.ESCA_VIAGEM_TOS_EXP)))
     LEFT OUTER JOIN BHS.BUNDLE B ON (B.BUDL_MERC_ID = M.MERC_ID)
     WHERE M.MERC_ID = P_MERC_ID;
      
     --Regra de Peso: 
     --Caso peso BRUTO verificado (BHS) seja NULO ou ZERADO, 
     --preencher TopO com peso bruto manifestado
     IF (V_MERC_PESO_BRUTO IS NULL OR V_MERC_PESO_BRUTO = 0) THEN
       V_MERC_PESO_BRUTO := V_MERC_PESO_BRUTO_MANIF;
     END IF;
     --Regra de Peso: 
     --Caso peso LÍQUIDO verificado (BHS) seja NULO ou ZERADO, 
     --preencher TopO com peso líquido manifestado
     IF (V_MERC_CH_VZ = 'F' AND (V_MERC_PESO_LIQUIDO IS NULL OR V_MERC_PESO_LIQUIDO = 0)) THEN
       V_MERC_PESO_LIQUIDO := V_MERC_PESO_LIQUIDO_MANIF;
     END IF;

     IF (V_MERC_CH_VZ = 'E' AND (V_MERC_PESO_LIQUIDO IS NULL OR V_MERC_PESO_LIQUIDO <= 0)) THEN
       V_MERC_PESO_BRUTO := V_MERC_TARA_MANIF;
       V_MERC_PESO_LIQUIDO := V_MERC_PESO_BRUTO - V_MERC_TARA_MANIF;   
     END IF;

     V_MPRO_ID := BHS.SQ_MENSAGENS_A_PROCESSAR.nextval;

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR (
       MPRO_ID,
       MPRO_MESS_ID
     ) VALUES (
       V_MPRO_ID,
       24
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_ID',
       P_MERC_ID
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'CONT_NUMERO_ANTIGO',
       P_CONT_NUMERO_ANTIGO
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_ESCA_ID_EXP',
       P_MERC_ESCA_ID_EXP_ANTIGA
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_ESCA_ID_IMP',
       P_MERC_ESCA_ID_IMP_ANTIGA
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_USUA_ID_ALTERACAO',
       P_USUA_ID_ALTERACAO
     );

     --Registrando informações para segmento DCTR
     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BOOK_ID',
       V_BOOK_ID
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'ISOC_ID',
       V_ISOC_ID
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_PESO_LIQUIDO',
       V_MERC_PESO_LIQUIDO
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_PESO_BRUTO',
       V_MERC_PESO_BRUTO
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'CONT_TARA',
       V_CONT_TARA
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_CH_VZ',
       V_MERC_CH_VZ
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'CTCA_ID',
       V_CTCA_ID
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'CTCA_ID_ANTIGA',
       P_MERC_CTCA_ID_ANTIGA
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'PORT_ID_POD',
       V_PORT_ID_POD
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'PORT_ID_POL',
       V_PORT_ID_POL
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'PORT_ID_FPOD',
       V_PORT_ID_FPOD
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'LINER',
       V_LINER
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE1',
       V_BUDL_CNTR_SLAVE1
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE2',
       V_BUDL_CNTR_SLAVE2
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE3',
       V_BUDL_CNTR_SLAVE3
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE4',
       V_BUDL_CNTR_SLAVE4
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE5',
       V_BUDL_CNTR_SLAVE5
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE6',
       V_BUDL_CNTR_SLAVE6
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'BUDL_CNTR_SLAVE7',
       V_BUDL_CNTR_SLAVE7
     );

     --Registrando informações para segmento CLIE
     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'CLIENTE_ID',
       V_CLIENTE_ID
     );

     --Registrando informações para segmento TEMP
     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_TEMPERATURA',
       V_MERC_TEMPERATURA
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_CO2',
       V_MERC_CO2
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_VENTILACAO',
       V_MERC_VENTILACAO
     );

     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'MERC_UMIDADE',
       V_MERC_UMIDADE
     );
     
     INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
       MPRF_ID,
       MPRF_MPRO_ID,
       MPRF_FILTRO,
       MPRF_VALOR_FILTRO
     ) VALUES (
       BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
       V_MPRO_ID,
       'DELIVERY_PLACE',
       P_DELIVERY_PLACE
     );
     
     IF (P_ENVIAR_LACRES = 1) THEN
        INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
         MPRF_ID,
         MPRF_MPRO_ID,
         MPRF_FILTRO,
         MPRF_VALOR_FILTRO
       ) VALUES (
         BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
         V_MPRO_ID,
         'ENVIAR_LACRES',
         P_ENVIAR_LACRES
       );
     END IF; 
      
        INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
         MPRF_ID,
         MPRF_MPRO_ID,
         MPRF_FILTRO,
         MPRF_VALOR_FILTRO
       ) VALUES (
         BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
         V_MPRO_ID,
         'SPECIAL_HANDLING',
         P_SPECIAL_HANDLING
       ); 
     
    END IF;
     
END IF;  
 
END SP_MENSAGEM24_PRE;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_MERCADORIA" (
   P_CONTAINER_VESSEL_IMP   IN BHS.ESCALA.ESCA_VIAGEM_TOS_IMP%TYPE,
   P_CONTAINER_VESSEL_EXP   IN BHS.ESCALA.ESCA_VIAGEM_TOS_EXP%TYPE,
   P_CONT_ID                IN BHS.CONTEINER.CONT_ID%TYPE,
   P_CATEGORIA_CARGA        IN BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE,
   P_TIPO_MERCADORIA        IN BHS.TIPO_MERCADORIA.TIME_CONSTANTE%TYPE,
   P_MERC_STATUS            IN BHS.MERCADORIA.MERC_STATUS%TYPE,
   P_MERC_POS_OUTBOUND      IN BHS.MERCADORIA.MERC_POS_OUTBOUND%TYPE,
   P_GROSS                  IN BHS.MERCADORIA.MERC_PESO_BRUTO_MANIF%TYPE,
   P_CARGO                  IN BHS.MERCADORIA.MERC_PESO_LIQUIDO_MANIF%TYPE,
   P_TARE                   IN BHS.MERCADORIA.MERC_TARA_MANIF%TYPE,
   P_MERC_ID                OUT BHS.MERCADORIA.MERC_ID%TYPE
) IS
   V_ESCA_ID_IMP            BHS.ESCALA.ESCA_ID%TYPE;
   V_ESCA_ID_EXP            BHS.ESCALA.ESCA_ID%TYPE;
   V_FEL                    TOPS.ITEM.FEL%TYPE;
   V_LINE_OPER              TOPS.ITEM.LINE_OPER%TYPE;
   V_ARM_ID                 ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
   V_RETORNO                BHS.MERCADORIA.MERC_ID%TYPE := 0;
   V_LOAD_PORT              TOPS.ITEM.LOAD_PORT%TYPE;
   V_DISCH_PORT             TOPS.ITEM.DISCH_PORT%TYPE;
   V_FDISCH_PORT            TOPS.ITEM.FDISCH_PORT%TYPE;
   V_LL_DISCH_PORT          TOPS.ITEM.LL_DISCH_PORT%TYPE;
   V_FROZEN_TEMP            TOPS.ITEM_REEFER.FROZEN_TEMP%TYPE;
   V_OOG_FRONT              TOPS.ITEM_OOG.OOG_FRONT%TYPE;
   V_OOG_LEFT               TOPS.ITEM_OOG.OOG_LEFT%TYPE;
   V_OOG_BACK               TOPS.ITEM_OOG.OOG_BACK%TYPE;
   V_OOG_RIGHT              TOPS.ITEM_OOG.OOG_RIGHT%TYPE;
   V_OOG_TOP                TOPS.ITEM_OOG.OOG_TOP%TYPE;
/******************************************************************************
   --Objeto: MERCADORIA
   --Criação: T2S - 01/08/2013
   --Objetivo: RECUPERAR O ID DE UMA MERCADORIA E TRATAR DE INSERÍ-LA, CASO ELA NÃO EXISTA
   --Sistema: INTEGRADOR HOST-TOS
   --Alteração: Hugo Gomes - Data: 16/04/2014 
   --Motivo da alteração: nas consultas às views RESTOW_CADASTRO e RESTOW_CTR, considerar a viagem do contêiner
   --Alteração: Mariana Alves - Data: 08/06/2016 
   --Motivo da alteração: considerando Pesos Bruto, Líquido e Tara na inserção da mercadoria do BHS
   --Alteração: Mariana Alves - Data: 07/12/2016 
   --Motivo da alteração: INCLUIR CAMPOS POL, FPOD, POD, LLPOD
   --Alteração: Mariana Alves - Data: 02/02/2017
   --Motivo da alteração: INCLUIR CAMPOS TEMPERATURA E EXCESSO
******************************************************************************/
BEGIN
    
    --Busca o ID da escala referente à viagem de importação
    IF TRIM(P_CONTAINER_VESSEL_IMP) IS NOT NULL THEN
      BEGIN
        SELECT
          ESCA_ID INTO V_ESCA_ID_IMP
        FROM BHS.ESCALA
        WHERE
          LOWER(TRIM(ESCA_VIAGEM_TOS_IMP)) = LOWER(TRIM(P_CONTAINER_VESSEL_IMP));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ESCA_ID_IMP := NULL;
      END;
    END IF;
    
    --Busca o ID da escala referente à viagem de exportação
    IF TRIM(P_CONTAINER_VESSEL_EXP) IS NOT NULL THEN
      BEGIN
        SELECT
          ESCA_ID INTO V_ESCA_ID_EXP
        FROM BHS.ESCALA
        WHERE
          LOWER(TRIM(ESCA_VIAGEM_TOS_EXP)) = LOWER(TRIM(P_CONTAINER_VESSEL_EXP));
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ESCA_ID_EXP := NULL;
      END;
    END IF;

    --Só cadastra a mercadoria se existir uma escala cadastrada, seja de exportação ou importação.
    IF V_ESCA_ID_IMP IS NOT NULL OR V_ESCA_ID_EXP IS NOT NULL THEN
        --Tenta recuperar o ID da mercadoria, com base na viagem e no número do contêiner
        BEGIN
          SELECT 
            M.MERC_ID INTO V_RETORNO
          FROM BHS.MERCADORIA M
          WHERE 
            M.MERC_CONT_ID = P_CONT_ID AND 
            (M.MERC_ESCA_ID_IMP = V_ESCA_ID_IMP OR M.MERC_ESCA_ID_EXP = V_ESCA_ID_EXP) AND
            M.MERC_DT_CANCEL IS NULL;
        EXCEPTION
          --Mercadoria não encontrada, então execute o bloco de código para a criação de nova mercadoria
          WHEN NO_DATA_FOUND THEN
            --Mercadoria não existe, então crie um ID para ela
            V_RETORNO := BHS.SQ_MERCADORIA.nextval;
            
            BEGIN
              SELECT 
                RC.FEL, 
                RC.LINE_OPER,  
                RC.LOAD_PORT,
                RC.DISCH_PORT,
                RC.FDISCH_PORT,
                RC.LL_DISCH_PORT,
                RC.FROZEN_TEMP,
                RC.OOG_FRONT, --FRONTAL
                RC.OOG_LEFT,  --LATERAL ESQ
                RC.OOG_BACK,  --TRASEIRO
                RC.OOG_RIGHT, --LATERAL DIR
                RC.OOG_TOP    --ALTURA
              INTO 
                V_FEL, 
                V_LINE_OPER,
                V_LOAD_PORT,
                V_DISCH_PORT,   
                V_FDISCH_PORT,  
                V_LL_DISCH_PORT,
                V_FROZEN_TEMP,
                V_OOG_FRONT,
                V_OOG_LEFT,
                V_OOG_BACK,
                V_OOG_RIGHT,
                V_OOG_TOP
              FROM TOPS.RESTOW_CADASTRO RC 
              INNER JOIN BHS.CONTEINER C ON (C.CONT_NUMERO = TRIM(RC.CTR_NO))
              WHERE C.CONT_ID = P_CONT_ID AND (TRIM(RC.TFC_CODE) = TRIM(P_CONTAINER_VESSEL_IMP) OR TRIM(RC.TFC_CODE) = TRIM(P_CONTAINER_VESSEL_EXP));
            EXCEPTION WHEN NO_DATA_FOUND THEN
              --Se houver falha de dados não encontrados para a consulta acima, tente, como última tentativa, verificar
              --na tabela RESTOW_CTR, pois pode ser um contêiner de RESTOW
              SELECT 
                RC.FEL, 
                RC.LINE_OPER,
                RC.LOAD_PORT,
                RC.DISCH_PORT,
                RC.FDISCH_PORT,
                RC.LL_DISCH_PORT,
                RC.FROZEN_TEMP,
                RC.OOG_FRONT, --FRONTAL
                RC.OOG_LEFT,  --LATERAL ESQ
                RC.OOG_BACK,  --TRASEIRO
                RC.OOG_RIGHT, --LATERAL DIR
                RC.OOG_TOP    --ALTURA
              INTO 
                V_FEL, 
                V_LINE_OPER,
                V_LOAD_PORT,
                V_DISCH_PORT,   
                V_FDISCH_PORT,  
                V_LL_DISCH_PORT,
                V_FROZEN_TEMP,
                V_OOG_FRONT,
                V_OOG_LEFT,
                V_OOG_BACK,
                V_OOG_RIGHT,
                V_OOG_TOP  
              FROM TOPS.RESTOW_CTR RC 
              INNER JOIN BHS.CONTEINER C ON (C.CONT_NUMERO = TRIM(RC.ITEM_NO))
              WHERE C.CONT_ID = P_CONT_ID AND (TRIM(RC.TFC_CODE) = TRIM(P_CONTAINER_VESSEL_IMP) OR TRIM(RC.TFC_CODE) = TRIM(P_CONTAINER_VESSEL_EXP));
            END;
            
            BEGIN
              SELECT LOPA_ID 
              INTO V_ARM_ID
              FROM ACCESSCONTROL.LOCAL_PARCEIRO
              WHERE TRIM(BTP_EMP_CONSTANTE) = TRIM(V_LINE_OPER);
            EXCEPTION
              WHEN OTHERS THEN
                V_ARM_ID := NULL;
            END;
            
            --Insere a mercadoria na tabela
            INSERT INTO BHS.MERCADORIA (
              MERC_ID,
              MERC_CTCA_ID,
              MERC_TIME_ID,
              MERC_CONT_ID,
              MERC_ESCA_ID_IMP,
              MERC_ESCA_ID_EXP,
              MERC_POS_OUTBOUND,
              MERC_STATUS,
              MERC_CH_VZ,
              MERC_LOPA_ARM_IMP,
              MERC_LOPA_ARM_EXP,
              MERC_PESO_BRUTO_MANIF,
              MERC_PESO_LIQUIDO_MANIF,
              MERC_TARA_MANIF,
              MERC_PESO_BRUTO,
              MERC_PESO_LIQUIDO,
              MERC_PORT_ID_POL,
              MERC_PORT_ID_POD,
              MERC_PORT_ID_FPOD,
              MERC_PORT_ID_LLPOD,
              MERC_TEMPERATURA
            ) VALUES (
              V_RETORNO,
              (SELECT CTCA_ID FROM BHS.CATEGORIA_CARGA WHERE CTCA_CONSTANTE = P_CATEGORIA_CARGA),
              (SELECT TIME_ID FROM BHS.TIPO_MERCADORIA WHERE TIME_CONSTANTE = P_TIPO_MERCADORIA),
              P_CONT_ID,
              V_ESCA_ID_IMP,
              V_ESCA_ID_EXP,
              P_MERC_POS_OUTBOUND,
              P_MERC_STATUS,
              V_FEL,
              V_ARM_ID,
              V_ARM_ID,
              P_GROSS,
              P_CARGO,
              P_TARE,
              P_GROSS,
              P_CARGO,
              (SELECT PORT_ID FROM BHS.PORTO WHERE PORT_PENTAGRAMA = V_LOAD_PORT),
              (SELECT PORT_ID FROM BHS.PORTO WHERE PORT_PENTAGRAMA = V_DISCH_PORT),
              (SELECT PORT_ID FROM BHS.PORTO WHERE PORT_PENTAGRAMA = V_FDISCH_PORT),  
              (SELECT PORT_ID FROM BHS.PORTO WHERE PORT_PENTAGRAMA = V_LL_DISCH_PORT),
              V_FROZEN_TEMP
            );

            --Se houver excesso no restow, inserir na tabela EXCESSO
            IF V_OOG_TOP <> 0 OR V_OOG_FRONT <> 0 OR V_OOG_RIGHT <> 0 OR V_OOG_LEFT  <> 0 OR V_OOG_BACK  <> 0  THEN
              BHS.SP_EXCESSO_MERCADORIA('I', V_RETORNO, V_OOG_TOP, V_OOG_FRONT, V_OOG_RIGHT, V_OOG_LEFT, V_OOG_BACK);
            END IF;
                
        END;
    END IF;
    P_MERC_ID := V_RETORNO;
        
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END SP_MERCADORIA;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_NAVIO" (
  P_NAVI_LLOYD               IN BHS.NAVIO.NAVI_LLOYD%TYPE,
  P_NAVI_ID                  OUT BHS.NAVIO.NAVI_ID%TYPE
) IS 
  V_RETORNO                  BHS.NAVIO.NAVI_ID%TYPE;
  /******************************************************************************
   --Objeto: NAVIO
   --Criação: T2S - 28/10/2013
   --Objetivo: RECUPERAR O ID DE UM NAVIO E TRATAR DE INSERÍ-L0, CASO ELE NÃO EXISTA
   --Sistema: INTEGRADOR HOST-TOS
   --Alteração: -
   --Motivo da alteração: -
   ******************************************************************************/
BEGIN
    --Tenta buscar o ID do navio
    SELECT 
       NAVI_ID INTO V_RETORNO
    FROM BHS.NAVIO
       WHERE LOWER(TRIM(NAVI_LLOYD)) = LOWER(TRIM(P_NAVI_LLOYD));
    
    P_NAVI_ID := V_RETORNO;
EXCEPTION
   --Se navio não existir, então tente criá-lo.
   WHEN NO_DATA_FOUND THEN
      --Crie um ID para ele...
      V_RETORNO := BHS.SQ_NAVIO.NEXTVAL;
       
      --... E faça o seu cadastro na tabela NAVIO
      INSERT INTO BHS.NAVIO (
         NAVI_ID, 
         NAVI_NOME, 
         NAVI_LLOYD
      ) VALUES (
         V_RETORNO,
         (SELECT MAX(VES_NAME) FROM TOPS.VESSELS WHERE (TRIM(LLOYDS_NO) = TRIM(P_NAVI_LLOYD))),
         P_NAVI_LLOYD
      );

      P_NAVI_ID := V_RETORNO;
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
END SP_NAVIO;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_TRANSF_BOOKING_MSG24" (
  P_MERC_ID                   IN BHS.MERCADORIA.MERC_ID%TYPE,
  P_USUA_ID_ALTERACAO         IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
  P_BOOK_ID                   IN BHS.BOOKING.BOOK_ID%TYPE DEFAULT NULL,
  P_IS_DESISTENCIA_EMBARQUE   IN NUMBER DEFAULT 0)
IS
  V_MPRO_ID                   BHS.MENSAGENS_A_PROCESSAR.MPRO_ID%TYPE;
  V_ISOC_ID                   BHS.ISOCODE.ISOC_ID%TYPE := NULL;
  V_MERC_PESO_LIQUIDO         BHS.MERCADORIA.MERC_PESO_LIQUIDO%TYPE := NULL;
  V_MERC_PESO_BRUTO           BHS.MERCADORIA.MERC_PESO_BRUTO%TYPE := NULL;
  V_MERC_ESCA_ID_EXP          BHS.MERCADORIA.MERC_ESCA_ID_EXP%TYPE;
  V_MERC_ESCA_ID_IMP          BHS.MERCADORIA.MERC_ESCA_ID_IMP%TYPE;
  V_CONT_TARA                 BHS.CONTEINER.CONT_TARA%TYPE := NULL;
  V_MERC_CH_VZ                BHS.MERCADORIA.MERC_CH_VZ%TYPE := NULL;
  V_CTCA_ID                   BHS.CATEGORIA_CARGA.CTCA_COD_TOS%TYPE := NULL;
  V_PORT_ID_POL               BHS.PORTO.PORT_ID%TYPE;
  V_PORT_ID_POD               BHS.PORTO.PORT_ID%TYPE;
  V_PORT_ID_FPOD              BHS.PORTO.PORT_ID%TYPE;
  V_LINER                     ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
  V_MERC_CATEGORIA            BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE;
  V_BUDL_CNTR_SLAVE1          BHS.BUNDLE.BUDL_CNTR_SLAVE1%TYPE;
  V_BUDL_CNTR_SLAVE2          BHS.BUNDLE.BUDL_CNTR_SLAVE2%TYPE;
  V_BUDL_CNTR_SLAVE3          BHS.BUNDLE.BUDL_CNTR_SLAVE3%TYPE;
  V_BUDL_CNTR_SLAVE4          BHS.BUNDLE.BUDL_CNTR_SLAVE4%TYPE;
  V_BUDL_CNTR_SLAVE5          BHS.BUNDLE.BUDL_CNTR_SLAVE5%TYPE;
  V_BUDL_CNTR_SLAVE6          BHS.BUNDLE.BUDL_CNTR_SLAVE6%TYPE;
  V_BUDL_CNTR_SLAVE7          BHS.BUNDLE.BUDL_CNTR_SLAVE7%TYPE;

  V_CLIENTE_ID                ACCESSCONTROL.LOCAL_PARCEIRO.LOPA_ID%TYPE;
  V_BOOK_CLIENTE_ID           BHS.BOOKING.BOOK_LOPA_ID_ARMADOR%TYPE;
   
  V_MERC_TEMPERATURA          BHS.MERCADORIA.MERC_TEMPERATURA%TYPE;
  V_MERC_VENTILACAO           BHS.MERCADORIA.MERC_VENTILACAO%TYPE;
  V_MERC_CO2                  BHS.MERCADORIA.MERC_CO2%TYPE;
  V_MERC_UMIDADE              BHS.MERCADORIA.MERC_UMIDADE%TYPE;
/******************************************************************************
--Criação: Diego T2S - 03/10/2016
--Objetivo: Gerar uma mensagem 24 para atualizar o TopO ao transferir contêineres de booking
--Sistema: INTEGRADOR HOST-TOS
--Alteração: 14/06/2018 Ítalo 
--Motivo da alteração: Ajuste do variavel V_ISOC_ID para o tipo correto = ISOC_ID
******************************************************************************/
BEGIN
  IF (P_BOOK_ID IS NOT NULL) THEN
    SELECT
      POL.PORT_ID AS POL,
      POD.PORT_ID AS POD,
      FPOD.PORT_ID AS FPOD,
      BOOK_LOPA_ID_ARMADOR
    INTO
      V_PORT_ID_POL,
      V_PORT_ID_POD,
      V_PORT_ID_FPOD,
      V_BOOK_CLIENTE_ID
    FROM BHS.BOOKING B
    INNER JOIN BHS.PORTO POL ON (POL.PORT_ID = B.BOOK_PORT_ID_POL)
    INNER JOIN BHS.PORTO POD ON (POD.PORT_ID = B.BOOK_PORT_ID_POD)
    INNER JOIN BHS.PORTO FPOD ON (FPOD.PORT_ID = B.BOOK_PORT_ID_FPOD)
    WHERE B.BOOK_ID = P_BOOK_ID
      AND B.BOOK_DTHR_CANCELAMENTO IS NULL;
  ELSIF (P_IS_DESISTENCIA_EMBARQUE <> 0) THEN
    SELECT MERC_LOPA_ARM_EXP INTO V_CLIENTE_ID FROM BHS.MERCADORIA WHERE MERC_ID = P_MERC_ID;
    SELECT PORT_ID INTO V_PORT_ID_POL FROM BHS.PORTO WHERE PORT_PENTAGRAMA = 'BRSSZ';
    SELECT PORT_ID INTO V_PORT_ID_POD FROM BHS.PORTO WHERE PORT_PENTAGRAMA = 'BRSSZ';
    V_PORT_ID_FPOD := V_PORT_ID_POD;  
  ELSE
    SELECT DISTINCT    
      D.DCO_PORT_ID_POD,
      D.DCO_PORT_ID_POL,
      D.DCO_PORT_ID_FPOD,
      D.DCO_LOPA_ID
    INTO
      V_PORT_ID_POD,
      V_PORT_ID_POL,
      V_PORT_ID_FPOD,
      V_CLIENTE_ID
    FROM BHS.DOCUMENTO D
    INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA DM ON (DM.AMDM_DCO_ID = D.DCO_ID)
    WHERE
       DM.AMDM_MERC_ID = P_MERC_ID  AND
        D.DCO_DT_CANCELAMENTO IS NULL AND (
          D.DCO_TICO_ID = (SELECT TICO_ID FROM BHS.TIPO_CONHECIMENTO WHERE TICO_DESCRICAO = 'BL') OR
          D.DCO_TICO_ID = (SELECT TICO_ID FROM BHS.TIPO_CONHECIMENTO WHERE TICO_DESCRICAO = 'MBL') OR
          D.DCO_TIDO_ID = (SELECT TIDO_ID FROM BHS.TIPO_DOCUMENTO WHERE TIDO_CONSTANTE = 'RC')
        );
  END IF;
  
  SELECT    
    TO_NUMBER(M.MERC_PESO_BRUTO) AS GROSS_WEIGHT,
    C.CONT_TARA AS TARE,    
    M.MERC_PESO_LIQUIDO AS NET_WEIGHT,
    M.MERC_CH_VZ,
    CASE WHEN P_BOOK_ID IS NOT NULL OR P_IS_DESISTENCIA_EMBARQUE <> 0
      THEN
        M.MERC_LOPA_ARM_EXP
      ELSE
        M.MERC_LOPA_ARM_IMP
      END,
    M.MERC_CTCA_ID,
    M.MERC_CO2,
    M.MERC_VENTILACAO,
    M.MERC_TEMPERATURA,
    M.MERC_UMIDADE,
    C.CONT_ISOC_ID,
    B.BUDL_CNTR_SLAVE1,
    B.BUDL_CNTR_SLAVE2,
    B.BUDL_CNTR_SLAVE3,
    B.BUDL_CNTR_SLAVE4,
    B.BUDL_CNTR_SLAVE5,
    B.BUDL_CNTR_SLAVE6,
    B.BUDL_CNTR_SLAVE7,
    M.MERC_ESCA_ID_EXP,
    M.MERC_ESCA_ID_IMP
  INTO
    V_MERC_PESO_BRUTO,
    V_CONT_TARA,
    V_MERC_PESO_LIQUIDO,
    V_MERC_CH_VZ,
    V_LINER,
    V_CTCA_ID,
    V_MERC_CO2,
    V_MERC_VENTILACAO,
    V_MERC_TEMPERATURA,
    V_MERC_UMIDADE,
    V_ISOC_ID,
    V_BUDL_CNTR_SLAVE1,
    V_BUDL_CNTR_SLAVE2,
    V_BUDL_CNTR_SLAVE3,
    V_BUDL_CNTR_SLAVE4,
    V_BUDL_CNTR_SLAVE5,
    V_BUDL_CNTR_SLAVE6,
    V_BUDL_CNTR_SLAVE7,
    V_MERC_ESCA_ID_EXP,
    V_MERC_ESCA_ID_IMP
  FROM BHS.MERCADORIA M
  INNER JOIN BHS.CONTEINER C ON (C.CONT_ID = M.MERC_CONT_ID)
  INNER JOIN BHS.ISOCODE I ON (I.ISOC_ID = C.CONT_ISOC_ID)
  LEFT OUTER JOIN BHS.ESCALA EI ON (EI.ESCA_ID = M.MERC_ESCA_ID_IMP)  
  LEFT OUTER JOIN TOPS.ITEM IT ON (TRIM(IT.ITEM_NO) = C.CONT_NUMERO AND ((TRIM(IT.ARR_CAR) = EI.ESCA_VIAGEM_TOS_IMP)))
  LEFT OUTER JOIN BHS.BUNDLE B ON (B.BUDL_MERC_ID = M.MERC_ID)
  WHERE M.MERC_ID = P_MERC_ID;

  V_MPRO_ID := BHS.SQ_MENSAGENS_A_PROCESSAR.nextval;
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR (
    MPRO_ID,
    MPRO_MESS_ID
  ) VALUES (
    V_MPRO_ID,
    24
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_ID',
    P_MERC_ID
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CONT_NUMERO_ANTIGO',
    NULL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_ESCA_ID_EXP',
    V_MERC_ESCA_ID_EXP
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_ESCA_ID_IMP',
    V_MERC_ESCA_ID_IMP
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_USUA_ID_ALTERACAO',
    P_USUA_ID_ALTERACAO
  );
 
  --Registrando informações para segmento DCTR
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BOOK_ID',
    P_BOOK_ID
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'ISOC_ID',
    V_ISOC_ID
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_PESO_LIQUIDO',
    V_MERC_PESO_LIQUIDO
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_PESO_BRUTO',
    V_MERC_PESO_BRUTO
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CONT_TARA',
    V_CONT_TARA
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_CH_VZ',
    V_MERC_CH_VZ
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CTCA_ID',
    V_CTCA_ID
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CTCA_ID_ANTIGA',
    NULL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'PORT_ID_POD',
    V_PORT_ID_POD
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'PORT_ID_POL',
    V_PORT_ID_POL
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'PORT_ID_FPOD',
    V_PORT_ID_FPOD
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'LINER',
    V_LINER
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE1',
    V_BUDL_CNTR_SLAVE1
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE2',
    V_BUDL_CNTR_SLAVE2
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE3',
    V_BUDL_CNTR_SLAVE3
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE4',
    V_BUDL_CNTR_SLAVE4
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE5',
    V_BUDL_CNTR_SLAVE5
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE6',
    V_BUDL_CNTR_SLAVE6
  );
 
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'BUDL_CNTR_SLAVE7',
    V_BUDL_CNTR_SLAVE7
  );
 
  --Registrando informações para segmento CLIE
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'CLIENTE_ID',
    NVL(V_CLIENTE_ID, V_BOOK_CLIENTE_ID)
  );
 
  --Registrando informações para segmento TEMP
  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_TEMPERATURA',
    V_MERC_TEMPERATURA
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_CO2',
    V_MERC_CO2
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_VENTILACAO',
    V_MERC_VENTILACAO
  );

  INSERT INTO BHS.MENSAGENS_A_PROCESSAR_FILTRO (
    MPRF_ID,
    MPRF_MPRO_ID,
    MPRF_FILTRO,
    MPRF_VALOR_FILTRO
  ) VALUES (
    BHS.SQ_MSGS_A_PROCESSAR_FILTRO.nextval,
    V_MPRO_ID,
    'MERC_UMIDADE',
    V_MERC_UMIDADE
  );
  
EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END SP_TRANSF_BOOKING_MSG24;

  CREATE OR REPLACE PROCEDURE "BHS"."SP_TRANSFERENCIA_BOOKING" (
  P_OPERACAO                  IN VARCHAR2, -- T = TRANSFERÊNCIA, D = DESISTÊNCIA
  P_MERC_ID                   IN BHS.MERCADORIA.MERC_ID%TYPE,
  P_CTCA_CONSTANTE_NOVA       IN BHS.CATEGORIA_CARGA.CTCA_CONSTANTE%TYPE,
  P_BOOK_ID_ORIGEM            IN BHS.BOOKING.BOOK_ID%TYPE,
  P_BOOK_ID_EMBARQUE          IN BHS.BOOKING.BOOK_ID%TYPE,
  P_ISO_ID                    IN BHS.ISOCODE.ISOC_ID%TYPE,
  P_USUARIO_ID                IN ACCESSCONTROL.USUARIO.USUA_ID%TYPE,
  P_IS_DESISTENCIA_EMBARQUE   IN NUMBER DEFAULT 0,
  P_DESFAZER_DESISTENCIA      IN NUMBER DEFAULT 0
)
IS
  V_CONT_ID                   BHS.MERCADORIA.MERC_CONT_ID%TYPE;
  V_BOOKING_NUMERO_EMBARQUE   BHS.BOOKING.BOOK_NUMERO_BOOKING%TYPE;
  V_ESCA_ID_EMBARQUE          BHS.BOOKING.BOOK_ESCA_ID%TYPE;
  V_ARMADOR_ID_EMBARQUE       BHS.BOOKING.BOOK_LOPA_ID_ARMADOR%TYPE;
  V_FPOD_ID_EMBARQUE          BHS.BOOKING.BOOK_PORT_ID_FPOD%TYPE;
  V_LLPOD_ID_EMBARQUE         BHS.PORTO.PORT_ID%TYPE;
  V_ATVI_ID                   BHS.ATIVIDADE.ATVI_ID%TYPE;
  V_VIAGEM_FICTICIA           BHS.ESCALA.ESCA_ID%TYPE;
  V_BOOK_KEY                  TOPS.BOOKINGS.BOOK_KEY%TYPE;
  V_CONT_NUMERO               BHS.CONTEINER.CONT_NUMERO%TYPE;
  V_NUMERO_VIAGEM_TOS         BHS.ESCALA.ESCA_VIAGEM_TOS_EXP%TYPE;
BEGIN
---------------------------------------------------------------------------------------------------------------
--Objeto: BHS.SP_TRANSFERENCIA_BOOKING
--Criação: Diego T2S - Data: 03/10/2016
--Objetivo: Realizar a transfêrencia de booking ou desistência para contêineres vazios
--Sistema: BHS
--Alteração: Diego T2S - Data: 25/10/2016
--Motivo da alteração: adicionados os parâmetros V_BOOK_KEY, V_CONT_NUMERO e V_NUMERO_VIAGEM_TOS. Alterada a data passada para a procedure SP_ATIVIDADE_MERCADORIA e adicionada a alteração do booking no TopO.
--Alteração: Diego T2S - Data: 26/10/2016
--Motivo da alteração: adicionada a função MIN na consulta pela BOOK_KEY no TopO.
--Alteração: Renan T2S - Data: 08/11/2016
--Motivo da alteração: Adicionado ao MERC_LOPA_ARM_IMP o mesmo armador de MERC_LOPA_ARM_EXP quando P_OPERACAO = 'D'
---------------------------------------------------------------------------------------------------------------
SELECT
  M.MERC_CONT_ID,
  C.CONT_NUMERO
INTO
  V_CONT_ID,
  V_CONT_NUMERO
FROM BHS.MERCADORIA M
INNER JOIN BHS.CONTEINER C ON (C.CONT_ID = MERC_CONT_ID)
WHERE M.MERC_ID = P_MERC_ID
  AND M.MERC_DT_CANCEL IS NULL;


IF (P_OPERACAO = 'T') THEN
  SELECT
    B.BOOK_NUMERO_BOOKING,
    B.BOOK_ESCA_ID,
    ESCA.ESCA_VIAGEM_TOS_EXP,
    B.BOOK_LOPA_ID_ARMADOR,
    B.BOOK_PORT_ID_FPOD
  INTO
    V_BOOKING_NUMERO_EMBARQUE,
    V_ESCA_ID_EMBARQUE,
    V_NUMERO_VIAGEM_TOS,
    V_ARMADOR_ID_EMBARQUE,
    V_FPOD_ID_EMBARQUE
  FROM BHS.BOOKING B
  INNER JOIN BHS.ESCALA ESCA ON (ESCA.ESCA_ID = B.BOOK_ESCA_ID)
  WHERE B.BOOK_ID = P_BOOK_ID_EMBARQUE
    AND BOOK_DTHR_CANCELAMENTO IS NULL;
    
  V_LLPOD_ID_EMBARQUE := V_FPOD_ID_EMBARQUE; -- USAR O LLPOD IGUAL AO FPOD
  
  UPDATE BHS.MERCADORIA SET
    MERC_CTCA_ID = (SELECT CTCA_ID FROM BHS.CATEGORIA_CARGA WHERE CTCA_CONSTANTE = P_CTCA_CONSTANTE_NOVA),
    MERC_ESCA_ID_IMP = (CASE WHEN P_DESFAZER_DESISTENCIA <> 0 THEN NULL ELSE MERC_ESCA_ID_IMP END),
    MERC_ESCA_ID_EXP = V_ESCA_ID_EMBARQUE,
    MERC_LOPA_ARM_EXP = V_ARMADOR_ID_EMBARQUE,
    MERC_PORT_ID_LLPOD = V_LLPOD_ID_EMBARQUE,
    MERC_PORT_ID_FPOD = V_FPOD_ID_EMBARQUE,
    MERC_BOOKING_SAIDA = V_BOOKING_NUMERO_EMBARQUE
  WHERE MERC_ID = P_MERC_ID;


  IF (P_ISO_ID IS NOT NULL) THEN
    UPDATE BHS.CONTEINER SET
      CONT_ISOC_ID_ORIGINAL = NVL(CONT_ISOC_ID_ORIGINAL, CONT_ISOC_ID),
      CONT_ISOC_ID = P_ISO_ID,
      CONT_DATA_MODIFICACAO = SYSDATE
    WHERE CONT_ID = V_CONT_ID;
  END IF;
  
  BEGIN
    SELECT
      MIN(BOOK_KEY)
    INTO
      V_BOOK_KEY
    FROM TOPS.BOOKINGS
    WHERE TRIM(BOOK_NO) = V_BOOKING_NUMERO_EMBARQUE
      AND TRIM(TFC_CODE) = V_NUMERO_VIAGEM_TOS
      AND HIST_FLG <> 'Y';
  EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20001, 'Não foi possível encontrar a BOOK_KEY para atualizar o Booking no TopO.');
  END;
ELSIF (P_OPERACAO = 'D') THEN
  IF P_IS_DESISTENCIA_EMBARQUE <> 0 THEN
    SELECT ESCA_ID INTO V_VIAGEM_FICTICIA FROM BHS.ESCALA WHERE ESCA_VIAGEM_TOS_IMP = 'TBN1504S';
  END IF;
  
  UPDATE BHS.MERCADORIA SET
    MERC_CTCA_ID = (SELECT CTCA_ID FROM BHS.CATEGORIA_CARGA WHERE CTCA_CONSTANTE = P_CTCA_CONSTANTE_NOVA),
    MERC_ESCA_ID_IMP = NVL(V_VIAGEM_FICTICIA, MERC_ESCA_ID_IMP),
    MERC_ESCA_ID_EXP = NULL,
    MERC_LOPA_ARM_IMP = (CASE WHEN P_IS_DESISTENCIA_EMBARQUE <> 0 THEN MERC_LOPA_ARM_EXP ELSE MERC_LOPA_ARM_IMP END),
    MERC_LOPA_ARM_EXP = (CASE WHEN P_IS_DESISTENCIA_EMBARQUE <> 0 THEN MERC_LOPA_ARM_EXP ELSE NULL END),
    MERC_PORT_ID_LLPOD = NULL,
    MERC_PORT_ID_FPOD = (SELECT PORT_ID FROM PORTO WHERE PORT_PENTAGRAMA = 'BRSSZ'),
    MERC_BOOKING_SAIDA = NULL
  WHERE MERC_ID = P_MERC_ID;
  
  UPDATE BHS.CONTEINER SET
    CONT_ISOC_ID = NVL(CONT_ISOC_ID_ORIGINAL, CONT_ISOC_ID),
    CONT_ISOC_ID_ORIGINAL = NULL,
    CONT_DATA_MODIFICACAO = SYSDATE
  WHERE CONT_ID = V_CONT_ID;
  
  V_BOOK_KEY := 0;
  V_BOOKING_NUMERO_EMBARQUE := ' ';
END IF;


/* Atualizar booking no TopO */
BEGIN
  UPDATE TOPS.ITEM SET
    BOOK_KEY = V_BOOK_KEY,
    BOOK_NO = V_BOOKING_NUMERO_EMBARQUE
  WHERE TRIM(ITEM_NO) = V_CONT_NUMERO
    AND HIST_FLG <> 'Y'
    AND FEL = 'E';
EXCEPTION WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001, 'Erro ao atualizar o booking no TopO.');
END;
  
BHS.SP_TRANSF_BOOKING_MSG24(P_MERC_ID, P_USUARIO_ID, P_BOOK_ID_EMBARQUE, P_IS_DESISTENCIA_EMBARQUE);


IF (P_BOOK_ID_ORIGEM IS NOT NULL) THEN
  BHS.SP_DESASSOCIAR_MERC_BOOKING(P_MERC_ID, P_BOOK_ID_ORIGEM);
END IF;


IF (P_BOOK_ID_EMBARQUE IS NOT NULL) THEN
  BHS.SP_ASSOCIAR_MERCADORIA_BOOKING(P_MERC_ID, P_BOOK_ID_EMBARQUE);
END IF;
  
BHS.SP_ATIVIDADE_MERCADORIA(
  'I',
  'BOOK',
  'CORR',
  '',
  '1',
  TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS'),
  TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS'),
  CASE WHEN P_OPERACAO = 'D' THEN 'Desistência de transferência de booking' ELSE 'Transferência de booking' END,
  P_MERC_ID,
  '',
  V_ATVI_ID
);


BHS.SP_ATIVIDADE_USUARIO (
  V_ATVI_ID,
  P_USUARIO_ID,
  'CS_CONFERENTE'
);


EXCEPTION WHEN OTHERS THEN
  ROLLBACK;
  RAISE_APPLICATION_ERROR(-20000, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);


END SP_TRANSFERENCIA_BOOKING;

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_AGEND_MERC_COM_DOC_SAIDA" ("DCO_IDENTIFICACAO", "TIPO_DOC", "BL", "CONT_NUMERO", "MOT_CAP", "VISIT_CODE", "DT_AGENDAMENTO", "CAEF_HORA_INICIAL", "VEIC_PLACA", "REBOQUE", "LOPA_RAZAO_SOCIAL", "PESO_B_VERIF", "PESO_B_MANIF", "AUTO_SAIDA", "DT_CRIACAO_AUT_SAIDA", "MERC_ID", "MERC_TAS", "AGEN_CANCEL", "PRE_GATE", "CATE_CONSTANTE") AS 
  SELECT DCO_SAIDA.DCO_IDENTIFICACAO,
       TD.TIDO_CONSTANTE TIPO_DOC,
       D.DCO_IDENTIFICACAO BL,
       c.CONT_numero,
       M.MOCA_DESCRICAO MOT_CAP,
       A.AGEN_ID VISIT_CODE,
       CE.CAEF_DATA DT_AGENDAMENTO,
       CE.CAEF_HORA_INICIAL,
       VE.VEIC_PLACA,
       VE.VEIC_REBOQUE_1 REBOQUE,
       LP.LOPA_RAZAO_SOCIAL,
       V.MERC_PESO_BRUTO PESO_b_VERIF,
       V.MERC_PESO_BRUTO_MANIF PESO_B_MANIF,
       ASAIDA.AUTS_ID auto_saida,
       ASAIDA.AUTS_DT_CRIACAO dt_criacao_aut_saida,
       V.MERC_ID,
       MERC_TAS.MERC_ID MERC_TAS,
       A.AGEN_DT_CANCELAMENTO AGEN_CANCEL,
       A.AGEN_DT_PREGATE PRE_GATE,
       C.CATE_CONSTANTE
  FROM BHS.MERCADORIA v,
       BHS.MOTIVO_CAPTACAO m,
       BHS.DOCUMENTO d,
       BHS.DOCUMENTO DCO_SAIDA,
       BHS.AMR_DOCUMENTO_MERCADORIA dm,
       BHS.AMR_DOCUMENTO ADS,
       BHS.CONTEINER c,
       TAS.AGENDAMENTO A,
       TAS.MERCADORIA MERC_TAS,
       TAS.CATEGORIA_BASE CB,
       TAS.CATEGORIA_EFETIVA CE,
       TAS.CATEGORIA C,
       TAS.VEICULO VE,
       TAS.MOTORISTA MO,
       ACCESSCONTROL.LOCAL_PARCEIRO LP,
       BHS.AUTORIZACAO_SAIDA ASAIDA,
       BHS.TIPO_DOCUMENTO TD
 WHERE     V.MERC_ID = DM.AMDM_MERC_ID
       AND DM.AMDM_DCO_ID = D.DCO_ID
       AND D.DCO_MOCA_ID = M.MOCA_ID(+)
       AND V.MERC_CONT_Id = C.CONT_ID
       AND v.MERC_STATUS = 'T'
       AND c.CONT_numero IN
              (SELECT TRIM (item_no)
                 FROM TOPS.ITEM i
                WHERE     I.HIST_FLG <> 'Y'
                      AND I.CATEGORY IN ('I', 'T')
                      AND I.PLACE_OF_DELIVERY IN
                             ('BTP', 'BTP_', 'DTAP', 'SOBR', 'TRAN'))
       AND V.MERC_ID = MERC_TAS.MERC_ID_BHS(+)
       AND A.MERC_ID(+) = MERC_TAS.MERC_ID
       --AND (V.MERC_PESO_BRUTO IS NULL OR V.MERC_PESO_BRUTO = 0)
       AND A.CAEF_ID = CE.CAEF_ID(+)
       AND CB.CABA_ID(+) = CE.CABA_ID
       AND C.CATE_ID(+) = CB.CATE_ID
       AND A.VEIC_ID = VE.VEIC_ID(+)
       AND A.MOTO_ID = MO.MOTO_ID(+)
       AND A.LOPA_ID_TRANSP = LP.LOPA_ID(+)
       AND D.DCO_ID = ADS.AMDO_DCO_ID_RELACIONADO
       AND DCO_SAIDA.DCO_ID = ADS.AMDO_DCO_ID
       AND DCO_SAIDA.DCO_TIDO_ID IN
              (55, 51, 75, 46, 101, 65, 57, 64, 77, 44, 100, 68)
       AND ASAIDA.AUTS_MERC_ID(+) = V.MERC_ID
       AND DCO_SAIDA.DCO_TIDO_ID = TD.TIDO_ID
       AND A.AGEN_DT_CANCELAMENTO(+) IS NULL 
       AND DCO_SAIDA.DCO_DT_CANCELAMENTO IS NULL

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_AGEND_MERC_COM_DOC_SAIDA_N" ("DCO_IDENTIFICACAO", "TIPO_DOC", "BL", "CE", "CONT_NUMERO", "MOT_CAP", "VISIT_CODE", "DT_AGENDAMENTO", "CAEF_HORA_INICIAL", "VEIC_PLACA", "REBOQUE", "LOPA_RAZAO_SOCIAL", "PESO_B_VERIF", "PESO_B_MANIF", "AUTO_SAIDA", "DT_CRIACAO_AUT_SAIDA", "MERC_ID", "MERC_TAS", "AGEN_CANCEL", "PRE_GATE", "CATE_CONSTANTE", "GATE_IN", "GATE_OUT", "PESO_LIQUIDO_MANIFESTADO", "PESO_LIQUIDO", "CAMINHO_SCANNER", "DATA_DEFERIMENTO_DTA", "DIVERGENCIA_PESO", "DESISTENCIA_CARREGAMENTO", "DATA_CARREGAMENTO", "IMPORTADOR", "ID") AS 
  SELECT DISTINCT
          DCO_SAIDA.DCO_IDENTIFICACAO,
          TD.TIDO_CONSTANTE TIPO_DOC,
          D.DCO_IDENTIFICACAO BL,
          D.DCO_NUMERO_CE CE,
          C.CONT_NUMERO,
          M.MOCA_DESCRICAO MOT_CAP,
          A.AGEN_ID VISIT_CODE,
          CE.CAEF_DATA DT_AGENDAMENTO,
          CE.CAEF_HORA_INICIAL,
          VE.VEIC_PLACA,
          VE.VEIC_REBOQUE_1 REBOQUE,
          LP.LOPA_RAZAO_SOCIAL,
          V.MERC_PESO_BRUTO PESO_B_VERIF,
          V.MERC_PESO_BRUTO_MANIF PESO_B_MANIF,
          ASAIDA.AUTS_ID AUTO_SAIDA,
          ASAIDA.AUTS_DT_CRIACAO DT_CRIACAO_AUT_SAIDA,
          V.MERC_ID,
          MERC_TAS.MERC_ID MERC_TAS,
          A.AGEN_DT_CANCELAMENTO AGEN_CANCEL,
          A.AGEN_DT_PREGATE PRE_GATE,
          C.CATE_CONSTANTE,
          A.AGEN_DT_GATE,
          A.AGEN_DT_GATEOUT,
          V.MERC_PESO_LIQUIDO_MANIF,
          V.MERC_PESO_LIQUIDO,
          XR.XRAY_PATH_FILE,
          ASAIDA.AUTS_DT_CRIACAO,
          CASE
             WHEN (V.MERC_PESO_LIQUIDO_MANIF) = 0
             THEN
                0
             ELSE
                ROUND (
                   (  (  (100 / V.MERC_PESO_LIQUIDO_MANIF)
                       * V.MERC_PESO_LIQUIDO)
                    - 100),
                   2)
          END
             AS DIVERGENCIA_PESO,
          DECA.DECA_DT_CRIACAO,
          --ATIV.ATVI_DTHR_FIM DATA_DESEMP
          (SELECT ATVI_DTHR_FIM
             FROM BHS.ATIVIDADE
            WHERE     ATVI_MERC_ID(+) = V.MERC_ID
                  AND ATVI_TPHD_ID(+) = 21
                  AND ATVI_TIAT_ID(+) = 10
                  AND ROWNUM = 1)
             DATA_DESEMP,
          --LP_IMP.LOPA_RAZAO_SOCIAL,
          (SELECT LOPA_IMP.LOPA_RAZAO_SOCIAL
             FROM BHS.AMR_DOCUMENTO_MERCADORIA DOME
                  INNER JOIN BHS.DOCUMENTO DOC
                     ON DOME.AMDM_DCO_ID = DOC.DCO_ID
                  INNER JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA_IMP
                     ON DOC.DCO_LOPA_ID = LOPA_IMP.LOPA_ID
            WHERE     V.MERC_ID = DOME.AMDM_MERC_ID
                  AND ROWNUM = 1
                  AND DOC.DCO_TIDO_ID = 50)
             IMPORTADOR,
          V.MERC_ID ID
     FROM BHS.MERCADORIA V,
          BHS.MOTIVO_CAPTACAO M,
          BHS.DOCUMENTO D,
          BHS.DOCUMENTO DCO_SAIDA,
          BHS.AMR_DOCUMENTO_MERCADORIA DM,
          BHS.AMR_DOCUMENTO ADS,
          BHS.CONTEINER C,
          TAS.AGENDAMENTO A,
          TAS.MERCADORIA MERC_TAS,
          TAS.CATEGORIA_BASE CB,
          TAS.CATEGORIA_EFETIVA CE,
          TAS.CATEGORIA C,
          TAS.VEICULO VE,
          TAS.MOTORISTA MO,
          ACCESSCONTROL.LOCAL_PARCEIRO LP,
          BHS.AUTORIZACAO_SAIDA ASAIDA,
          BHS.TIPO_DOCUMENTO TD,
          GATE.XRAY XR,
          BHS.DESISTENCIA_CARREGAMENTO DECA
    --BHS.ATIVIDADE ATIV
    --ACCESSCONTROL.LOCAL_PARCEIRO LP_IMP
    WHERE     V.MERC_ID = DM.AMDM_MERC_ID
          AND DM.AMDM_DCO_ID = D.DCO_ID
          AND D.DCO_TIDO_ID = 50
          AND D.DCO_MOCA_ID = M.MOCA_ID(+)
          AND V.MERC_CONT_ID = C.CONT_ID
          AND (V.MERC_STATUS = 'T' OR V.MERC_STATUS = 'S')
          AND C.CONT_NUMERO IN
                 (SELECT TRIM (ITEM_NO)
                    FROM TOPS.ITEM I
                   WHERE                                 --  I.HIST_FLG <> 'Y'
                        I    .CATEGORY IN ('I', 'T')
                         AND I.PLACE_OF_DELIVERY IN
                                ('BTP',
                                 'BTP_',
                                 'DTAP',
                                 'SOBR',
                                 'TRAN',
                                 'XROK',
                                 'WGOK'))
          AND V.MERC_ID = MERC_TAS.MERC_ID_BHS(+)
          AND A.MERC_ID(+) = MERC_TAS.MERC_ID
          --AND (V.MERC_PESO_BRUTO IS NULL OR V.MERC_PESO_BRUTO = 0)
          AND A.CAEF_ID = CE.CAEF_ID(+)
          AND CB.CABA_ID(+) = CE.CABA_ID
          AND C.CATE_ID(+) = CB.CATE_ID
          AND C.CATE_CONSTANTE <> 'IMP_TRA'
          AND A.VEIC_ID = VE.VEIC_ID(+)
          AND A.MOTO_ID = MO.MOTO_ID(+)
          AND A.LOPA_ID_TRANSP = LP.LOPA_ID(+)
          AND D.DCO_ID = ADS.AMDO_DCO_ID_RELACIONADO
          AND DCO_SAIDA.DCO_ID = ADS.AMDO_DCO_ID
          AND DCO_SAIDA.DCO_TIDO_ID IN
                 (55, 51, 75, 46, 101, 65, 57, 64, 77, 44, 100, 68)
          AND ASAIDA.AUTS_MERC_ID(+) = V.MERC_ID
          AND DCO_SAIDA.DCO_TIDO_ID = TD.TIDO_ID
          AND A.AGEN_DT_CANCELAMENTO(+) IS NULL
          AND DCO_SAIDA.DCO_DT_CANCELAMENTO IS NULL
          AND V.MERC_ID = XR.XRAY_MERC_ID(+)
          AND V.MERC_ID = DECA.DECA_MERC_ID(+)
----------------------------------------------------------------------
--OBJETO: BHS.VW_AGEND_MERC_COM_DOC_SAIDA_N
--OBJETIVO: VIEW PARA OBTER DADOS DE AGENDAMENTOS DE IMPORTAÇÃO QUE ESTÃO NO TERMINAL
--SISTEMA: BHS
--ALTERAÇÃO: ROBSON LINHARES - DATA: <06/11/14>
--MOTIVO DA ALTERAÇÃO: Inclusão de novo campo Importador.
--ALTERAÇÃO: JORGE ROBERTO - DATA: 08/06/2015
--MOTIVO DA ALTERAÇÃO: INCLUSÃO DOS PLACE_OF_DELIVERY 'XROK' e 'WGOK'
--ALTERAÇÃO: JORGE ROBERTO - DATA: 08/06/2015
--MOTIVO DA ALTERAÇÃO: INCLUSÃO DO FILTRO QUE VERIFICA SE O AGENDAMENTO É DE REMOÇÃO EXTERNA, ESTE SENDO NÃO DEVE SER RETORNADO NA CONSULTA.
--ALTERAÇÃO: ROBSON LINHARES - DATA: 09/09/2015
--MOTIVO DA ALTERAÇÃO: INCLUSÃO DO FILTRO por BL.
--ALTERAÇÃO: ROBSON LINHARES - DATA: 09/09/2015
--MOTIVO DA ALTERAÇÃO: INCLUSÃO DE FILTRO para não duplicar atividades.
--ALTERAÇÃO: GABREL - DATA: 12/07/2017
-- MOTIVO DA ALTERAÇÃO: INCLUSÃO DOS CAMPOS BL E CE
----------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_B2B_CONS_CONT_LACRE" ("MANIFESTADO", "ENCONTRADO", "SEAL_TYPE", "MERC_NUM_CONTEINER", "MERC_ID", "ID") AS 
  SELECT DISTINCT AMLM.ALAM_NUM_LACRE MANIFESTADO,
                     LACRE_TOS.SEAL_NO ENCONTRADO,
                     LACRE_TOS.SEAL_TYPE,
                     CONT.CONT_NUMERO MERC_NUM_CONTEINER,
                     MERC.MERC_ID,
                     ROWNUM ID
       FROM BHS.MERCADORIA MERC,
            BHS.AMR_LACRE_MERCADORIA AMLM,
            BHS.CONTEINER CONT,
            (  SELECT distinct ITSE.SEAL_NO,
                      ITSE.SEAL_TYPE,
                      IT.ITEM_NO,
                      IT.ITEM_KEY
                 FROM TOPS.ITEM IT, TOPS.ITEM_SEAL ITSE
                WHERE     IT.ITEM_KEY = ITSE.ITEM_KEY
                      AND ITSE.STATUS = 'C'
                      AND ITSE.SEAL_TYPE <> 'BTP'
             ORDER BY IT.ITEM_KEY DESC) LACRE_TOS
      WHERE     MERC.MERC_ID = AMLM.ALAM_MERC_ID(+)
            AND MERC.MERC_CONT_ID = CONT.CONT_ID
            AND CONT.CONT_NUMERO(+) = TRIM (TO_CHAR (LACRE_TOS.ITEM_NO))
            AND AMLM.ALAM_ATIVO = 1
   ORDER BY AMLM.ALAM_NUM_LACRE, LACRE_TOS.SEAL_NO

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_B2B_CONS_CONT_LACRE_EXP" ("MANIFESTADO", "ENCONTRADO", "SEAL_TYPE", "MERC_NUM_CONTEINER", "MERC_ID", "ID", "MERC_ID_BHS") AS 
  SELECT '' MANIFESTADO,
            LACRE_TOS.SEAL_NO ENCONTRADO,
            LACRE_TOS.SEAL_TYPE,
            CONT.CONT_NUMERO MERC_NUM_CONTEINER,
            MERC.MERC_ID,
            ROWNUM ID,
            MERC.MERC_ID_BHS
       FROM TAS.MERCADORIA MERC,
            BHS.CONTEINER CONT,
            (  SELECT DISTINCT ITSE.SEAL_NO,
                               ITSE.SEAL_TYPE,
                               IT.ITEM_NO,
                               IT.ITEM_KEY
                 FROM TOPS.ITEM IT, TOPS.ITEM_SEAL ITSE
                WHERE     IT.ITEM_KEY = ITSE.ITEM_KEY
                      AND ITSE.STATUS = 'C'
                      AND ITSE.SEAL_TYPE <> 'BTP'
                      AND IT.ARR_BY = 'T'
             ORDER BY IT.ITEM_KEY DESC) LACRE_TOS
      WHERE     MERC.MERC_CONT_ID = CONT.CONT_ID
            AND CONT.CONT_NUMERO(+) = TRIM (TO_CHAR (LACRE_TOS.ITEM_NO))
   ORDER BY LACRE_TOS.SEAL_NO

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_B2B_CONSULTA_ESTOQUE_EXP" ("ID", "Conteiner", "Tipo", "IsoCode", "Id_Exportador", "Exportador", "Cnpj", "Navio", "Reserva", "Peso_Liq_Manif", "Peso_Bruto_Manif", "Gatein", "Embarque") AS 
  SELECT DISTINCT merc_bhs.merc_id ID,
                   cont.CONT_NUMERO Conteiner,
                   isoc.ISOC_TAMANHO Tipo,
                   (isoc.ISOC_TAMANHO || ' ' || ISOC.ISOC_SIGLA) IsoCode,
                   lopaExp.LOPA_ID Id_Exportador,
                   lopaExp.LOPA_RAZAO_SOCIAL Exportador,
                   lopaExp.LOPA_CNPJ Cnpj,
                   navi.NAVI_NOME Navio,
                   book.BOOK_NUMERO_BOOKING Reserva,
                   merc_bhs.MERC_PESO_LIQUIDO_MANIF Peso_Liq_Manif,
                   merc_bhs.MERC_PESO_BRUTO_MANIF Peso_Bruto_Manif,
                   item.ARR_TS Gatein,
                   item.DEP_TS Embarque
     FROM bhs.mercadoria merc_bhs
          INNER JOIN TAS.MERCADORIA merc_tas
             ON merc_bhs.MERC_ID = merc_tas.MERC_ID_BHS
          INNER JOIN BHS.ITEM_BOOKING itbo
             ON merc_tas.merc_id = itbo.ITBO_MERC_ID_TAS
          INNER JOIN BHS.BOOKING book ON itbo.ITBO_BOOK_ID = book.BOOK_ID          
          INNER JOIN bhs.conteiner cont
             ON merc_bhs.merc_cont_id = cont.cont_id
          INNER JOIN bhs.isocode isoc ON cont.CONT_ISOC_ID = isoc.ISOC_ID
          INNER JOIN bhs.escala esca
             ON merc_bhs.MERC_ESCA_ID_EXP = esca.ESCA_ID
          INNER JOIN bhs.navio navi ON esca_navi_id = navi.navi_id
          INNER JOIN TAS.AMR_MERC_DOCUMENTO ammd
             ON ammd.MERC_ID = merc_tas.merc_id
          INNER JOIN TAS.documento docu ON ammd.DOCU_ID = docu.DOCU_ID
          INNER JOIN accesscontrol.local_parceiro lopaExp
             ON docu.LOPA_ID = lopaExp.LOPA_ID          
          INNER JOIN TOPS.ITEM item ON cont.cont_numero = TRIM (item.ITEM_NO)
    WHERE 
        item.DEP_BY = 'V' 
        AND item.ARR_BY = 'T' 
        AND TRIM(item.DEP_CAR) = esca.ESCA_VIAGEM_TOS_EXP
-------------------------------------------------------------
--Objeto: BHS.VW_B2B_CONSULTA_ESTOQUE_EXP
--Criao: Allan Motroni - Data: 11/01/2016
--Objetivo: View para retornar os contineres no Estoque de Exportao.
--Sistema: TAS - B2B - Tela de Estoque Exportao
--Alterao: 
--Motivo da alterao: 
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CNTR_SCANNER" ("ID", "DESCARGA_GATE_IN", "CONTEINER", "CAMINHO_SCANNER") AS 
  SELECT DISTINCT
          ROWNUM,
          TO_CHAR (ATCN.ATVI_DTHR_INI, 'DD/MM/YYYY HH24:MI:SS')
             DESCARGA_GATEIN,
          MERC.CONTEINER,
          '' CAMINHO_SCANNER
     FROM GATE.XRAY X,
          BHS.VW_MERCADORIA MERC,
          TOPS.ITEM I,
          BHS.VW_ATIVIDADE_CNTR ATCN
    WHERE     X.XRAY_MERC_ID = MERC.MERC_ID
          AND MERC_STATUS = 'T'
          AND (MERC.TRA_ID IN (132, 1, 39, 40) OR MERC.TRA_ID IS NULL)
          AND MERC.MERC_CH_VZ IN ('F')
          AND XRAY_PATH_FILE IS NULL
          AND XRAY_SCANNED = 0
          AND MERC.CONTEINER = TRIM (I.ITEM_NO)
          AND TO_CHAR (I.DEP_TS, 'DD/MM/YYYY') = '31/12/1900'
          AND (   ATCN.TIAT_DESCRICAO = 'DESCARGA'
               OR ATCN.TIAT_DESCRICAO = 'GATE_IN')
          AND MERC.MERC_ID = ATCN.MERC_ID
          AND CATEGORIA_CARGA_ID = 2
----------------------------------------------------------------------
--OBJETO: BHS.VW_CNTR_SCANNER 
--OBJETIVO: VIEW PARA OBTER DADOS DE CNTR SEM CAMINHO DE SCANNER
--SISTEMA: BHS
--ALTERAÇÃO: PAULO CÉSAR - DATA: <03062014>
--MOTIVO DA ALTERAÇÃO: INCLUIR CAMPO ID (ROWNUM)
----------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_CONTEINER_IMP" ("CONTEINER", "CHEIOVAZIO", "ISO", "ORIGEM", "DESTINO", "TARA", "PESO_BRUTO_VERIFICADO", "PESO_LIQUIDO_VERIFICADO", "DATA_DESCARGA", "DATA_SAIDA", "LACRES", "VIAGEM", "NAVIO", "PESO_BRUTO_MAFESTADO", "PESO_LIQUIDO_MANIFESTADO", "REGIME", "CEMERCANTE", "BL", "IMPORTADOR", "ID", "ID_BL") AS 
  SELECT IT.ITEM_NO CONTEINER,
          IT.FEL,  
          IT.ORIG_ISO ISO,
          IT.LOAD_PORT ORIGEM,
          IT.DISCH_PORT DESTINO,
             TRUNC (IT.TARE)
          || RPAD (REPLACE (IT.TARE - TRUNC (IT.TARE), ','), 3, '0')
             TARA,
             TRUNC (IT.GROSS)
          || RPAD (REPLACE (IT.GROSS - TRUNC (IT.GROSS), ','), 3, '0')
             PESO_BRUTO_VERIFICADO,
             TRUNC (IT.CGO_GROSS_WT)
          || RPAD (REPLACE (IT.CGO_GROSS_WT - TRUNC (IT.CGO_GROSS_WT), ','),
                   3,
                   '0')
             PESO_LIQUIDO_VERIFICADO,
          IT.ARR_TS DATA_DESCARGA,
          IT.DEP_TS DATA_SAIDA,
          BHS.FUNC_LACRES_TOPS (TRIM (IT.ITEM_KEY)) LACRES,
          ESCA.ESCA_RAP VIAGEM,
          NAVI.NAVI_NOME NAVIO,
          MERC.MERC_PESO_BRUTO_MANIF PESO_BRUTO_MAFESTADO,
          MERC.MERC_PESO_LIQUIDO_MANIF PESO_LIQUIDO_MANIFESTADO,
          ESCO.REGIME REGIME,
          DOCU.CONHECIMENTO_ELETRONICO CEMERCANTE,
          DOCU.IDENT_DOC BL,
          LOPA.LOPA_RAZAO_SOCIAL IMPORTADOR,
          MERC.MERC_ID ID,
          DOCU.NUM_SEQ_DOC ID_BL
     FROM TOPS.ITEM IT,
          BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          HOST.ESTADA_CONTEINER ESCO,
          HOST.DOCUMENTO_CONTEINER DOCO,
          HOST.DOCUMENTO DOCU,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_ID = ESCO.SEQ_EST_CONT
          AND DOCO.SEQ_EST_CONT || DOCO.ANO_EST_CONT =
                 ESCO.SEQ_EST_CONT || ESCO.ANO
          AND DOCO.NUM_SEQ_DOC = DOCU.NUM_SEQ_DOC
          AND DOCU.COD_TIPO_DOC = 'BL'
          AND TRIM (CONT.CONT_NUMERO) = TRIM (IT.ITEM_NO)
          AND DOCU.IDENTIFICACAO_IMPORTEXPORT || DOCU.ESTAB_FILIAL_CLIENTE =
                 SUBSTR (LOPA.LOPA_CNPJ, 0, 12)
          AND ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
----------------------------------------------------------------------
--OBJETO: BHS.VW_CONSULTA_CONTEINER_IMP
--OBJETIVO: VIEW PARA OBTER DADOS DA CONSULTA CONTEINER (TOPO)
--SISTEMA: BHS
--ALTERAÇÃO: PAULO CÉSAR - DATA: <25092014>
--MOTIVO DA ALTERAÇÃO: INCLUIR CAMPO CHEIOVAZIO (INDICATIVO DE CNTR CHEIO OU VAZIO) 
----------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_ISO_VAZIO_ARMADOR" ("ID", "QUALIFIER", "ISO", "LINE", "RAZAO_SOCIAL", "LOPA_ID") AS 
  SELECT  ROWNUM,
        ITEM_TYPE || ' ' || I.LENGTH || ' ' || I.HEIGHT QUALIFIER, 
        I.ORIG_ISO,
        I.LINE_OPER,  
        LOPA.LOPA_RAZAO_SOCIAL, 
        LOPA.LOPA_ID 
FROM TOPS.ITEM I, ACCESSCONTROL.LOCAL_PARCEIRO LOPA
WHERE TRIM(I.LINE_OPER) = TRIM(LOPA.BTP_EMP_CONSTANTE)
AND I.HIST_FLG <> 'Y'
AND I.FEL = 'E' AND I.DEP_CAR = ' '

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_OPERACAO_NAVIO_D" ("ID", "IN_VOYAGE", "OUT_VOYAGE", "VES_ID", "CTNR_NO", "LINE_OPER", "ISO", "FEL", "CATEGORY", "BL", "LOAD_PORT", "DISCH_PORT", "FDISCH_PORT", "REEFER", "IMO", "GROSS", "DISCHARGE_TIME", "LOPA_ID", "LOPA_RAZAO_SOCIAL") AS 
  SELECT DISTINCT ITEM.ITEM_KEY ID,
                   TRIM (VEDE.IN_VOYAGE) IN_VOYAGE,
                   TRIM (VEDE.OUT_VOYAGE) OUT_VOYAGE,
                   TRIM (VEDE.VES_ID) VES_ID,
                   TRIM (item.ITEM_NO) CTNR_NO,
                   TRIM (item.LINE_OPER) LINE_OPER,
                   item.ISO,
                   item.FEL,
                   TRIM (item.category) CATEGORY,
                   TRIM (item.BILL_OF_LADING) BL,
                   item.LOAD_PORT,
                   item.DISCH_PORT,
                   item.FDISCH_PORT,
                   DECODE (itre.ITEM_KEY, NULL, '', 'Y') REEFER,
                   DECODE (itda.DGS_CLASS, NULL, '', 'Y') IMO,
                   (item.GROSS * 1000) GROSS,
                   item.ARR_TS DISCHARGE_TIME,
                   LOPA.LOPA_ID,
                   LOPA.LOPA_RAZAO_SOCIAL
     FROM tops.item item
          INNER JOIN TOPS.VESSEL_DETAILS vede
             ON ITEM.ARR_CAR = VEDE.TFC_CODE_I
          LEFT JOIN TOPS.ITEM_DANGEROUS itda
             ON item.ITEM_KEY = itda.ITEM_KEY
          LEFT JOIN TOPS.ITEM_REEFER itre
             ON item.ITEM_KEY = itre.ITEM_KEY
          LEFT JOIN BHS.AMR_COMMON_ACCOUNT AMCA
             ON ITEM.ITEM_KEY = AMCA.AMCA_ITEM_KEY
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON AMCA.AMCA_LOPA_ID = LOPA.LOPA_ID
    WHERE     (item.category = 'I' OR item.category = 'T')
          AND item.ARR_CAR = VEDE.TFC_CODE_I
          AND item.ARR_TS <>
                 TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI:SS')
-------------------------------------------------------------
--Objeto: BHS.VW_CONSULTA_OPERACAO_NAVIO_D (Discharge)
--Alteração: Allan Motroni - Data: 18/09/2014
--Objetivo: view para retornar os dados da tela de Relatório de Operação do Navio.
--Sistema: BHS
--Alteração: Allan Motroni - 19/11/2014
--Motivo da alteração: Inclusão do campo Common Account.
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_OPERACAO_NAVIO_L" ("ID", "IN_VOYAGE", "OUT_VOYAGE", "VES_ID", "CTNR_NO", "LINE_OPER", "FEL", "CATEGORY", "BOOK_NO", "ISO", "DISCH_PORT", "FDISCH_PORT", "GROSS", "TEMP", "DANGEROUS", "IMDG_CLASS", "POSITION", "LOAD_TIME", "LOPA_ID", "LOPA_RAZAO_SOCIAL", "DOCUMENTO") AS 
  SELECT DISTINCT
          ITEM.ITEM_KEY id,
          TRIM (VEDE.IN_VOYAGE) IN_VOYAGE,
          TRIM (VEDE.OUT_VOYAGE) OUT_VOYAGE,
          TRIM (VEDE.VES_ID) VES_ID,
          TRIM (item.ITEM_NO) CTNR_NO,
          TRIM (item.LINE_OPER) LINE_OPER,
          item.FEL,
          TRIM (item.category) CATEGORY,
          TRIM (item.BOOK_NO) BOOK_NO,
          item.ISO,
          item.DISCH_PORT,
          item.FDISCH_PORT,
          (item.GROSS * 1000) GROSS,
          DECODE (BOOK.TEMP_MIN, 9999, decode(BOOK.TEMP_SETTING,  9999, '', BOOK.TEMP_SETTING), book.TEMP_MIN) TEMP,
          DECODE (itda.DGS_CLASS, NULL, '', 'Y') DANGEROUS,
          itda.DGS_CLASS, 
          (TRIM (itlo.X) || ' ' || TRIM (itlo.Y) || ' ' || TRIM (itlo.Z))
             POSITION,
          item.DEP_TS LOAD_TIME,
          LOPA.LOPA_ID,
          LOPA.LOPA_RAZAO_SOCIAL,
          BHS.FN_DOCUMENTOS_EXP(TRIM (item.ITEM_NO) , TRIM (VEDE.OUT_VOYAGE))
     FROM tops.item item 
          INNER JOIN tops.item_location itlo
             ON item.ITEM_KEY = itlo.item_key
          INNER JOIN TOPS.VESSEL_DETAILS vede
             ON ITEM.DEP_CAR = VEDE.TFC_CODE_E
          LEFT JOIN TOPS.ITEM_DANGEROUS itda
             ON item.ITEM_KEY = itda.ITEM_KEY
          LEFT JOIN TOPS.BOOKINGS book
             ON item.BOOK_KEY = book.BOOK_KEY
          LEFT JOIN BHS.AMR_COMMON_ACCOUNT AMCA
             ON ITEM.ITEM_KEY = AMCA.AMCA_ITEM_KEY
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON AMCA.AMCA_LOPA_ID = LOPA.LOPA_ID
    WHERE     (item.category = 'E' OR item.category = 'T')
          AND item.DEP_CAR = VEDE.TFC_CODE_E
          --AND (item.DEP_CAR = book.TFC_CODE OR book.TFC_CODE IS NULL)
          AND TRIM (itlo.stk_pch) = 'C'
          AND item.DEP_TS <>
                 TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI:SS')
-------------------------------------------------------------
--Objeto: BHS.VW_CONSULTA_OPERACAO_NAVIO_L
--Objetivo: view para retornar os dados da tela de Relatório de Operação do Navio com documento de EXP.
--Sistema: TAS
--Alteração: Robson Linhares - 23/02/2015  Inclusão do Campo documento
--Motivo da alteração: Inclusão do Campo documento
-------------------------------------------------------------/

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_OPERACAO_NAVIO_R" ("ID", "IN_VOYAGE", "OUT_VOYAGE", "VES_ID", "CTNR_NO", "RESTOW_TYPE", "LINE_OPER", "ISO", "LENGTH", "GROSS", "FEL", "FROM", "TO", "LOAD_PORT", "DISCH_PORT", "LOPA_ID", "LOPA_RAZAO_SOCIAL") AS 
  SELECT ITEM.ITEM_KEY ID,
          TRIM (VEDE.IN_VOYAGE) IN_VOYAGE,
          TRIM (VEDE.OUT_VOYAGE) OUT_VOYAGE,
          TRIM (VEDE.VES_ID) VES_ID,
          TRIM (item.ITEM_NO) CTNR_NO,
          DECODE (TRIM (item.category), 'R', 'YARD', 'ON BOARD') RESTOW_TYPE,
          TRIM (item.LINE_OPER) LINE_OPER,
          item.ISO,
          item.LENGTH,
          (item.GROSS * 1000) GROSS,
          item.FEL,
          (SELECT (TRIM (X) || ' ' || TRIM (Y) || ' ' || TRIM (Z)) "FROM"
             FROM TOPS.ITEM_LOCATION
            WHERE     stk_class = 'V'
                  AND stk_pch = 'H'
                  AND ITEM_KEY = item.ITEM_KEY
                  AND ROWNUM = 1)
             "FROM",
          (SELECT (TRIM (X) || ' ' || TRIM (Y) || ' ' || TRIM (Z)) "FROM"
             FROM TOPS.ITEM_LOCATION
            WHERE     stk_class = 'V'
                  AND stk_pch = 'C'
                  AND ITEM_KEY = item.ITEM_KEY)
             "TO",
          item.LOAD_PORT,
          item.DISCH_PORT,
          LOPA.LOPA_ID,
          LOPA.LOPA_RAZAO_SOCIAL
     FROM tops.item item
          INNER JOIN TOPS.VESSEL_DETAILS vede
             ON ITEM.ARR_CAR = VEDE.TFC_CODE_I
          LEFT JOIN BHS.AMR_COMMON_ACCOUNT AMCA
             ON ITEM.ITEM_KEY = AMCA.AMCA_ITEM_KEY
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON AMCA.AMCA_LOPA_ID = LOPA.LOPA_ID
    WHERE (item.category = 'R' OR item.category = 'S')
-------------------------------------------------------------
--Objeto: BHS.VW_CONSULTA_OPERACAO_NAVIO_R (Restow)
--Criação: Allan Motroni - Data: 18/09/2014
--Objetivo: view para retornar os dados da tela de Relatório de Operação do Navio.
--Sistema: BHS
--Alteração: Allan Motroni - Data: 19/11/2014
--Motivo da alteração: Inclusão do campo Common Account.
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_OPERACAO_NAV_L_NEW" ("ID", "IN_VOYAGE", "OUT_VOYAGE", "VES_ID", "CTNR_NO", "LINE_OPER", "FEL", "CATEGORY", "BOOK_NO", "ISO", "DISCH_PORT", "FDISCH_PORT", "GROSS", "TEMP", "DANGEROUS", "IMDG_CLASS", "POSITION", "LOAD_TIME", "LOPA_ID", "LOPA_RAZAO_SOCIAL", "DOCUMENTO") AS 
  SELECT DISTINCT
          ITEM.ITEM_KEY id,
          TRIM (VEDE.IN_VOYAGE) IN_VOYAGE,
          TRIM (VEDE.OUT_VOYAGE) OUT_VOYAGE,
          TRIM (VEDE.VES_ID) VES_ID,
          TRIM (item.ITEM_NO) CTNR_NO,
          TRIM (item.LINE_OPER) LINE_OPER,
          item.FEL,
          TRIM (item.category) CATEGORY,
          TRIM (item.BOOK_NO) BOOK_NO,
          item.ISO,
          item.DISCH_PORT,
          item.FDISCH_PORT,
          (item.GROSS * 1000) GROSS,
          DECODE (BOOK.TEMP_MIN, 9999, decode(BOOK.TEMP_SETTING,  9999, '', BOOK.TEMP_SETTING), book.TEMP_MIN) TEMP,
          DECODE (itda.DGS_CLASS, NULL, '', 'Y') DANGEROUS,
          itda.DGS_CLASS, 
          (TRIM (itlo.X) || ' ' || TRIM (itlo.Y) || ' ' || TRIM (itlo.Z))
             POSITION,
          item.DEP_TS LOAD_TIME,
          LOPA.LOPA_ID,
          LOPA.LOPA_RAZAO_SOCIAL,
          BHS.FN_DOCUMENTOS_EXP(TRIM (item.ITEM_NO) , TRIM (VEDE.OUT_VOYAGE))
     FROM tops.item item 
          INNER JOIN tops.item_location itlo
             ON item.ITEM_KEY = itlo.item_key
          INNER JOIN TOPS.VESSEL_DETAILS vede
             ON ITEM.DEP_CAR = VEDE.TFC_CODE_E
          LEFT JOIN TOPS.ITEM_DANGEROUS itda
             ON item.ITEM_KEY = itda.ITEM_KEY
          LEFT JOIN TOPS.BOOKINGS book
             ON item.BOOK_KEY = book.BOOK_KEY
          LEFT JOIN BHS.AMR_COMMON_ACCOUNT AMCA
             ON ITEM.ITEM_KEY = AMCA.AMCA_ITEM_KEY
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON AMCA.AMCA_LOPA_ID = LOPA.LOPA_ID
    WHERE     (item.category = 'E' OR item.category = 'T')
          AND item.DEP_CAR = VEDE.TFC_CODE_E
          --AND (item.DEP_CAR = book.TFC_CODE OR book.TFC_CODE IS NULL)
          AND TRIM (itlo.stk_pch) = 'C'
          AND item.DEP_TS <>
                 TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI:SS')
-------------------------------------------------------------
--Objeto: BHS.VW_CONSULTA_OPERACAO_NAV_L_NEW (Loading)
--Criação: Robson Linhares - Data: 13/02/2015
--Objetivo: view para retornar os dados da tela de Relatório de Operação do Navio com documento de EXP.
--Sistema: TAS
--Alteração: 19/02/2015  Comentário da linha que pega a viagem da tabela bookings.
--Motivo da alteração: Capturar a viagem da tabela ITEM.
-------------------------------------------------------------/

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_RELATORIO_FRUTAS" ("DATA_CHEGADA", "NAVIO", "VIAGEM", "CONTEINER", "TIPO_CONTEINER", "PESO_BRUTO", "BL", "ARMADOR", "PORTO_ORIGEM", "IMPORTADOR", "TEMPERATURA", "MERCADORIA", "CORPO_BL") AS 
  SELECT DISTINCT item.ARR_TS DATA_CHEGADA,
                     navi.NAVI_NOME NAVIO,
                     esca.ESCA_NUMERO_VIAGEM VIAGEM,
                     cont.CONT_NUMERO CONTEINER,
                     isoc.ISOC_CODIGO TIPO_CONTEINER,
                     item.GROSS PESO_BRUTO,
                     DOCU.DCO_IDENTIFICACAO BL,
                     lopaArm.LOPA_RAZAO_SOCIAL ARMADOR,
                     portL.PORT_NOME PORTO_ORIGEM,
                     lopaImp.LOPA_RAZAO_SOCIAL IMPORTADOR,
                     merc_bhs.MERC_TEMPERATURA TEMPERATURA,
                     ncm.NCM_DESCRICAO MERCADORIA,
                     DOCU.DCO_CORPO_BL CORPO_BL
       FROM TAS.MERCADORIA merc_tas
            INNER JOIN BHS.MERCADORIA merc_bhs
               ON merc_tas.MERC_ID_BHS = merc_bhs.MERC_ID
            INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
               ON merc_bhs.MERC_ID = AMDM.AMDM_MERC_ID
            INNER JOIN BHS.DOCUMENTO DOCU
               ON AMDM.AMDM_DCO_ID = DOCU.DCO_ID
            INNER JOIN BHS.TIPO_CONHECIMENTO TICO
               ON DOCU.DCO_TICO_ID = TICO.TICO_ID
            INNER JOIN BHS.CONTEINER cont
               ON merc_bhs.MERC_CONT_ID = cont.CONT_ID
            INNER JOIN TOPS.ITEM item
               ON cont.CONT_NUMERO = TRIM (item.ITEM_NO)
            INNER JOIN BHS.ISOCODE isoc
               ON cont.CONT_ISOC_ID = isoc.ISOC_ID
            INNER JOIN BHS.VW_ESCALA esca
               ON merc_bhs.MERC_ESCA_ID_IMP = esca.ESCA_ID
            INNER JOIN BHS.NAVIO navi
               ON esca.ESCA_NAVI_ID = navi.NAVI_ID
            INNER JOIN BHS.PORTO portL
               ON DOCU.DCO_PORT_ID_POL = portL.PORT_ID
            INNER JOIN ACCESSCONTROL.LOCAL_PARCEIRO lopaImp
               ON DOCU.DCO_LOPA_ID = lopaImp.LOPA_ID
            LEFT JOIN accesscontrol.local_parceiro lopaArm
               ON merc_bhs.MERC_LOPA_ARM_IMP = lopaArm.LOPA_ID
            LEFT JOIN BHS.AMR_NCM_MERCADORIA amnm
               ON merc_bhs.MERC_ID = amnm.AMNM_MERC_ID
            LEFT JOIN BHS.NCM ncm
               ON amnm.AMNM_NCM_ID = ncm.NCM_ID
      WHERE     (merc_bhs.MERC_STATUS = 'T' OR merc_bhs.MERC_STATUS = 'S')
            AND merc_bhs.MERC_DT_CANCEL IS NULL
            AND DOCU.DCO_TIDO_ID = 50
            AND TICO.TICO_ID IN (1                                      /*BL*/
                                  , 2                                  /*MBL*/
                                     )
            AND esca.ESCA_VIAGEM_TOS_IMP = TRIM (item.ARR_CAR)
            AND TRIM (item.ARR_BY) = 'V'
            AND item.ARR_TS <>
                   TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI:SS')
            AND ncm.NCM_CODIGO IN
                   ('08051000',
                    '08055000',
                    '08052000',
                    '08054000',
                    '08061000',
                    '08081000',
                    '08082010',
                    '08094000',
                    '08091000',
                    '08092000',
                    '08093010',
                    '08093020',
                    '08105000',
                    '07031019',
                    '07032090',
                    '08101000')
   ORDER BY item.ARR_TS, cont.CONT_NUMERO
-------------------------------------------------------------
--Objeto: BHS.VW_CONSULTA_RELATORIO_FRUTAS
--Criação: Allan Motroni - Data: 24/09/2014
--Objetivo: view para retornar os contêineres com frutas que foram descarregados na semana anterior da execução. View executada no serviço Relatório de Frutas.
--Sistema: Serviços
--Alteração: Allan Motroni - 28/01/2014
--Motivo da alteração: Acréscimo de novos NCMs (07031010,07032090)
--Alteração: Allan Motroni - 30/01/2014
--Motivo da alteração: Alteração do NCM 07031010 para 07031019
--Alteração: Allan Motroni - 04/02/2015
--Motivo da alteração: Acréscimo do novo campo DCO_CORPO_BL
--Alteração: Allan Motroni - Data: 28/05/2015
--Motivo da alteração: Acréscimo do NCM 08101000
--Alteração:<analista> - Data: <data>
--Motivo da alteração:<motivo da alteração>
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONSULTA_RELATORIO_LIMAO" ("DATA_SAIDA", "NAVIO", "VIAGEM", "CONTEINER", "TIPO_CONTEINER", "ARMADOR", "PORTO_DESCARGA", "DESTINO_FINAL", "EXPORTADOR", "TEMPERATURA", "MERCADORIA") AS 
  SELECT DISTINCT item.DEP_TS DATA_SAIDA,
                     navi.NAVI_NOME NAVIO,
                     esca.ESCA_NUMERO_VIAGEM VIAGEM,
                     cont.CONT_NUMERO CONTEINER,
                     isoc.ISOC_CODIGO TIPO_CONTEINER,
                     lopaArm.LOPA_RAZAO_SOCIAL ARMADOR,
                     portD.PORT_NOME PORTO_DESCARGA,
                     portF.PORT_NOME DESTINO_FINAL,
                     lopaExp.LOPA_RAZAO_SOCIAL EXPORTADOR,
                     merc_bhs.MERC_TEMPERATURA TEMPERATURA,
                     ncm.NCM_DESCRICAO MERCADORIA
       FROM TAS.MERCADORIA merc_tas
            INNER JOIN BHS.MERCADORIA merc_bhs
               ON merc_tas.MERC_ID_BHS = merc_bhs.MERC_ID
            INNER JOIN BHS.CONTEINER cont
               ON merc_bhs.MERC_CONT_ID = cont.CONT_ID
            INNER JOIN TOPS.ITEM item
               ON cont.CONT_NUMERO = TRIM (item.ITEM_NO)
            INNER JOIN BHS.ISOCODE isoc
               ON cont.CONT_ISOC_ID = isoc.ISOC_ID
            INNER JOIN BHS.VW_ESCALA esca
               ON merc_bhs.MERC_ESCA_ID_EXP = esca.ESCA_ID
            INNER JOIN BHS.NAVIO navi
               ON esca.ESCA_NAVI_ID = navi.NAVI_ID
            INNER JOIN BHS.ITEM_BOOKING itbo
               ON merc_tas.MERC_ID = itbo.ITBO_MERC_ID_TAS
            INNER JOIN BHS.BOOKING book
               ON itbo.ITBO_BOOK_ID = book.BOOK_ID
            INNER JOIN BHS.PORTO portD
               ON book.BOOK_PORT_ID_POD = portD.PORT_ID
            INNER JOIN BHS.PORTO portF
               ON book.BOOK_PORT_ID_FPOD = portF.PORT_ID
            LEFT JOIN accesscontrol.local_parceiro lopaArm
               ON merc_bhs.MERC_LOPA_ARM_EXP = lopaArm.LOPA_ID
            LEFT JOIN BHS.AMR_NCM_MERCADORIA amnm
               ON merc_bhs.MERC_ID = amnm.AMNM_MERC_ID
            LEFT JOIN BHS.NCM ncm
               ON amnm.AMNM_NCM_ID = ncm.NCM_ID
            INNER JOIN TAS.AMR_MERC_DOCUMENTO ammd
               ON merc_tas.MERC_ID = ammd.MERC_ID
            INNER JOIN TAS.DOCUMENTO docu
               ON ammd.DOCU_ID = docu.DOCU_ID
            INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
               ON AMDM.AMDM_MERC_ID = merc_bhs.MERC_ID
            INNER JOIN BHS.DOCUMENTO DOCU_BHS
               ON AMDM.AMDM_DCO_ID = DOCU_BHS.DCO_ID
            LEFT JOIN accesscontrol.local_parceiro lopaExp
               ON DOCU_BHS.DCO_LOPA_ID = lopaExp.lopa_id
      WHERE     merc_bhs.MERC_STATUS = 'S'
            AND merc_bhs.MERC_DT_CANCEL IS NULL
            AND esca.ESCA_VIAGEM_TOS_EXP = TRIM (item.DEP_CAR)
            AND TRIM (item.DEP_BY) = 'V'
            AND item.DEP_TS <>
                   TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI:SS')
            AND book.BOOK_DTHR_CANCELAMENTO IS NULL
            AND itbo.ITBO_DTHR_CANCELAMENTO IS NULL
            AND ncm.NCM_CODIGO IN
                   ('8053000', '8055000', '08055000', '08044000')
            AND DOCU_BHS.DCO_TIDO_ID IN (68, 106)
   ORDER BY item.DEP_TS, cont.CONT_NUMERO
-----------------------------------------------------------------
--Objeto: VW_CONSULTA_RELATORIO_LIMAO
--Autor: -
--Objetivo: -
--Alterao: Leticia da Costa Oliveira. Data: 21/03/2019.
--Objetivo: Adicionar o ID do documento DUE.
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONTAINER_TOS_EXP" ("MERC_ID_BHS", "ITEM_KEY", "CONTAINER", "STATUS", "ARR_CAR", "ARR_TS", "DEP_TS", "DEP_CAR", "FEL", "GROSS_WEIGHT", "TARE", "NET_WEIGHT", "LINER", "CATEGORY", "BOOKING", "POL", "POD", "FPOD", "VISIT_CODE") AS 
  SELECT
    MERC_ID AS MERC_ID_BHS,
    TRIM(ITEM_KEY) AS ITEM_KEY,
    TRIM(E.ITEM_NO) AS CONTAINER,
    'A' AS STATUS,
    NULL,
    NULL,
    NULL,
    TRIM(E.TFC_CODE) AS DEP_CAR,
    E.FEL AS FEL,
    TO_NUMBER(E.GROSS) * 1000 AS GROSS_WEIGHT,
    TO_NUMBER(E.TARE) * 1000 AS TARE,
    (TO_NUMBER(E.GROSS) * 1000 - TO_NUMBER(E.TARE) * 1000) AS NET_WEIGHT,    
    TRIM(E.LINER_CODE) AS LINER,
    TRIM(E.CATEGORY) AS CATEGORY,
    TRIM(E.BOOK_NO) AS BOOKING,
    TRIM(E.POL) AS POL,
    TRIM(E.POD) AS POD,
    TRIM(E.FIN_DISCH_PORT) AS FPOD,
    NULL AS VISIT_CODE
  FROM TOPS.EDI_ITEM_PRE_ADVICE E
  LEFT OUTER JOIN (
    SELECT
      MERC_ID,
      CONT_NUMERO,
      ESCA_VIAGEM_TOS_EXP,
      MERC_DT_CANCEL
    FROM BHS.MERCADORIA
    INNER JOIN BHS.CONTEINER ON (CONT_ID = MERC_CONT_ID)
    INNER JOIN BHS.ESCALA ON (ESCA_ID = MERC_ESCA_ID_EXP)
  ) ON (CONT_NUMERO = TRIM( E.ITEM_NO) AND ESCA_VIAGEM_TOS_EXP = TRIM(E.TFC_CODE))
  WHERE 
  E.HIST_FLG != 'Y' AND 
  E.CATEGORY IN ('E', 'T')
  AND E.ITEM_KEY NOT IN (SELECT ITEM_KEY FROM TOPS.ITEM)
  UNION
       SELECT
    MERC_ID AS MERC_ID_BHS,
    TRIM(ITEM_KEY) AS ITEM_KEY,
    TRIM(I.ITEM_NO) AS CONTAINER,
    (CASE 
      WHEN TRUNC(I.ARR_TS) = TO_DATE('31/12/1900', 'DD/MM/YYYY') AND TRUNC(I.DEP_TS) = TO_DATE('31/12/1900', 'DD/MM/YYYY') THEN 'A'
      WHEN TRUNC(I.ARR_TS) != TO_DATE('31/12/1900', 'DD/MM/YYYY') AND TRUNC(I.DEP_TS) = TO_DATE('31/12/1900', 'DD/MM/YYYY') THEN 'T'
      WHEN TRUNC(I.ARR_TS) != TO_DATE('31/12/1900', 'DD/MM/YYYY') AND TRUNC(I.DEP_TS) != TO_DATE('31/12/1900', 'DD/MM/YYYY') THEN 'S'
     ELSE 
      'A'
     END
    ) AS STATUS,
    TRIM(I.ARR_CAR) AS ARR_CAR,
    ARR_TS,
    DEP_TS,
    TRIM(DEP_CAR) AS DEP_CAR,
    I.FEL AS FEL,
    TO_NUMBER(I.GROSS) * 1000 AS GROSS_WEIGHT,
    TO_NUMBER(I.TARE) * 1000 AS TARE,
    (TO_NUMBER(I.GROSS) * 1000 - TO_NUMBER(I.TARE) * 1000) AS NET_WEIGHT,    
    TRIM(I.LINE_OPER) AS LINER,
    TRIM(I.CATEGORY) AS CATEGORY,
    TRIM(I.BOOK_NO) AS BOOKING,
    TRIM(I.LOAD_PORT) AS POL,
    TRIM(I.DISCH_PORT) AS POD,
    TRIM(I.FDISCH_PORT) AS FPOD,
    TRIM(I.VISIT_CODE) AS VISIT_CODE
  FROM TOPS.ITEM I
  LEFT OUTER JOIN (
    SELECT
      MERC_ID,
      CONT_NUMERO,
      ESCA_VIAGEM_TOS_EXP,
      MERC_DT_CANCEL
    FROM BHS.MERCADORIA
    INNER JOIN BHS.CONTEINER ON (CONT_ID = MERC_CONT_ID)
    INNER JOIN BHS.ESCALA ON (ESCA_ID = MERC_ESCA_ID_EXP)
  ) ON (CONT_NUMERO = TRIM(I.ITEM_NO) AND ESCA_VIAGEM_TOS_EXP = TRIM(I.DEP_CAR))
  WHERE 
  I.HIST_FLG != 'Y' AND 
  I.CATEGORY IN ('E', 'T')

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONTAINER_TOS_IMP" ("MERC_ID_BHS", "ITEM_KEY", "CONTAINER", "STATUS", "ARR_TS", "ARR_CAR", "DEP_TS", "DEP_CAR", "LINER", "CATEGORY", "FEL", "GROSS_WEIGHT", "TARE", "NET_WEIGHT", "PLACE_OF_DELIVERY", "GMCI", "VISIT_CODE") AS 
  SELECT
    MERC_ID AS MERC_ID_BHS,
    ITEM_KEY,
    TRIM(ITEM_NO) AS CONTAINER,
    (CASE 
      WHEN CATEGORY = 'R' THEN 'S' 
     ELSE (
      CASE 
          WHEN ARR_TS IS NULL AND DEP_TS IS NULL THEN 'A'
          WHEN ARR_TS IS NOT NULL AND DEP_TS IS NULL THEN 'T'
          WHEN ARR_TS IS NOT NULL AND DEP_TS IS NOT NULL THEN 'S'
        ELSE 
          NULL
       END
      )
     END
    ) AS STATUS,
    ARR_TS,
    ARR_CAR,
    DEP_TS,
    TRIM(DEP_CAR) AS DEP_CAR,
    TRIM(LINE_OPER) AS LINER,
    TRIM(CATEGORY) AS CATEGORY,
    FEL,
    GROSS_WEIGHT,
    TARE,
    NET_WEIGHT,
    TRIM(PLACE_OF_DELIVERY) AS PLACE_OF_DELIVERY,
    TRIM(GMCI) AS GMCI,
    TRIM(VISIT_CODE) AS VISIT_CODE
  FROM (
    SELECT
      MERC_ID,
      ITEM_KEY,
      ITEM_NO,
      CASE WHEN TRUNC(ARR_TS) = TO_DATE('31/12/1900', 'DD/MM/YYYY') THEN NULL ELSE ARR_TS END AS ARR_TS,
      CASE WHEN ARR_BY = 'T' THEN TRIM(ARR_CAR_MANIFEST) ELSE TRIM(ARR_CAR) END AS ARR_CAR,
      CASE WHEN TRUNC(DEP_TS) = TO_DATE('31/12/1900', 'DD/MM/YYYY') THEN NULL ELSE DEP_TS END AS DEP_TS,
      DEP_CAR,
      LINE_OPER,
      CATEGORY,
      FEL,
      TO_NUMBER(GROSS) * 1000 AS GROSS_WEIGHT,
      TO_NUMBER(TARE) * 1000 AS TARE,
      (TO_NUMBER(GROSS) * 1000 - TO_NUMBER(TARE) * 1000) AS NET_WEIGHT,
      PLACE_OF_DELIVERY,
      GMCI AS GMCI,
      TRIM(LOAD_PORT) AS POL,
      TRIM(DISCH_PORT) AS POD,
      TRIM(FDISCH_PORT) AS FPOD,
      VISIT_CODE
    FROM TOPS.ITEM
    LEFT OUTER JOIN (
      SELECT
        MERC_ID,
        CONT_NUMERO,
        ESCA_VIAGEM_TOS_IMP
      FROM BHS.MERCADORIA
      INNER JOIN CONTEINER ON (CONT_ID = MERC_CONT_ID)
      INNER JOIN ESCALA ON (ESCA_ID = MERC_ESCA_ID_IMP)
    ) ON (CONT_NUMERO = TRIM(ITEM_NO) AND ESCA_VIAGEM_TOS_IMP = CASE WHEN ARR_BY = 'T' THEN TRIM(ARR_CAR_MANIFEST) ELSE TRIM(ARR_CAR) END)
    WHERE CATEGORY IN ('I', 'T')
  )

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_CONTEINER_IMPORTACAO" ("CTCA_CONSTANTE", "ESCA_ID", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "ESCA_NUMERO", "ESCA_DT_GATE", "MERC_ID", "MERC_CH_VZ", "MERC_LOPA_ARM_EXP", "MERC_LOPA_ARM_IMP", "MERC_PESO_BRUTO", "MERC_TEMPERATURA", "LOPA_RAZAO_SOCIAL", "CONT_NUMERO", "ISOC_TAMANHO", "ISOC_CODIGO", "TRA_COD_DTE", "TRA_NOME", "DOCUMENTOS", "CHEGADA_BARRA") AS 
  SELECT                                                           /*ESCALA*/
         CACA.CTCA_CONSTANTE,
          /*ESCALA*/
          ESCA.ESCA_ID,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,
          ESCA.ESCA_NUMERO,
          ESCA.ESCA_DT_GATE,
          /*MERCADORIA*/
          MERC.MERC_ID,
          MERC.MERC_CH_VZ,
          MERC.MERC_LOPA_ARM_EXP,
          MERC.MERC_LOPA_ARM_IMP,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_TEMPERATURA,
          lopa.lopa_razao_social,
          /*CONTEINER*/
          CONT.CONT_NUMERO,
          /*ISO CODE*/
          ISO.ISOC_TAMANHO,
          ISO.ISOC_CODIGO,
          /*TRA*/
          TR.TRA_COD_DTE,
          TR.TRA_NOME,
          /* DOCUMENTOS*/
          (SELECT documentos
             FROM TABLE (FUNC_DOCUMENTO_MERCADORIA (MERC.MERC_ID)))
             DOCUMENTOS,
          (SELECT VEDE.ACT_PILOT_TS
             FROM TOPS.VESSEL_DETAILS VEDE
            WHERE (VEDE.TFC_CODE_I = ESCA.ESCA_VIAGEM_TOS_IMP))
             CHEGADA_BARRA
     FROM ESCALA ESCA,
          MERCADORIA MERC,
          CONTEINER CONT,
          ISOCODE ISO,
          TRA TR,
          CATEGORIA_CARGA CACA,
          accesscontrol.local_parceiro lopa
    WHERE     ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          --    AND MERC.MERC_ESCA_ID_EXP IS NULL
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_ISOC_ID = ISO.ISOC_ID
          AND MERC.MERC_TRA_ID = TR.TRA_ID(+)
          AND MERC.MERC_CTCA_ID = CACA.CTCA_ID
          AND MERC.MERC_LOPA_ARM_IMP = lopa.lopa_id(+)
----------------------------------------------------------------------
--OBJETO: BHS. VW_CONTEINER_IMPORTACAO 
--OBJETIVO: VIEW BASE PARA O DEMONSTRATIVO DE EXP
--SISTEMA: BHS
--Alteração: BRUNO BRITO - DATA: <02122014>
----------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_DADOS_DT_OPERACAO_TPR" ("CHEGADA_BARRA", "ATRACACAO", "INICIO_OPERACAO", "TERMINO_OPERACAO", "DESATRACACAO", "ESCA_ID") AS 
  SELECT
  CASE WHEN TO_CHAR(VD.ACT_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_PILOT_TS END AS "CHEGADA_BARRA", 
  CASE WHEN TO_CHAR(VD.ACT_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_BERTH_TS END AS "ATRACACAO", 
  CASE WHEN TO_CHAR(VD.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_START_WORK_TS END AS "INICIO_OPERACAO",
  CASE WHEN TO_CHAR(VD.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_END_WORK_TS END AS "TERMINO_OPERACAO",
  CASE WHEN TO_CHAR(VD.ACT_DEP_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_DEP_TS END AS "DESATRACACAO",
  ES.ESCA_ID
FROM 
  TOPS.VESSEL_DETAILS VD
  INNER JOIN BHS.VW_ESCALA ES ON(VD.VES_ID = ES.VES_ID)
-----------------------------------------------------------------
--Objeto: VIEW BHS.VW_DADOS_DT_OPERACAO_TPR
--Criação: Jhordan A. A. Martinez (T2S) - 27/11/2017
--Objetivo: VIEW CRIADA PARA OBTER DO TOS AS DATAS DA OPERAÇÃO PELA VIAGEM
--Sistema: BHS
--Alteração:
--Motivo da alteração:
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_DADOS_OPERACAO_TPR" ("ESCA_ID", "VESSEL", "SERVICE", "VESSEL_OPERATOR", "SIGLA_LINE", "CHEGADA_BARRA", "POB_CHEGADA", "ATRACACAO", "ESCADA_PRONTA", "INICIO_PEA_DESPEA", "PLANO_APROVADO", "INICIO_OPERACAO", "TERMINO_OPERACAO", "ULTIMA_PEA_DESPEA", "POB_SAIDA", "DESATRACACAO", "BERCO", "NUMERO_IMO", "NUMERO_ESCALA", "PLANNER_ARMADOR", "SEQUENCIADO_POR", "AGENTE", "COMMENTS", "JUSTIFICATIVA", "BORDO_ATRACACAO", "AFT_IN", "FWD_IN", "AFT_OUT", "FWD_OUT", "TOTAL_CNTR", "TERNO_PESADO", "MTV_ESPERA_BARRA", "MTV_PERMANENCIA_BERCO", "TOTAL_MOV", "MOV_TAMPA", "QTDE_TEUS", "QTDE_TWIN") AS 
  SELECT DISTINCT
  ES.ESCA_ID AS "ESCA_ID",
  TRIM(VD.VES_NAME) || ' ' || TRIM(VD.IN_VOYAGE) AS "VESSEL", 
  TRIM(VD.VES_SERVICE) AS "SERVICE", 
  TRIM(LINE.FULL_NAME) AS "VESSEL_OPERATOR", 
  TRIM(LINE.LINE_OPER) AS "SIGLA_LINE", 
  CASE WHEN TO_CHAR(VD.ACT_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_PILOT_TS END AS "CHEGADA_BARRA", 
  TATR.TATR_DT_POB_CHEGADA AS "POB_CHEGADA", 
  CASE WHEN TO_CHAR(VD.ACT_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_BERTH_TS END AS "ATRACACAO", 
  TATR.TATR_DT_ESCADA_PRONTA AS "ESCADA_PRONTA",
  TATR.TATR_DT_INICIO_PEA_DESPEA AS "INICIO_PEA_DESPEA",
  TATR.TATR_DT_PLANO_APROVADO AS "PLANO_APROVADO",
  CASE WHEN TO_CHAR(VD.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_START_WORK_TS END AS "INICIO_OPERACAO",
  CASE WHEN TO_CHAR(VD.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_END_WORK_TS END AS "TERMINO_OPERACAO",
  TATR.TATR_DT_ULTIMA_PEA_DESPEA AS "ULTIMA_PEA_DESPEA",
  TATR.TATR_DT_POB_SAIDA AS "POB_SAIDA",
  CASE WHEN TO_CHAR(VD.ACT_DEP_TS, 'DD/MM/YYYY HH24:MI:SS') = '31/12/1900 23:00:00' THEN NULL ELSE VD.ACT_DEP_TS END AS "DESATRACACAO",
  ES.BEAT_DESCRICAO AS "BERCO",
  TRIM(VD.LLOYDS_NO) AS "NUMERO_IMO",
  TRIM(VD.VES_ID) AS "NUMERO_ESCALA",
  TATR.TATR_PLANNER_ARMADOR AS "PLANNER_ARMADOR",
  TATR.TATR_SEQUENCIADO_POR AS "SEQUENCIADO_POR",
  TATR.TATR_AGENTE AS "AGENTE",
  TATR.TATR_COMMENTS AS "COMMENTS",
  TATR.TATR_JUSTIFICATIVA AS "JUSTIFICATIVA",
  DECODE(VD.BTOA_SIDE, 'P', 'BOMBORDO', 'BORESTE') AS "BORDO_ATRACACAO",
  TDFR.TDRF_AFT_IN AS "AFT_IN",
  TDFR.TDRF_FWD_IN AS "FWD_IN",
  TDFR.TDRF_AFT_OUT AS "AFT_OUT",
  TDFR.TDRF_FWD_OUT AS "FWD_OUT",
  TATR.TATR_TOTAL_CNTR AS "TOTAL_CNTR",
  TATR.TATR_TERNO_PESADO AS "TERNO_PESADO",
  ATMA.ATMA_DESC_MOTIVO AS "MTV_ESPERA_BARRA",
  ATMB.ATMB_DESC_MOTIVO AS "MTV_PERMANENCIA_BERCO",
  HSTN.HINA_QTDE_TOTAL_MOV AS "TOTAL_MOV",
  HSTN.HINA_QTDE_MOV_TAMPA AS "MOV_TAMPA",
  HSTN.HINA_QTDE_TEUS AS "QTDE_TEUS",
  HSTN.HINA_QTDE_MOV_TWIN AS "QTDE_TWIN"
FROM 
  TOPS.VESSEL_DETAILS VD
  INNER JOIN BHS.VW_ESCALA ES ON(VD.VES_ID = ES.VES_ID)
  INNER JOIN BHS.TPR_ATRACACAO TATR ON(ES.ESCA_ID = TATR.TATR_ESCA_ID)
  INNER JOIN BHS.TPR_DRAFT TDFR ON(ES.ESCA_ID = TDFR.TDRF_ESCA_ID)
  INNER JOIN TOPS.LINE_OPER LINE ON(VD.LINE_OPER = LINE.LINE_OPER)
  LEFT JOIN BHS.AMR_TPR_MTV_ESPERA_BARRA ATMA ON(ES.ESCA_ID = ATMA.ATMA_ESCA_ID)
  LEFT JOIN BHS.AMR_TPR_MTV_ESPERA_BERCO ATMB ON(ES.ESCA_ID = ATMB.ATMB_ESCA_ID)
  LEFT JOIN BHS.HISTORICO_NAVIO_NEW HSTN ON(ES.ESCA_ID = HSTN.ESCA_ID)
-----------------------------------------------------------------
--Objeto: VIEW BHS.VW_DADOS_OPERACAO_TPR
--Criação: Jhordan A. A. Martinez (T2S) - 07/11/2017
--Objetivo: VIEW CRIADA PARA OBTER OS DADOS DA OPERAÇÃO PELA VIAGEM
--Sistema: BHS
--Alteração:
--Motivo da alteração:
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_DATAS_CNTR" ("CONT_NUMERO", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "TRA_NOME", "TRA_COD_DTE", "LOPA_CNPJ", "DATA_SAIDA", "DATA_DESCARGA", "MERC_ID") AS 
  SELECT CONT.CONT_NUMERO,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,
          TR.TRA_NOME,
          TR.TRA_COD_DTE,
          LOPA.LOPA_CNPJ,
          /*to_date(DECODE (IT.DEP_TS,
                   TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), null,
                   */
          IT.DEP_TS                               /*, 'dd/mm/yyyy hh24:mi'))*/
                   DATA_SAIDA,
          IT.ARR_TS AS DATA_DESCARGA,
          MERC.MERC_ID
     FROM BHS.ESCALA ESCA,
          BHS.MERCADORIA MERC,
          BHS.TRA TR,
          BHS.CONTEINER CONT,
          TOPS.ITEM IT,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_TRA_ID = TR.TRA_ID(+)
          AND LOPA.LOPA_ID_TRA = TO_CHAR (TR.TRA_COD_DTE)
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND (TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP) OR TRIM(IT.ARR_CAR_MANIFEST) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
          
--OBJETO: BHS.VW_DATAS_CNTR
--OBJETIVO: VIEW PARA OBTER DATAS CNTR
--SISTEMA: BHS
--ALTERAÇÃO: PAULO CÉSAR - DATA: <02102014>
--MOTIVO DA ALTERAÇÃO: INCLUIR CONDICAO PARA COMPARAR TAMBEM O CAMPO ARR_CAR_MANIFEST COM A VIAGEM TOS IMP

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_DEAD_LINE" ("DEAD_LINE", "BOOKING") AS 
  SELECT VW.RECV_CTR_CUTOFF_TS DEAD_LINE, B.BOOK_NUMERO_BOOKING BOOKING
     FROM TOPS.VIEW_VES_SCHEDULE VW,
          BHS.BOOKING B,
          BHS.ESCALA E 
    WHERE     TRIM (VW.TFC_EXP) = E.ESCA_VIAGEM_TOS_EXP
          AND B.BOOK_DTHR_CANCELAMENTO IS NULL
          AND B.BOOK_ESCA_ID=E.ESCA_ID

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_DISCHARGE_REPORT" ("CONTAINER", "DAMAGE_TYPE", "DAMAGE_LOCATION", "NAVIO", "DATA_ATRACACAO", "VIAGEM", "IMPEXP") AS 
  SELECT I.ITEM_NO CONTAINER,
          D.DAMAGE_TYPE,
          D.DAmage_location,
          vd.VES_NAME navio,
          VD.ACT_BERTH_TS data_atracacao,
          vD.IN_VOYAGE viagem,
          'IMPORTACAO' IMPEXP
     FROM tops.ITEM I,
          tops.ITEM_DAMAGE ID,
          tops.DAMAGE_CODE D,
          tops.VESSEL_DETAILS VD
    WHERE     I.ITEM_KEY = ID.ITEM_KEY
          AND ID.DAMAGE_CD = D.DAMAGE_CD
          AND I.ARR_CAR = VD.TFC_CODE_I
          AND D.DAMAGE_CD NOT IN ('00','01','02') 
   UNION
   SELECT I.ITEM_NO CONTAINER,
          D.DAMAGE_TYPE,
          D.DAmage_location,
          vd.VES_NAME navio,
          VD.ACT_BERTH_TS data_atracacao,
          vD.OUT_VOYAGE viagem,
          'EXPORTACAO' IMPEXP
     FROM tops.ITEM I,
          tops.ITEM_DAMAGE ID,
          tops.DAMAGE_CODE D,
          tops.VESSEL_DETAILS VD
    WHERE     I.ITEM_KEY = ID.ITEM_KEY
          AND ID.DAMAGE_CD = D.DAMAGE_CD
          AND I.ARR_CAR = VD.TFC_CODE_E
          AND D.DAMAGE_CD NOT IN ('00','01','02')

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_DISCHARGE_REPORT_NEW" ("CONTAINER", "DAMAGE_TYPE", "DAMAGE_LOCATION", "NAVIO", "DATA_ATRACACAO", "VIAGEM", "IMPEXP") AS 
  SELECT 
    I.ITEM_NO CONTAINER,
    D.DAMAGE_TYPE,
    D.DAmage_location,
    vd.VES_NAME navio,
    VD.ACT_BERTH_TS data_atracacao,
    vD.IN_VOYAGE VIAGEM,
    DECODE (I.CATEGORY, 'I', 'IMPORTACAO', 'EXPORTACAO') IMPEXP
FROM 
    tops.ITEM I,
    tops.ITEM_DAMAGE ID,
    tops.DAMAGE_CODE D,
    tops.VESSEL_DETAILS VD
WHERE     
    I.ITEM_KEY = ID.ITEM_KEY
    AND ID.DAMAGE_CD = D.DAMAGE_CD
    AND (I.ARR_CAR = VD.TFC_CODE_I OR I.ARR_CAR = VD.TFC_CODE_E)
    AND D.DAMAGE_CD NOT IN ('00', '01', '02')
    AND I.CATEGORY IN ('I','E')
-------------------------------------------------------------
--Objeto: BHS.VW_DISCHARGE_REPORT_NEW
--Alteração: Allan Motroni - Data: 18/06/2015
--Objetivo: view para retornar os dados da para o Relatório de Descarga
--Sistema: BHS
--Alteração:
--Motivo da alteração:
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_ESCALA" ("ESCA_ID", "ESCA_TRA_ID", "ESCA_BEAT_ID", "ESCA_NUMERO", "ESCA_NAVI_ID", "ESCA_DTHR_PREVISAO_ATRACACAO", "ESCA_DTHR_ATRACACAO", "ESCA_TIPO_TRAFEGO", "ESCA_DTHR_FIM_OPERACAO", "ESCA_DTHR_DESATRACACAO", "ESCA_VIAGEM_TOS_IMP", "ESCA_NUMERO_VIAGEM", "ESCA_RAP", "ESCA_DTHR_INICIO_OPERACAO", "ESCA_DTHR_CANCELADO", "ESCA_VIAGEM_TOS_EXP", "ESCA_DT_GATE", "ESCA_DT_GATE_FRIGO", "ESCA_DT_FECHAMENTO", "ESCA_DT_FECHAMENTO_CALCULADO", "ESCA_DTHR_CHEGADA_EFET", "ESCA_DTHR_DEADLINE", "NAVI_NOME", "NAVI_LLOYD", "TRA_NOME", "TRA_TOS", "TRA_MARGEM", "BEAT_ID", "BEAT_DESCRICAO", "BEAT_CODIGO", "ESCA_DIRECAO_VIAGEM", "ESCA_DT_GATE_TRA", "ESCA_DT_GATE_CARGA_SOLTA", "ESCA_RF_HORAS_ANTES", "ESCA_SE_HORAS_ANTES", "ESCA_PREVISAO_CNTR_CHEIO", "ESCA_PREVISAO_CNTR_VAZIO", "ESCA_PREVISAO_CNTR_TRANSBORDO", "SERVICO", "VES_ID", "LINE_OPER", "QTDE_STS_PREV", "QTDE_EV_PREV", "QTDE_RS_PREV", "QTDE_RTG_PREV", "QTDE_TT_PREV", "PROD_STS_CMPH_PREV", "PROD_STS_GMPH_PREV", "PROD_EV_PREV", "PROD_RS_PREV", "PROD_RTG_PREV", "PROD_TT_PREV", "ESCA_CNTR_EXP_VZ", "ESCA_CNTR_IMP_VZ", "ESCA_CNTR_EXP_OOG", "ESCA_CNTR_IMP_OOG", "ESCA_CNTR_SWIFT", "ESCA_CNTR_HATCH_COVER", "ESCA_PROD_RTG_MOVES", "ESCA_PROD_TT_MOVES") AS 
  SELECT DISTINCT
         E.ESCA_ID,
         E.ESCA_TRA_ID,
         E.ESCA_BEAT_ID,
         E.ESCA_NUMERO,
         E.ESCA_NAVI_ID,
         CASE
            WHEN TRUNC (VD.EST_BERTH_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.EST_BERTH_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_PREVISAO_ATRACACAO,
         CASE
            WHEN TRUNC (VD.ACT_BERTH_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.ACT_BERTH_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_ATRACACAO,
         E.ESCA_TIPO_TRAFEGO,
         CASE
            WHEN TRUNC (VD.ACT_END_WORK_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.ACT_END_WORK_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_FIM_OPERACAO,
         CASE
            WHEN TRUNC (VD.ACT_DEP_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.ACT_DEP_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_DESATRACACAO,
         E.ESCA_VIAGEM_TOS_IMP,
         E.ESCA_NUMERO_VIAGEM,
         E.ESCA_RAP,
         CASE
            WHEN TRUNC (VD.ACT_START_WORK_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.ACT_START_WORK_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_INICIO_OPERACAO,
         E.ESCA_DTHR_CANCELADO,
         E.ESCA_VIAGEM_TOS_EXP,
         E.ESCA_DT_GATE,
         E.ESCA_DT_GATE_FRIGO,
         E.ESCA_DT_FECHAMENTO,
         FN_DATA_FECHAMENTO (
            TO_CHAR (VD.EST_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS'))
            AS ESCA_DT_FECHAMENTO_CALCULADO,
         CASE
            WHEN TRUNC (VD.ACT_PILOT_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.ACT_PILOT_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_CHEGADA_EFET,
         CASE
            WHEN TRUNC (VD.RECV_CTR_CUTOFF_TS) >
                    TO_DATE ('31/12/1900', 'DD/MM/YYYY')
            THEN
               VD.RECV_CTR_CUTOFF_TS
            ELSE
               NULL
         END
            AS ESCA_DTHR_DEADLINE,
         N.NAVI_NOME,
         N.NAVI_LLOYD,
         T.TRA_NOME,
         T.TRA_TOS,
         T.TRA_MARGEM,
         BA.BEAT_ID,
         BA.BEAT_DESCRICAO,
         BA.BEAT_CODIGO,
         E.ESCA_DIRECAO_VIAGEM,
         E.ESCA_DT_GATE_TRA,
         E.ESCA_DT_GATE_CARGA_SOLTA,
         E.ESCA_RF_HORAS_ANTES,
         E.ESCA_SE_HORAS_ANTES,
         E.ESCA_PREVISAO_CNTR_CHEIO,
         E.ESCA_PREVISAO_CNTR_VAZIO,
         E.ESCA_PREVISAO_CNTR_TRANSBORDO,
         VD.VES_SERVICE SERVICO,
         VD.VES_ID,
         VD.LINE_OPER,
         E.ESCA_QTDE_STS QTDE_STS_PREV,
         E.ESCA_QTDE_EV QTDE_EV_PREV,
         E.ESCA_QTDE_RS QTDE_RS_PREV,
         E.ESCA_QTDE_RTG QTDE_RTG_PREV,
         E.ESCA_QTDE_TT QTDE_TT_PREV,
         E.ESCA_PROD_STS_CMPH PROD_STS_CMPH_PREV,
         E.ESCA_PROD_STS_GMPH PROD_STS_GMPH_PREV,
         E.ESCA_PROD_EV PROD_EV_PREV,
         E.ESCA_PROD_RS PROD_RS_PREV,
         E.ESCA_PROD_RTG PROD_RTG_PREV,
         E.ESCA_PROD_TT PROD_TT_PREV,
         E.ESCA_CNTR_EXP_VZ,
         E.ESCA_CNTR_IMP_VZ,
         E.ESCA_CNTR_EXP_OOG,
         E.ESCA_CNTR_IMP_OOG,
         E.ESCA_CNTR_SWIFT,
         E.ESCA_CNTR_HATCH_COVER,
         E.ESCA_PROD_RTG_MOVES,
         E.ESCA_PROD_TT_MOVES
    FROM BHS.ESCALA E
         INNER JOIN BHS.NAVIO N
            ON (N.NAVI_ID = E.ESCA_NAVI_ID)
         INNER JOIN TOPS.VESSELS V
            ON (TRIM (V.LLOYDS_NO) = TRIM (N.NAVI_LLOYD))
         INNER JOIN TOPS.VESSEL_DETAILS VD
            ON (    TRIM (VD.LLOYDS_NO) = TRIM (V.LLOYDS_NO)
                AND (   TRIM (VD.TFC_CODE_E) = E.ESCA_VIAGEM_TOS_EXP
                     OR TRIM (VD.TFC_CODE_I) = E.ESCA_VIAGEM_TOS_IMP))
         LEFT OUTER JOIN BHS.TRA T
            ON (T.TRA_ID = E.ESCA_TRA_ID)
         LEFT OUTER JOIN BHS.BERCO_ATRACACAO BA
            ON (BA.BEAT_ID = E.ESCA_BEAT_ID)
   WHERE N.NAVI_ATIVO = 1
-------------------------------------------------
--Objeto: VW_ESCALA
--'Autor: -  Data: -
--Objetivo: -
--Alterao: Jorge Roberto   Data: 21/10/2015
--Objetivo: Incluso dos campos ESCA_PREVISAO_CNTR_CHEIO, ESCA_PREVISAO_CNTR_VAZIO E ESCA_PREVISAO_CNTR_TRANSBORDO';
--Alterao: Italo Petrucio   Data: 16/02/2016
--Objetivo: Incluso dos campos VES_SERVICE E VES_ID';
--Alterao: Italo Petrucio   Data: 17/08/2016
--Objetivo: Incluso do campo
--Alterao: Italo Petrucio   Data: 16/02/2016
--Objetivo: Incluso dos campos LINE_OPER;
--Data Alterao: 09/01/2017
--Autor: Jorge Roberto
--Motivo: Incluso dos campos ESCA_QTDE_STS, ESCA_QTDE_EVRS, ESCA_QTDE_RTG, ESCA_QTDE_TT, ESCA_PROD_STS, ESCA_PROD_EVRS, ESCA_PROD_RTG, ESCA_PROD_TT
--Alterao: Jorge Roberto   Data: 17/01/2017
--Objetivo: Incluso dos campos ESCA_QTDE_RS e ESCA_PROD_RS e mudana do nome da coluna ESCA_QTDE_EVRS para ESCA_QTDE_EV e ESCA_PROD_EVRS para ESCA_PROD_EV;
--Alterao: Jorge Roberto   Data: 18/01/2017
--Objetivo: Incluso dos campos ESCA_PROD_STS_GMPH e mudana do nome da coluna ESCA_PROD_STS para ESCA_PROD_STS_CMPH;
--Alteração: Felipe (T2S)   Data: 05/09/2017
--Objetivo: Inclusão do campo RECV_CTR_CUTOFF_TS (ESCA_DTHR_DEADLINE).
-------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_GESTAO_VISTA_NAVIO" ("ESCA_ID", "NOME", "VIAGEM", "BERCO_ID", "BERCO", "CHEIO_PREVISTO", "VAZIO_PREVISTO", "CONTEINER_MOVIMENTADO", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "ATRACACAO", "PREVISAO_SAIDA", "SAIDA", "ESCA_DTHR_INICIO_OPERACAO", "ESCA_DTHR_FIM_OPERACAO", "TEMPO_PARADA", "TAMPAS", "VIAGEM_NAVIO", "ESCA_VIAGEM_TOS_IMP", "ESCA_VIAGEM_TOS_EXP", "ESCA_RAP", "ESCA_DTHR_CANCELADO") AS 
  SELECT DISTINCT
          E.ESCA_ID,
          N.NAVI_NOME NOME,
          E.ESCA_NUMERO_VIAGEM VIAGEM,
          E.ESCA_BEAT_ID BERCO_ID,
          BA.BEAT_DESCRICAO BERCO,
          E.ESCA_PREVISAO_CNTR_CHEIO CHEIO_PREVISTO,
          E.ESCA_PREVISAO_CNTR_VAZIO VAZIO_PREVISTO,
          (  (SELECT COUNT (IT.ITEM_KEY)
                FROM TOPS.ITEM IT
               WHERE     TRIM (IT.ARR_CAR) = E.ESCA_VIAGEM_TOS_IMP
                     AND IT.ARR_BY = 'V'
                     AND IT.ARR_TS !=
                            TO_DATE ('31/12/1900 23:00:00',
                                     'DD/MM/YYYY HH24:MI:SS'))
           + (SELECT COUNT (IT.ITEM_KEY)
                FROM TOPS.ITEM IT
               WHERE     TRIM (IT.DEP_CAR) = E.ESCA_VIAGEM_TOS_EXP
                     AND IT.DEP_BY = 'V'
                     AND IT.DEP_TS !=
                            TO_DATE ('31/12/1900 23:00:00',
                                     'DD/MM/YYYY HH24:MI:SS')))
             CONTEINER_MOVIMENTADO,
          CASE
             WHEN VD.EST_PILOT_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (VD.EST_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             PREVISAO_CHEGADA,
          CASE
             WHEN VD.ACT_PILOT_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (TO_CHAR (VD.ACT_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS'),
                         'DD/MM/YYYY HH24:MI:SS')
          END
             CHEGADA,
          CASE
             WHEN VD.EST_BERTH_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (TO_CHAR (VD.EST_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS'),
                         'DD/MM/YYYY HH24:MI:SS')
          END
             PREVISAO_ATRACACAO,
          CASE
             WHEN VD.ACT_BERTH_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (TO_CHAR (VD.ACT_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS'),
                         'DD/MM/YYYY HH24:MI:SS')
          END
             ATRACACAO,
          CASE
             WHEN VD.EST_DEP_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (VD.EST_DEP_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             PREVISAO_SAIDA,
          CASE
             WHEN VD.ACT_DEP_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (TO_CHAR (VD.ACT_DEP_TS, 'DD/MM/YYYY HH24:MI:SS'),
                         'DD/MM/YYYY HH24:MI:SS')
          END
             SAIDA,
          CASE
             WHEN TRUNC (VD.ACT_START_WORK_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.ACT_START_WORK_TS
             ELSE
                NULL
          END
             AS ESCA_DTHR_INICIO_OPERACAO,
          CASE
             WHEN TRUNC (VD.ACT_END_WORK_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.ACT_END_WORK_TS
             ELSE
                NULL
          END
             AS ESCA_DTHR_FIM_OPERACAO,
          (SELECT TRUNC (
                     SUM ( (PAES.AMPE_DTHR_FIM - PAES.AMPE_DTHR_INICIO) * 24),
                     4)
             FROM    BHS.AMR_PARALISACOES_ESCALA PAES
                  INNER JOIN
                     BHS.PARALISACOES PARA
                  ON PAES.AMPE_PARA_ID = PARA.PARA_ID
            WHERE     PAES.AMPE_ESCA_ID = E.ESCA_ID
                  AND PARA.PARA_CONSTANTE IN ('DE', 'PC', 'MT', 'PL')
AND PAES.AMPE_ATIVO = 1)
             TEMPO_PARADA,
          (SELECT COUNT (PE.AMPE_ID)
             FROM BHS.AMR_PARALISACOES_ESCALA PE
            WHERE PE.AMPE_ESCA_ID = E.ESCA_ID AND PE.AMPE_ATIVO = '1'
              AND PE.AMPE_PARA_ID IN (668707, 83))
             TAMPAS,
          VD.VES_ID VIAGEM_NAVIO,
          E.ESCA_VIAGEM_TOS_IMP,
          E.ESCA_VIAGEM_TOS_EXP,
          E.ESCA_RAP,
          E.ESCA_DTHR_CANCELADO
     FROM BHS.ESCALA E
          INNER JOIN BHS.NAVIO N
             ON (N.NAVI_ID = E.ESCA_NAVI_ID)
          INNER JOIN TOPS.VESSELS V
             ON (TRIM (V.LLOYDS_NO) = TRIM (N.NAVI_LLOYD))
          INNER JOIN TOPS.VESSEL_DETAILS VD
             ON (    TRIM (VD.LLOYDS_NO) = TRIM (V.LLOYDS_NO)
                 AND (   TRIM (VD.TFC_CODE_E) = E.ESCA_VIAGEM_TOS_EXP
                      OR TRIM (VD.TFC_CODE_I) = E.ESCA_VIAGEM_TOS_IMP))
          INNER JOIN BHS.BERCO_ATRACACAO BA
             ON (BA.BEAT_ID = E.ESCA_BEAT_ID)
    WHERE     N.NAVI_ATIVO = 1
          AND (   VD.ACT_BERTH_TS !=
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
               OR VD.ACT_PILOT_TS !=
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS'))
          AND VD.ACT_DEP_TS =
                 TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
          AND BA.BEAT_ID IN (276, 280, 281)
          AND VD.VISIT_CANCELLED_TS =
                 TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
/*
COMMENT ON TABLE BHS.VW_GESTAO_VISTA_NAVIO IS 'Data de Criação: 13/10/2015
Autor: Jorge Roberto
Motivo: View criada para pegar os dados de movimentação da operação no navio.
Alteração: Jorge Roberto    Data: 06/11/2015
Motivo: Retirada de parametro para filtro de dados em Homologação.'
Alteração: Jorge Roberto    Data: 28/12/2015
Motivo: Buscar quantidade de tampas pela consulta na tabela BHS.AMR_PARALISACOES_ESCALA;
Alteração: Jorge Roberto     Data: 11/02/2016
Motivo: Inclusão de filtros para os tipos de paradas de abertura e fechamento de tampa.
Alteração: Jorge Roberto     Data: 26/02/2016
Motivo: Inclusão de filtro para pegar apenas as paradas ativas.

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_ID IS 'Id da tabela BHS.ESCALA';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.NOME IS 'Nome do Navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.VIAGEM IS 'Viagem do Navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.BERCO_ID IS 'Id do Berço de Atracação';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.BERCO IS 'Nome do Berço de Atracação';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.CHEIO_PREVISTO IS 'Quantidade de contêineres cheios previstos para movimentação';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.VAZIO_PREVISTO IS 'Quantidade de contêineres vazios previstos para movimentação';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.CONTEINER_MOVIMENTADO IS 'Quantidade de contêineres movimentados';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.PREVISAO_CHEGADA IS 'Data da previsão de chegada do navio na Barra';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.CHEGADA IS 'Data da chegada do navio na barra';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.PREVISAO_ATRACACAO IS 'Data da previsão de atracação do navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ATRACACAO IS 'Data da atracação do navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.PREVISAO_SAIDA IS 'Data da previsão de saída do navio do terminal';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.SAIDA IS 'Data da de saída do navio do terminal';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_DTHR_INICIO_OPERACAO IS 'Data do inicio da operação no navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_DTHR_FIM_OPERACAO IS 'Data do término da operação no navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.TEMPO_PARADA IS 'Tempo de paradas ocorridas durante a operação do navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.TAMPAS IS 'Quantidade de movimentos de abertura e fechamento de tampas';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.VIAGEM_NAVIO IS 'Código da viagem do navio no TOS que faz a relação entre as tabelas ITEM e ITEM_LOCATION';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_VIAGEM_TOS_IMP IS 'Código da viagem de importação do navio que faz relação entre as tabelas BHS.ESCALA e TOPS.ITEM';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_VIAGEM_TOS_EXP IS 'Código da viagem de exportação do navio que faz relação entre as tabelas BHS.ESCALA e TOPS.ITEM';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_RAP IS 'Código da RAP da viagem do navio';

COMMENT ON COLUMN BHS.VW_GESTAO_VISTA_NAVIO.ESCA_DTHR_CANCELADO IS 'Data de cancelamento da viagem';*/

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_GMCI_TOS" ("GMCI_TOS", "CNTR") AS 
  select SUBSTR(TRIM(I.GMCI),1,7) gmci_tos,I.ITEM_NO cntr from tops.item i where hist_flg <> 'Y'

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_IMP_SAIDA_DESPACH_IMPORT" ("IMPORTADOR_CARGA", "DESPACHANTE_CARGA", "CNTR", "ISO", "DT_DESCARGA") AS 
  SELECT  DISTINCT IMPORTADOR.LOPA_RAZAO_SOCIAL IMPORTADOR_CARGA,
          DESPACHANTE.LOPA_RAZAO_SOCIAL DESPACHANTE_CARGA, 
          c.CONT_numero CNTR,
          ISOCODE.ISOC_TAMANHO ISO,
          DESCARGA.ATVI_DTHR_INI DT_DESCARGA
     FROM BHS.MERCADORIA v,
          BHS.DOCUMENTO d,
          BHS.DOCUMENTO DCO_SAIDA,
          BHS.AMR_DOCUMENTO_MERCADORIA dm,
          BHS.AMR_DOCUMENTO ADS,
          BHS.CONTEINER c,
          BHS.TIPO_DOCUMENTO TD,
          ACCESSCONTROL.LOCAL_PARCEIRO DESPACHANTE,
          ACCESSCONTROL.LOCAL_PARCEIRO IMPORTADOR,
          BHS.ISOCODE,
          BHS.ATIVIDADE DESCARGA
    WHERE     V.MERC_ID = DM.AMDM_MERC_ID
          AND DM.AMDM_DCO_ID = D.DCO_ID
          AND V.MERC_CONT_Id = C.CONT_ID
          AND v.MERC_STATUS = 'T'
          AND c.CONT_numero IN
                 (SELECT TRIM (item_no)
                    FROM TOPS.ITEM i
                   WHERE     I.HIST_FLG <> 'Y'
                         AND I.CATEGORY IN ('I')
                         AND I.PLACE_OF_DELIVERY IN
                                ('BTP', 'BTP_', 'DTAP', 'SOBR', 'TRAN'))
          AND D.DCO_ID = ADS.AMDO_DCO_ID_RELACIONADO
          AND D.DCO_LOPA_ID=IMPORTADOR.LOPA_ID
          AND DCO_SAIDA.DCO_LOPA_ID_AG_EMISSORA_CE=DESPACHANTE.LOPA_ID
          AND DCO_SAIDA.DCO_ID = ADS.AMDO_DCO_ID
          AND DCO_SAIDA.DCO_TIDO_ID IN
                 (55, 51, 75, 46, 101, 65, 57, 64, 77, 44, 100, 68)
          AND DCO_SAIDA.DCO_TIDO_ID = TD.TIDO_ID
          AND DCO_SAIDA.DCO_DT_CANCELAMENTO IS NULL
          AND DESCARGA.ATVI_MERC_ID=V.MERC_ID
          AND DESCARGA.ATVI_TIAT_ID=1
          AND C.CONT_ISOC_ID=ISOCODE.ISOC_ID

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_ISO_CODE_TOPO" ("ID", "ISO", "LENGTH", "HEIGHT", "CTR_TYPE", "TARE_KG", "USE_DEFAULT") AS 
  SELECT ROWNUM id,
          TRIM (ISO) ISO,
          LENGTH,
          HEIGHT,
          TRIM (CTR_TYPE) CTR_TYPE,
          (TARE * 1000) tare_kg,
          DECODE (USE_DEFAULT, ' ', NULL, USE_DEFAULT) USE_DEFAULT
     FROM tops.CONVERT_TO_ISO c, tops.sys_codes s
    WHERE s.code_ref(+) = c.CTR_TYPE AND code_tp(+) = 'CTRTYPE'
-------------------------------------------------------------
--Objeto: BHS.VW_ISO_CODE_TOPO
--Criação: Allan Motroni - Data: 18/09/2015
--Objetivo: view para retornar informações de ISOCODEs do TOPO. (TOPS.VIEW_ISO_CODE)
--Sistema: TAS
--Alteração:
--Motivo da alteração:
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_ITEM_SEAL" ("ID", "ITEM_KEY", "SEAL_TYPE", "SEAL_NO", "CRT_TS", "SEAL_FEE", "WHO_PAYS_TYPE", "REMARKS", "SITE_ID", "SEAL_DATE", "SEAL_SEQ", "UPD_CNT", "INVALID_SEAL", "OPER_ID", "SEAL_CHECKED", "STATUS") AS 
  SELECT ROWNUM ID,
          ITEM_KEY,
          SEAL_TYPE,
          SEAL_NO,
          CRT_TS,
          SEAL_FEE,
          WHO_PAYS_TYPE,
          REMARKS,
          SITE_ID,
          SEAL_DATE,
          SEAL_SEQ,
          UPD_CNT,
          INVALID_SEAL,
          OPER_ID,
          SEAL_CHECKED,
          STATUS
     FROM TOPS.ITEM_SEAL
-------------------------------------------------------------
--Objeto: BHS.VW_ITEM_SEAL
--Criação: Allan Motroni - Data: 11/09/2015
--Objetivo: view para retornar os dados da tabela do topo item_seal.
--Sistema: TAS
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_LIB_DOC_CNTRS_TOPS" ("MERC_ID", "CONTEINER", "VIAGEM_EXP", "ARMADOR", "BOOKING", "PORTO_ORIGEM", "PORTO_DESTINO", "PORTO_FINAL_DESCARGA") AS 
  SELECT M.MERC_ID AS MERC_ID,
          C.CONT_NUMERO AS CONTEINER,
          E.ESCA_VIAGEM_TOS_EXP AS VIAGEM_EXP,
          TRIM (TEI.LINER_CODE) AS ARMADOR,
          TRIM (TEI.BOOK_NO) AS BOOKING,
          TRIM (TEI.POL) AS PORTO_ORIGEM,
          TRIM (TEI.POD) AS PORTO_DESTINO,
          TRIM( TEI.FIN_DISCH_PORT) AS PORTO_FINAL_DESCARGA
     FROM BHS.MERCADORIA M
          INNER JOIN BHS.CONTEINER C
             ON (C.CONT_ID = M.MERC_CONT_ID)
          INNER JOIN BHS.ESCALA E
             ON (E.ESCA_ID = M.MERC_ESCA_ID_EXP)
          INNER JOIN TOPS.EDI_ITEM_PRE_ADVICE TEI
             ON (    TEI.ITEM_NO = RPAD (C.CONT_NUMERO, 12, ' ')
                 AND TEI.TFC_CODE = RPAD (E.ESCA_VIAGEM_TOS_EXP, 16, ' '))
    WHERE     TEI.HIST_FLG != 'Y'
          AND TEI.CATEGORY IN ('E', 'T')
          AND NOT EXISTS
                 (SELECT 1
                    FROM TOPS.ITEM I
                   WHERE I.ITEM_KEY = TEI.ITEM_KEY)
   UNION
   SELECT M.MERC_ID AS MERC_ID,
          C.CONT_NUMERO AS CONTEINER,
          E.ESCA_VIAGEM_TOS_EXP AS VIAGEM_EXP,
          TRIM (TI.LINE_OPER) AS ARMADOR,
          TRIM (TI.BOOK_NO) AS BOOKING,
          TRIM (TI.LOAD_PORT) AS PORTO_ORIGEM,
          TRIM (TI.DISCH_PORT) AS PORTO_DESTINO,
          TRIM( TI.FDISCH_PORT) AS PORTO_FINAL_DESCARGA
     FROM BHS.MERCADORIA M
          INNER JOIN BHS.CONTEINER C
             ON (C.CONT_ID = M.MERC_CONT_ID)
          INNER JOIN BHS.ESCALA E
             ON (E.ESCA_ID = M.MERC_ESCA_ID_EXP)
          INNER JOIN TOPS.ITEM TI
             ON (    TRIM (TI.ITEM_NO) = C.CONT_NUMERO
                 AND TRIM (TI.DEP_CAR) = E.ESCA_VIAGEM_TOS_EXP)
    WHERE TI.HIST_FLG != 'Y' AND TI.CATEGORY IN ('E', 'T')
/******************************************************************************
--Objeto: VW_LIB_DOC_CNTRS_TOPS
--Criação: Leonardo Batistela (T2S) - 21/01/2016
--Objetivo: Listar os contêineres do TOPS para a tela Liberação de Documento
--Sistema: BHS
--Alteração: Allan Motroni - 25/04/2017
--Motivo da alteração: - Inclusão dos campos FIN_DISCH_PORT (TOPS.EDI_ITEM_PRE_ADVICE) e FDISCH_PORT (TOPS.ITEM)
--Alteração: -
--Motivo da alteração: -
******************************************************************************/

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_LISTA_ATRACACAO" ("ID", "NAVIO", "NAVIO_ID", "NAVIO_LLOYD", "COMPRIMENTO_NAVIO", "ARMADOR", "VIAGEM", "DATA_INICIO_OPERACAO", "DATA_CANCELAMENTO", "DATA_CHEGADA_PREV", "DATA_CHEGADA_EFET", "DATA_ATRACACAO_PREV", "DATA_ATRACACAO_EFET", "DATA_DESATRACACAO_PREV", "DATA_DESATRACACAO_EFET", "DATA_FIM_OPERACAO", "PONTO", "UNIDADES", "DIRECAO_ATRACACAO", "ESCALA_ID", "DATA_FECHAMENTO", "VIAGEM_TOS_EXP", "VIAGEM_TOS_IMP", "ESCALA", "LOCAL_ATRACACAO_ID", "LOCAL_ATRACACAO_CODIGO_DTE", "LOCAL_ATRACACAO", "TIPO_TRAFEGO", "BEAT_ID", "CODIGO_BERCO_DTE", "DESCRICAO_BERCO", "RAP", "STATUS_OPERACAO", "STATUS", "PREVISAO_EXP", "PREVISAO_IMP", "PREVISAO_REMOCAO", "DIRECAO_VIAGEM", "QTDE_STS", "QTDE_EV", "QTDE_RS", "QTDE_RTG", "QTDE_TT", "PROD_STS_CMPH", "PROD_STS_GMPH", "PROD_EV", "PROD_RS", "PROD_RTG", "PROD_TT", "ESCA_CNTR_EXP_VZ", "ESCA_CNTR_IMP_VZ", "ESCA_CNTR_EXP_OOG", "ESCA_CNTR_IMP_OOG", "ESCA_CNTR_SWIFT", "ESCA_CNTR_HATCH_COVER", "ESCA_PROD_RTG_MOVES", "ESCA_PROD_TT_MOVES", "DATA_BERTH_WINDOW") AS 
  SELECT DISTINCT
          VD.VES_ID AS ID,
          NVL (N.NAVI_NOME, V.VES_NAME) AS NAVIO,
          N.NAVI_ID AS NAVIO_ID,
          NVL (N.NAVI_LLOYD, TRIM (V.LLOYDS_NO)) AS NAVIO_LLOYD,
          V.VES_LEN AS COMPRIMENTO_NAVIO,
          VD.LINE_OPER AS ARMADOR,
          VD.IN_VOYAGE AS VIAGEM,
          VD.ACT_START_WORK_TS AS DATA_INICIO_OPERACAO,
          CASE
             WHEN TRUNC (VD.VISIT_CANCELLED_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.VISIT_CANCELLED_TS
             ELSE
                NULL
          END
             AS DATA_CANCELAMENTO,
          CASE
             WHEN TRUNC (VD.EST_PILOT_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.EST_PILOT_TS
             ELSE
                NULL
          END
             AS DATA_CHEGADA_PREV,
          CASE
             WHEN TRUNC (VD.ACT_PILOT_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.ACT_PILOT_TS
             ELSE
                NULL
          END
             AS DATA_CHEGADA_EFET,
          CASE
             WHEN TRUNC (VD.EST_BERTH_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.EST_BERTH_TS
             ELSE
                NULL
          END
             AS DATA_ATRACACAO_PREV,
          CASE
             WHEN TRUNC (VD.ACT_BERTH_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.ACT_BERTH_TS
             ELSE
                NULL
          END
             AS DATA_ATRACACAO_EFET,
          CASE
             WHEN TRUNC (VD.EST_DEP_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.EST_DEP_TS
             ELSE
                NULL
          END
             AS DATA_DESATRACACAO_PREV,
          CASE
             WHEN TRUNC (VD.ACT_DEP_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.ACT_DEP_TS
             ELSE
                NULL
          END
             AS DATA_DESATRACACAO_EFET,
          CASE
             WHEN TRUNC (VD.ACT_END_WORK_TS) >
                     TO_DATE ('31/12/1900', 'DD/MM/YYYY')
             THEN
                VD.ACT_END_WORK_TS
             ELSE
                NULL
          END
             AS DATA_FIM_OPERACAO,
          VD.PREFER_BERTH_SIDE AS PONTO,
          (  VD.EST_DISCHARGE_EMPTY
           + VD.EST_DISCHARGE_FULL
           + VD.EST_LOAD_EMPTY
           + VD.EST_LOAD_FULL
           + VD.EST_RESTOW)
             AS UNIDADES,
          (CASE
              WHEN VD.BTOA_SIDE = 'P' THEN 'BOMBORDO'
              WHEN VD.BTOA_SIDE = 'S' THEN 'BORESTE'
              ELSE VD.BTOA_SIDE
           END)
             AS DIRECAO_ATRACACAO,
          E.ESCA_ID AS ESCALA_ID,
          TO_CHAR (E.ESCA_DT_FECHAMENTO, 'DD/MM/YYYY HH24:MI:SS')
             AS DATA_FECHAMENTO,
          VD.TFC_CODE_E AS VIAGEM_TOS_EXP,
          VD.TFC_CODE_I AS VIAGEM_TOS_IMP,
          E.ESCA_NUMERO AS ESCALA,
          T.TRA_ID AS LOCAL_ATRACACAO_ID,
          T.TRA_COD_DTE AS LOCAL_ATRACACAO_CODIGO_DTE,
          T.TRA_NOME AS LOCAL_ATRACACAO,
          E.ESCA_TIPO_TRAFEGO AS TIPO_TRAFEGO,
          BA.BEAT_ID,
          BA.BEAT_CODIGO AS CODIGO_BERCO_DTE,
          BA.BEAT_DESCRICAO AS DESCRICAO_BERCO,
          E.ESCA_RAP AS RAP,
          (CASE
              WHEN TRUNC (VD.ACT_DEP_TS) >
                      TO_DATE ('31/12/1900', 'DD/MM/YYYY')
              THEN
                 'Desatracado'
              WHEN TRUNC (VD.ACT_BERTH_TS) >
                      TO_DATE ('31/12/1900', 'DD/MM/YYYY')
              THEN
                 'Operando'
              WHEN TRUNC (VD.ACT_PILOT_TS) >
                      TO_DATE ('31/12/1900', 'DD/MM/YYYY')
              THEN
                 'Na Barra'
              ELSE
                 'Esperado'
           END)
             AS STATUS_OPERACAO,
          (CASE
              WHEN TRUNC (VD.ACT_DEP_TS) >
                      TO_DATE ('31/12/1900', 'DD/MM/YYYY')
              THEN
                 3
              WHEN TRUNC (VD.ACT_BERTH_TS) >
                      TO_DATE ('31/12/1900', 'DD/MM/YYYY')
              THEN
                 2
              WHEN TRUNC (VD.ACT_PILOT_TS) >
                      TO_DATE ('31/12/1900', 'DD/MM/YYYY')
              THEN
                 1
              ELSE
                 0
           END)
             AS STATUS,
          E.ESCA_QT_PREVISAO_EXP AS PREVISAO_EXP,
          E.ESCA_QT_PREVISAO_IMP AS PREVISAO_IMP,
          E.ESCA_QT_PREVISAO_REMOCAO AS PREVISAO_REMOCAO,
          E.ESCA_DIRECAO_VIAGEM AS DIRECAO_VIAGEM,
          E.ESCA_QTDE_STS,
          E.ESCA_QTDE_EV,
          E.ESCA_QTDE_RS,
          E.ESCA_QTDE_RTG,
          E.ESCA_QTDE_TT,
          E.ESCA_PROD_STS_CMPH,
          E.ESCA_PROD_STS_GMPH,
          E.ESCA_PROD_EV,
          E.ESCA_PROD_RS,
          E.ESCA_PROD_RTG,
          E.ESCA_PROD_TT,
          E.ESCA_CNTR_EXP_VZ,
          E.ESCA_CNTR_IMP_VZ,
          E.ESCA_CNTR_EXP_OOG,
          E.ESCA_CNTR_IMP_OOG,
          E.ESCA_CNTR_SWIFT,
          E.ESCA_CNTR_HATCH_COVER,
          E.ESCA_PROD_RTG_MOVES,
          E.ESCA_PROD_TT_MOVES,
          E.ESCA_DTHR_BERTH_WINDOW
     FROM TOPS.VESSELS V
          INNER JOIN TOPS.VESSEL_DETAILS VD
             ON (TRIM (VD.LLOYDS_NO) = TRIM (V.LLOYDS_NO))
          LEFT OUTER JOIN BHS.NAVIO N
             ON (TRIM (N.NAVI_LLOYD) = TRIM (V.LLOYDS_NO))
          LEFT OUTER JOIN BHS.ESCALA E
             ON (    E.ESCA_NAVI_ID = N.NAVI_ID
                 AND TRIM (E.ESCA_NUMERO_VIAGEM) = TRIM (VD.IN_VOYAGE)
                 AND E.ESCA_DTHR_CANCELADO IS NULL)
          LEFT OUTER JOIN BHS.TRA T ON (T.TRA_ID = E.ESCA_TRA_ID)
          LEFT OUTER JOIN BHS.BERCO_ATRACACAO BA
             ON (BA.BEAT_ID = E.ESCA_BEAT_ID)
    WHERE VD.HIST_FLG <> 'Y'
--AND TRUNC (VD.VISIT_CANCELLED_TS) <=
--       TO_DATE ('31/12/1900', 'DD/MM/YYYY');
/* --------------------------------------------------------------------------
--Data Alteracao: 17/04/2015
--Autor: Jorge Roberto
--Motivo: Incluso de verificacao da viagem no History.
--Data Alteracao: 09/01/2017
--Autor: Jorge Roberto
--Motivo: Incluso dos campos ESCA_QTDE_STS, ESCA_QTDE_EVRS, ESCA_QTDE_RTG, ESCA_QTDE_TT, ESCA_PROD_STS, ESCA_PROD_EVRS, ESCA_PROD_RTG, ESCA_PROD_TT
--Alteracao: Jorge Roberto   Data: 17/01/2017
--Objetivo: Incluso dos campos ESCA_QTDE_RS e ESCA_PROD_RS e mudanca do nome da coluna ESCA_QTDE_EVRS para ESCA_QTDE_EV e ESCA_PROD_EVRS para ESCA_PROD_EV;
--Alteracao: Jorge Roberto   Data: 18/01/2017
--Objetivo: Incluso dos campos ESCA_PROD_STS_GMPH e mudanca do nome da coluna ESCA_PROD_STS para ESCA_PROD_STS_CMPH;
--Alteracao: talo Petrucio   Data: 15/06/2018
--Objetivo: Correcao de texto = BOROESTE -> BORESTE;
--Alteracao: Robson Linhares   Data: 28/09/2018
--Objetivo: Incluso de novo campo: data berth window
*/ --------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_LOADING_REPORT" ("RESERVA", "CONTAINER", "PORTO_DESCARGA", "PORTO_DESTINO_FINAL", "CHEIOVAZIO", "TAMANHO", "ALTURA", "TIPO", "PESO_BRUTO", "PESO_LIQUIDO", "TARA", "TEMPERATURA", "LACRE", "DATA_ENTRADA", "DATA_VALIDADE", "ARMADOR", "NAVIO", "EXPORTADOR", "VIAGEM_ARMADOR", "TIPO_DOC", "EXCESSO_ESQUERDO", "EXCESSO_DIREITO", "EXCESSO_FRONTAL", "EXCESSO_TRASEIRA", "EXCESSO_CIMA", "IMO", "ONU", "DATA_AGENDAMENTO", "DATA_SAIDA", "DOCUMENTO", "TOTAL_PESO", "TOTAL_TEUS", "CATEGORIA", "MERC_ID", "DATA_VGM", "STATUSCONTEINER", "LARDOC", "LARCARGA") AS 
  SELECT DISTINCT
          IT.BOOK_NO RESERVA,
          IT.ITEM_NO CONTAINER,
          IT.DISCH_PORT PORTO_DESCARGA,
          IT.LL_DISCH_PORT PORTO_DESTINO_FINAL,
          IT.FEL CHEIOVAZIO,
          TO_CHAR (IT.LENGTH) TAMANHO,
          TO_CHAR (IT.HEIGHT) ALTURA,
          IT.ISO TIPO,
          DECODE (MERC.MERC_PESO_BRUTO,
                  0, TO_CHAR (REPLACE (IT.GROSS, ',', '')),
                  MERC.MERC_PESO_BRUTO)
             PESO_BRUTO,
          DECODE (MERC.MERC_PESO_LIQUIDO,
                  0, IT.CGO_GROSS_WT * 1000,
                  MERC.MERC_PESO_LIQUIDO)
             PESO_LIQUIDO,
          RPAD (REPLACE (TO_CHAR (IT.TARE), '.', ''), 4, '0') TARA,
          TO_CHAR (ITRE.FROZEN_TEMP) TEMPERATURA,
          (SELECT BHS.FUNC_LACRES_TOPS (IT.ITEM_KEY) FROM DUAL) LACRE,
          IT.ARR_TS DATA_ENTRADA,
          NULL DATA_VALIDADE,
          IT.LINE_OPER ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          LOPA.LOPA_RAZAO_SOCIAL EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          0 TIPO_DOC,
          ITOG.OOG_LEFT EXCESSO_ESQUERDO,
          ITOG.OOG_RIGHT EXCESSO_DIREITO,
          ITOG.OOG_FRONT EXCESSO_FRONTAL,
          ITOG.OOG_BACK EXCESSO_TRASEIRA,
          ITOG.OOG_TOP EXCESSO_CIMA,
          (SELECT BHS.FN_IMO_TOPS (IT.ITEM_KEY) FROM DUAL) IMO,
          (SELECT BHS.FN_ONU_TOPS (IT.ITEM_KEY) FROM DUAL) ONU,
          NULL DATA_AGENDAMENTO,
          IT.DEP_TS DATA_SAIDA,
          (SELECT DOCU.DCO_IDENTIFICACAO
             FROM BHS.AMR_DOCUMENTO_MERCADORIA DOME,
                  BHS.DOCUMENTO DOCU,
                  BHS.MERCADORIA MER
            WHERE     MER.MERC_ID = DOME.AMDM_MERC_ID
                  AND DOME.AMDM_DCO_ID = DOCU.DCO_ID
                  AND DOCU.DCO_TIDO_ID IN (68, 106)
                  AND MER.MERC_ID = MERC.MERC_ID
                  AND ROWNUM = 1)
             DOCUMENTO,
          CASE WHEN IT.GROSS IS NULL THEN 0 ELSE TO_NUMBER (IT.GROSS) END
             TOTAL_PESO,
          (CASE
              WHEN IT.LENGTH = 20 OR IT.LENGTH = 30 THEN 1
              WHEN IT.LENGTH = 40 OR IT.LENGTH = 45 THEN 2
           END)
             TOTAL_TEUS,
          CASE
             WHEN IT.CATEGORY = 'E' THEN 'EXPORTA'
             WHEN IT.CATEGORY = 'T' THEN 'TRANSBO'
             WHEN IT.CATEGORY = 'R' THEN 'REMOCAO'
             WHEN IT.CATEGORY = 'I' THEN 'IMPORTA'
          END
             CATEGORIA,
          MERC.MERC_ID MERC_ID,
          MERC.MERC_DT_VGM DATA_VGM,
          '' STATUSCONTEINER,
          'NAO' LARDOC,
          'NAO' LARCARGA
     FROM TOPS.ITEM IT,
          TOPS.ITEM_REEFER ITRE,
          BHS.MERCADORIA MERC,
          BHS.AMR_DOCUMENTO_MERCADORIA DOME,
          BHS.DOCUMENTO DOCU,
          BHS.CONTEINER CONT,
          BHS.VW_ESCALA ESCA,
          TOPS.ITEM_OOG ITOG,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     IT.DEP_CAR = RPAD (ESCA.ESCA_VIAGEM_TOS_EXP, 16, ' ')
          AND TRIM (IT.ITEM_NO) = CONT.CONT_NUMERO
          AND CONT.CONT_ID = MERC.MERC_CONT_ID
          AND MERC.MERC_ID = DOME.AMDM_MERC_ID
          AND DOME.AMDM_DCO_ID = DOCU.DCO_ID
          AND (MERC.MERC_ESCA_ID_EXP = ESCA.ESCA_ID)
          AND DOCU.DCO_TIDO_ID IN (50, 72, 106)
          AND IT.ITEM_KEY = ITOG.ITEM_KEY(+)
          AND IT.ITEM_KEY = ITRE.ITEM_KEY(+)
          AND TRIM (IT.LINE_OPER) = LOPA.BTP_EMP_CONSTANTE
          AND TRIM (IT.VISIT_CODE) IS NULL
   --AND ESCA.ESCA_NUMERO_VIAGEM = '727E'
   UNION ALL
   SELECT DISTINCT
          IT.BOOK_NO RESERVA,
          IT.ITEM_NO CONTAINER,
          IT.DISCH_PORT PORTO_DESCARGA,
          IT.LL_DISCH_PORT PORTO_DESTINO_FINAL,
          IT.FEL CHEIOVAZIO,
          TO_CHAR (IT.LENGTH) TAMANHO,
          TO_CHAR (IT.HEIGHT) ALTURA,
          IT.ISO TIPO,
          TO_CHAR (REPLACE (IT.GROSS, ',', '')) PESO_BRUTO,
          IT.CGO_GROSS_WT PESO_LIQUIDO,
          TO_CHAR (IT.TARE) TARA,
          TO_CHAR (ITRE.FROZEN_TEMP) TEMPERATURA,
          (SELECT BHS.FUNC_LACRES_TOPS (IT.ITEM_KEY) FROM DUAL) LACRE,
          IT.ARR_TS DATA_ENTRADA,
          NULL DATA_VALIDADE,
          IT.LINE_OPER ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          '' EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          0 TIPO_DOC,
          ITOG.OOG_LEFT EXCESSO_ESQUERDO,
          ITOG.OOG_RIGHT EXCESSO_DIREITO,
          ITOG.OOG_FRONT EXCESSO_FRONTAL,
          ITOG.OOG_BACK EXCESSO_TRASEIRA,
          ITOG.OOG_TOP EXCESSO_CIMA,
          (SELECT BHS.FN_IMO_TOPS (IT.ITEM_KEY) FROM DUAL) IMO,
          (SELECT BHS.FN_ONU_TOPS (IT.ITEM_KEY) FROM DUAL) ONU,
          AGEN.AGEN_DT_CRIACAO DATA_AGENDAMENTO,
          IT.DEP_TS DATA_SAIDA,
          '' DOCUMENTO,
          CASE WHEN IT.GROSS IS NULL THEN 0 ELSE TO_NUMBER (IT.GROSS) END
             TOTAL_PESO,
          (CASE
              WHEN IT.LENGTH = 20 OR IT.LENGTH = 30 THEN 1
              WHEN IT.LENGTH = 40 OR IT.LENGTH = 45 THEN 2
           END)
             TOTAL_TEUS,
          CASE
             WHEN IT.CATEGORY = 'E' THEN 'EXPORTA'
             WHEN IT.CATEGORY = 'T' THEN 'TRANSBO'
             WHEN IT.CATEGORY = 'R' THEN 'REMOCAO'
             WHEN IT.CATEGORY = 'I' THEN 'IMPORTA'
          END
             CATEGORIA,
          NULL MERC_ID,
          TO_DATE ('') DATA_VGM,
          '' STATUSCONTEINER,
          'NAO' LARDOC,
          'NAO' LARCARGA
     FROM TOPS.ITEM IT,
          TOPS.ITEM_REEFER ITRE,
          BHS.VW_ESCALA ESCA,
          TOPS.ITEM_OOG ITOG,
          TAS.AGENDAMENTO AGEN
    WHERE     IT.DEP_CAR = RPAD (ESCA.ESCA_VIAGEM_TOS_EXP, 16, ' ')
          AND IT.ITEM_KEY = ITOG.ITEM_KEY(+)
          AND TO_NUMBER (TRIM (IT.VISIT_CODE)) = AGEN.AGEN_ID
          AND IT.ITEM_KEY = ITRE.ITEM_KEY(+)
          AND IT.FEL = 'E'
   --AND ESCA.ESCA_NUMERO_VIAGEM = '727E'
   UNION ALL
   SELECT DISTINCT
          IT.BOOK_NO RESERVA,
          IT.ITEM_NO CONTAINER,
          IT.DISCH_PORT PORTO_DESCARGA,
          IT.LL_DISCH_PORT PORTO_DESTINO_FINAL,
          IT.FEL CHEIOVAZIO,
          TO_CHAR (IT.LENGTH) TAMANHO,
          TO_CHAR (IT.HEIGHT) ALTURA,
          IT.ISO TIPO,
          DECODE (MERC.MERC_PESO_BRUTO,
                  0, TO_CHAR (REPLACE (IT.GROSS, ',', '')),
                  MERC.MERC_PESO_BRUTO)
             PESO_BRUTO,
          DECODE (MERC.MERC_PESO_LIQUIDO,
                  0, IT.CGO_GROSS_WT,
                  MERC.MERC_PESO_LIQUIDO)
             PESO_LIQUIDO,
          RPAD (REPLACE (TO_CHAR (IT.TARE), '.', ''), 4, '0') TARA,
          TO_CHAR (ITRE.FROZEN_TEMP) TEMPERATURA,
          (SELECT FN_LACRES_MERCADORIA (MERC.MERC_ID) FROM DUAL) LACRE,
          IT.ARR_TS DATA_ENTRADA,
          SD.DCO_DT_VALIDADE DATA_VALIDADE,
          IT.LINE_OPER ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          SD.LOPA_RAZAO_SOCIAL EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          SD.TIDO_ID TIPO_DOC,
          ITOG.OOG_LEFT EXCESSO_ESQUERDO,
          ITOG.OOG_RIGHT EXCESSO_DIREITO,
          ITOG.OOG_FRONT EXCESSO_FRONTAL,
          ITOG.OOG_BACK EXCESSO_TRASEIRA,
          ITOG.OOG_TOP EXCESSO_CIMA,
          (SELECT FN_IMO_MERCADORIA (MERC.MERC_ID) FROM DUAL) IMO,
          (SELECT FN_ONU_MERCADORIA (MERC.MERC_ID) FROM DUAL) ONU,
          CASE
             WHEN AGEN.AGEN_DT_CRIACAO IS NULL THEN NULL
             ELSE AGEN.AGEN_DT_CRIACAO
          END
             DATA_AGENDAMENTO,
          IT.DEP_TS DATA_SAIDA,
          SD.DCO_IDENTIFICACAO DOCUMENTO,
          CASE WHEN IT.GROSS IS NULL THEN 0 ELSE TO_NUMBER (IT.GROSS) END
             TOTAL_PESO,
          (CASE
              WHEN IT.LENGTH = 20 OR IT.LENGTH = 30 THEN 1
              WHEN IT.LENGTH = 40 OR IT.LENGTH = 45 THEN 2
           END)
             TOTAL_TEUS,
          CASE
             WHEN IT.CATEGORY = 'E' THEN 'EXPORTA'
             WHEN IT.CATEGORY = 'T' THEN 'TRANSBO'
             WHEN IT.CATEGORY = 'R' THEN 'REMOCAO'
             WHEN IT.CATEGORY = 'I' THEN 'IMPORTA'
          END
             CATEGORIA,
          MERC.MERC_ID MERC_ID,
          MERC.MERC_DT_VGM DATA_VGM,
          '' STATUSCONTEINER,
          'NAO' LARDOC,
          'NAO' LARCARGA
     FROM TOPS.ITEM IT,
          TOPS.ITEM_OOG ITOG,
          TOPS.ITEM_REEFER ITRE,
          BHS.VW_ESCALA ESCA,
          TAS.AGENDAMENTO AGEN,
          TAS.MERCADORIA META,
          BHS.MERCADORIA MERC,
          (SELECT TIDO_ID,
                  DCO_IDENTIFICACAO,
                  DCO_DT_VALIDADE,
                  AMDM_MERC_ID,
                  LOPA_RAZAO_SOCIAL
             FROM BHS.DOCUMENTO
                  INNER JOIN BHS.TIPO_DOCUMENTO
                     ON TIDO_ID = DCO_TIDO_ID
                  INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA
                     ON AMDM_DCO_ID = DCO_ID
                  LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO
                     ON DCO_LOPA_ID = LOPA_ID
            WHERE     TIDO_TIPO_PROCESSO = 'E'
                  AND TIDO_ENTRADA_SAIDA = 'S'
                  AND DCO_DT_CANCELAMENTO IS NULL) SD
    WHERE     IT.DEP_CAR = RPAD (ESCA.ESCA_VIAGEM_TOS_EXP, 16, ' ')
          AND ITOG.ITEM_KEY(+) = IT.ITEM_KEY
          AND IT.ITEM_KEY = ITRE.ITEM_KEY(+)
          AND TRIM (IT.VISIT_CODE) = AGEN.AGEN_ID
          AND AGEN.MERC_ID = META.MERC_ID
          AND META.MERC_ID_BHS = MERC.MERC_ID
          AND SD.AMDM_MERC_ID(+) = MERC.MERC_ID
          AND IT.FEL = 'F'
   --AND ESCA.ESCA_NUMERO_VIAGEM = '727E'
   UNION ALL
   SELECT DISTINCT
          PRAD.BOOK_NO RESERVA,
          PRAD.ITEM_NO CONTAINER,
          PRAD.POD PORTO_DESCARGA,
          PRAD.FIN_DISCH_PORT PORTO_DESTINO_FINAL,
          PRAD.FEL CHEIOVAZIO,
          TO_CHAR (PRAD.LENGTH) TAMANHO,
          TO_CHAR (PRAD.HEIGHT) ALTURA,
          PRAD.ISO TIPO,
          DECODE (MERC.MERC_PESO_BRUTO,
                  0, TO_CHAR (MERC.MERC_PESO_BRUTO_MANIF),
                  MERC.MERC_PESO_BRUTO)
             PESO_BRUTO,
          DECODE (MERC.MERC_PESO_LIQUIDO,
                  0, MERC.MERC_PESO_LIQUIDO_MANIF,
                  MERC.MERC_PESO_LIQUIDO)
             PESO_LIQUIDO,
          RPAD (REPLACE (TO_CHAR (PRAD.TARE), '.', ''), 4, '0') TARA,
          TO_CHAR (ITRE.FROZEN_TEMP) TEMPERATURA,
          (SELECT BHS.FN_LACRES_MERCADORIA (MERC.MERC_ID) FROM DUAL) LACRE,
          NULL DATA_ENTRADA,
          NULL DATA_VALIDADE,
          PRAD.LINER_CODE ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          LOPA.LOPA_RAZAO_SOCIAL EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          DOCU.DCO_TIDO_ID TIPO_DOC,
          ITOG.OOG_LEFT EXCESSO_ESQUERDO,
          ITOG.OOG_RIGHT EXCESSO_DIREITO,
          ITOG.OOG_FRONT EXCESSO_FRONTAL,
          ITOG.OOG_BACK EXCESSO_TRASEIRA,
          ITOG.OOG_TOP EXCESSO_CIMA,
          (SELECT BHS.FN_IMO_MERCADORIA (MERC.MERC_ID) FROM DUAL) IMO,
          (SELECT BHS.FN_ONU_MERCADORIA (MERC.MERC_ID) FROM DUAL) ONU,
          AGEN.AGEN_DT_CRIACAO DATA_AGENDAMENTO,
          NULL DATA_SAIDA,
          DOCU.DCO_IDENTIFICACAO DOCUMENTO,
          CASE WHEN PRAD.GROSS IS NULL THEN 0 ELSE TO_NUMBER (PRAD.GROSS) END
             TOTAL_PESO,
          (CASE
              WHEN PRAD.LENGTH = 20 OR PRAD.LENGTH = 30 THEN 1
              WHEN PRAD.LENGTH = 40 OR PRAD.LENGTH = 45 THEN 2
           END)
             TOTAL_TEUS,
          CASE
             WHEN PRAD.CATEGORY = 'E' THEN 'EXPORTA'
             WHEN PRAD.CATEGORY = 'T' THEN 'TRANSBO'
             WHEN PRAD.CATEGORY = 'R' THEN 'REMOCAO'
             WHEN PRAD.CATEGORY = 'I' THEN 'IMPORTA'
          END
             CATEGORIA,
          MERC.MERC_ID MERC_ID,
          MERC.MERC_DT_VGM DATA_VGM,
          '' STATUSCONTEINER,
          'NAO' LARDOC,
          'NAO' LARCARGA
     FROM TOPS.EDI_ITEM_PRE_ADVICE PRAD,
          TOPS.ITEM_REEFER ITRE,
          TOPS.ITEM_OOG ITOG,
          BHS.CONTEINER CONT,
          BHS.MERCADORIA MERC,
          BHS.VW_ESCALA ESCA,
          TAS.MERCADORIA META,
          TAS.AGENDAMENTO AGEN,
          BHS.AMR_DOCUMENTO_MERCADORIA DOME,
          BHS.DOCUMENTO DOCU,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     PRAD.ITEM_KEY = ITRE.ITEM_KEY(+)
          AND PRAD.ITEM_KEY = ITOG.ITEM_KEY(+)
          AND PRAD.SITE_ID = 'STD'
          AND PRAD.TFC_CODE = RPAD (ESCA.ESCA_VIAGEM_TOS_EXP, 16, ' ')
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MERC.MERC_ID = META.MERC_ID_BHS(+)
          AND META.MERC_ID = AGEN.MERC_ID(+)
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_NUMERO = TRIM (PRAD.ITEM_NO)
          AND MERC.MERC_ID = DOME.AMDM_MERC_ID(+)
          AND DOME.AMDM_DCO_ID = DOCU.DCO_ID(+)
          AND DOCU.DCO_LOPA_ID = LOPA.LOPA_ID(+)
          AND PRAD.IG_FLG <> 'Y'
          AND PRAD.CANCEL_FLG <> 'Y'
          AND MERC.MERC_DT_CANCEL IS NULL
   --AND ESCA.ESCA_NUMERO_VIAGEM = '727E'
   UNION ALL
   SELECT DISTINCT
          NULL RESERVA,
          CONT.CONT_NUMERO CONTAINER,
          LLPOD.port_pentagrama PORTO_DESCARGA,
          FPOD.port_pentagrama PORTO_DESTINO_FINAL,
          MERC.MERC_CH_VZ CHEIOVAZIO,
          TO_CHAR (ISOC.ISOC_TAMANHO) TAMANHO,
          TO_CHAR (ISOC.ISOC_ALTURA) ALTURA,
          ISOC.ISOC_CODIGO TIPO,
          DECODE (MERC.MERC_PESO_BRUTO,
                  0, TO_CHAR (MERC.MERC_PESO_BRUTO_MANIF),
                  MERC.MERC_PESO_BRUTO)
             PESO_BRUTO,
          DECODE (MERC.MERC_PESO_LIQUIDO,
                  0, MERC.MERC_PESO_LIQUIDO_MANIF,
                  MERC.MERC_PESO_LIQUIDO)
             PESO_LIQUIDO,
          RPAD (REPLACE (TO_CHAR (CONT.CONT_TARA), '.', ''), 4, '0') TARA,
          TO_CHAR (MERC.MERC_TEMPERATURA) TEMPERATURA,
          (SELECT BHS.FN_LACRES_MERCADORIA (MERC.MERC_ID) FROM DUAL) LACRE,
          NULL DATA_ENTRADA,
          NULL DATA_VALIDADE,
          LOPA.BTP_EMP_CONSTANTE ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          LOPA.LOPA_RAZAO_SOCIAL EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          DOCU.DCO_TIDO_ID TIPO_DOC,
          EXCE.exce_lat_esq EXCESSO_ESQUERDO,
          EXCE.exce_lat_dir EXCESSO_DIREITO,
          EXCE.exce_frontal EXCESSO_FRONTAL,
          EXCE.exce_traseiro EXCESSO_TRASEIRA,
          EXCE.exce_altura EXCESSO_CIMA,
          (SELECT BHS.FN_IMO_MERCADORIA (MERC.MERC_ID) FROM DUAL) IMO,
          (SELECT BHS.FN_ONU_MERCADORIA (MERC.MERC_ID) FROM DUAL) ONU,
          AGEN.AGEN_DT_CRIACAO DATA_AGENDAMENTO,
          NULL DATA_SAIDA,
          DOCU.DCO_IDENTIFICACAO DOCUMENTO,
          CASE
             WHEN MERC.MERC_PESO_BRUTO IS NULL THEN 0
             ELSE TO_NUMBER (MERC.MERC_PESO_BRUTO)
          END
             TOTAL_PESO,
          (CASE
              WHEN ISOC.ISOC_TAMANHO = 20 OR ISOC.ISOC_TAMANHO = 30 THEN 1
              WHEN ISOC.ISOC_TAMANHO = 40 OR ISOC.ISOC_TAMANHO = 45 THEN 2
           END)
             TOTAL_TEUS,
          CASE
             WHEN CATE.CTCA_COD_TOS = 'E' THEN 'EXPORTA'
             WHEN CATE.CTCA_COD_TOS = 'T' THEN 'TRANSBO'
             WHEN CATE.CTCA_COD_TOS = 'R' THEN 'REMOCAO'
             WHEN CATE.CTCA_COD_TOS = 'I' THEN 'IMPORTA'
          END
             CATEGORIA,
          MERC.MERC_ID MERC_ID,
          MERC.MERC_DT_VGM DATA_VGM,
          '' STATUSCONTEINER,
          'NAO' LARDOC,
          'NAO' LARCARGA
     FROM BHS.CONTEINER CONT,
          BHS.MERCADORIA MERC,
          BHS.VW_ESCALA ESCA,
          TAS.MERCADORIA META,
          TAS.AGENDAMENTO AGEN,
          BHS.AMR_DOCUMENTO_MERCADORIA DOME,
          BHS.DOCUMENTO DOCU,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
          BHS.PORTO LLPOD,
          BHS.PORTO FPOD,
          BHS.ISOCODE ISOC,
          BHS.EXCESSO EXCE,
          BHS.CATEGORIA_CARGA CATE
    WHERE     ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MERC.MERC_ID = META.MERC_ID_BHS(+)
          AND META.MERC_ID = AGEN.MERC_ID(+)
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_ID = DOME.AMDM_MERC_ID
          AND DOME.AMDM_DCO_ID = DOCU.DCO_ID
          AND DOCU.DCO_LOPA_ID = LOPA.LOPA_ID(+)
          AND MERC.MERC_DT_CANCEL IS NULL
          AND MERC.MERC_PORT_ID_LLPOD = LLPOD.PORT_ID(+)
          AND DOCU.DCO_PORT_ID_FPOD = FPOD.PORT_ID(+)
          AND CONT.CONT_ISOC_ID = ISOC.ISOC_ID
          AND MERC.MERC_ID = EXCE.EXCE_MERC_ID(+)
          AND CATE.CTCA_ID = MERC.MERC_CTCA_ID
          AND DOCU.DCO_TIDO_ID IN (50, 72)
          AND MERC.MERC_STATUS = 'A'
          AND CATE.CTCA_CONSTANTE = 'CS_TRANS'
          AND MERC.MERC_CH_VZ IN ('F', 'E')
   UNION ALL
   SELECT DISTINCT
          BOOK.BOOK_NUMERO_BOOKING RESERVA,
          CONT.CONT_NUMERO CONTAINER,
          LLPOD.PORT_PENTAGRAMA PORTO_DESCARGA,
          FPOD.PORT_PENTAGRAMA PORTO_DESTINO_FINAL,
          BOOKS.FEL CHEIOVAZIO,
          TO_CHAR (ISOC.ISOC_TAMANHO) TAMANHO,
          TO_CHAR (ISOC.ISOC_ALTURA) ALTURA,
          ISOC.ISOC_CODIGO TIPO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                ITEMLAR.ITLAR_PESO_BRUTO
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                DECODE (MERC.MERC_PESO_BRUTO,
                        NULL, TO_CHAR (MERC.MERC_PESO_BRUTO_MANIF),
                        MERC.MERC_PESO_BRUTO)
          END
             AS PESO_BRUTO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 20)
             THEN
                TO_NUMBER (ITEMLAR.ITLAR_PESO_BRUTO) - 2800
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 40)
             THEN
                TO_NUMBER (ITEMLAR.ITLAR_PESO_BRUTO) - 4000
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                DECODE (MERC.MERC_PESO_LIQUIDO,
                        NULL, MERC.MERC_PESO_LIQUIDO_MANIF,
                        MERC.MERC_PESO_LIQUIDO)
          END
             AS PESO_LIQUIDO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 20)
             THEN
                '2800'
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 40)
             THEN
                '4000'
             WHEN (AGEN.AGEN_ID IS NOT NULL AND MERC.MERC_ID IS NULL)
             THEN
                '0'
             WHEN (AGEN.AGEN_ID IS NOT NULL AND MERC.MERC_ID IS NOT NULL)
             THEN
                TO_CHAR (MERC.MERC_TARA_MANIF)
          END
             AS TARA,
          TO_CHAR (BOOKS.TEMP_SETTING) TEMPERATURA,
          (SELECT BHS.FUNC_LACRES_TOPS (ITM.ITEM_KEY) FROM DUAL) LACRE,
          ITM.ARR_TS DATA_ENTRADA,
          NULL DATA_VALIDADE,
          BOOKS.LINE_OPER AS ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          '' EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          0 TIPO_DOC,
          ITOG.OOG_LEFT EXCESSO_ESQUERDO,
          ITOG.OOG_RIGHT EXCESSO_DIREITO,
          ITOG.OOG_FRONT EXCESSO_FRONTAL,
          ITOG.OOG_BACK EXCESSO_TRASEIRA,
          ITOG.OOG_TOP EXCESSO_CIMA,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                (SELECT BHS.FN_IMO_TOPS (ITM.ITEM_KEY) FROM DUAL)
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                (SELECT FN_IMO_MERCADORIA (MERC.MERC_ID) FROM DUAL)
          END
             IMO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                (SELECT BHS.FN_ONU_TOPS (ITM.ITEM_KEY) FROM DUAL)
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                (SELECT FN_ONU_MERCADORIA (MERC.MERC_ID) FROM DUAL)
          END
             ONU,
          AGEN.AGEN_DT_CRIACAO DATA_AGENDAMENTO,
          ITM.DEP_TS DATA_SAIDA,
          DCO.DCO_IDENTIFICACAO DOCUMENTO,
          0 TOTAL_PESO,
          (CASE
              WHEN ISOC.ISOC_TAMANHO = 20 OR ISOC.ISOC_TAMANHO = 30 THEN 1
              WHEN ISOC.ISOC_TAMANHO = 40 OR ISOC.ISOC_TAMANHO = 45 THEN 2
           END)
             TOTAL_TEUS,
          'EXPORTA' CATEGORIA,
          MERC.MERC_ID MERC_ID,
          TO_DATE ('') DATA_VGM,
          CASE
             WHEN (AGEN.AGEN_DT_GATE IS NOT NULL AND MERC.MERC_STATUS = 'T')
             THEN
                'DEPOSITADO'
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                'PROGRAMADO'
             WHEN (    CAEF.CAEF_ID IS NOT NULL
                   AND (   (TO_DATE (
                                  TO_CHAR (CAEF.CAEF_DATA, 'DD/MM/YYYY')
                               || ' '
                               || CAEF.CAEF_HORA_FINAL,
                               'DD/MM/YYYY HH24:MI:SS') <=
                               ESCA.ESCA_DTHR_DEADLINE)
                        OR (TO_DATE (
                                  TO_CHAR (CAEF.CAEF_DATA, 'DD/MM/YYYY')
                               || ' '
                               || CAEF.CAEF_HORA_FINAL,
                               'DD/MM/YYYY HH24:MI:SS') <
                               ITEMLAR.ITLAR_DT_LIMITE_ACEITO)))
             THEN
                'AGENDADO'
             ELSE
                ''
          END
             AS STATUSCONTEINER,
          CASE
             WHEN (SELECT COUNT (1)
                     FROM TAS.ITEM_LATE_ARRIVAL ILAR
                    WHERE     ILAR.ITLAR_LAAR_ID = LAAR.LAAR_ID
                          AND ILAR.ITLAR_TIPO = 'DOC'
                          AND ILAR.ITLAR_ID_STATUS = 1) > 0
             THEN
                'SIM'
             ELSE
                'NAO'
          END
             AS LARDOC,
          CASE
             WHEN (SELECT COUNT (1)
                     FROM TAS.ITEM_LATE_ARRIVAL ILAR
                    WHERE     ILAR.ITLAR_LAAR_ID = LAAR.LAAR_ID
                          AND ILAR.ITLAR_TIPO = 'CARGA'
                          AND ILAR.ITLAR_ID_STATUS = 1) > 0
             THEN
                'SIM'
             ELSE
                'NAO'
          END
             AS LARCARGA
     FROM TAS.LATE_ARRIVAL LAAR
          INNER JOIN TAS.ITEM_LATE_ARRIVAL ITEMLAR
             ON LAAR.LAAR_ID = ITEMLAR.ITLAR_LAAR_ID
          INNER JOIN BHS.CONTEINER CONT
             ON LAAR.LAAR_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.BOOKING BOOK
             ON BOOK.BOOK_ID = LAAR.LAAR_BOOK_ID
          INNER JOIN BHS.VW_ESCALA ESCA
             ON LAAR.LAAR_ESCA_ID = ESCA.ESCA_ID
          LEFT JOIN BHS.ITEM_BOOKING ITBOOK
             ON ITBOOK.ITBO_ID = LAAR.LAAR_ITBO_ID
          LEFT JOIN BHS.MERCADORIA MERC
             ON     MERC.MERC_CONT_ID = CONT.CONT_ID
                AND MERC.MERC_ESCA_ID_EXP = ESCA.ESCA_ID
                AND MERC.MERC_CTCA_ID = 4
          INNER JOIN BHS.PORTO LLPOD
             ON BOOK.BOOK_PORT_ID_POD = LLPOD.PORT_ID
          INNER JOIN BHS.PORTO FPOD
             ON BOOK.BOOK_PORT_ID_FPOD = FPOD.PORT_ID
          INNER JOIN BHS.ISOCODE ISOC
             ON CONT.CONT_ISOC_ID = ISOC.ISOC_ID
          INNER JOIN TOPS.BOOKINGS BOOKS
             ON BOOKS.BOOK_NO = RPAD (BOOK.BOOK_NUMERO_BOOKING, 20)
          LEFT JOIN TAS.AGENDAMENTO AGEN
             ON     LAAR.LAAR_MERC_ID = AGEN.MERC_ID
                AND AGEN.AGEN_DT_CANCELAMENTO IS NULL
          LEFT JOIN TAS.CATEGORIA_EFETIVA CAEF
             ON AGEN.CAEF_ID = CAEF.CAEF_ID
          LEFT JOIN TOPS.ITEM ITM
             ON     ITM.BOOK_KEY = BOOKS.BOOK_KEY
                AND TRIM (ITM.ITEM_NO) = CONT.CONT_NUMERO
                AND ITM.DEP_CAR = RPAD (ESCA.ESCA_VIAGEM_TOS_EXP, 16, ' ')
          LEFT JOIN TOPS.ITEM_OOG ITOG
             ON ITM.ITEM_KEY = ITOG.ITEM_KEY
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON AMDM.AMDM_MERC_ID = MERC.MERC_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON DCO.DCO_ID = AMDM.AMDM_DCO_ID AND DCO.DCO_TIDO_ID = 106
    WHERE     ITEMLAR.ITLAR_ID_STATUS = 1
          AND LAAR.LAAR_EMPTY_FULL = 'F'
          AND ITEMLAR.ITLAR_TIPO = 'CARGA'
          AND ITEMLAR.ITLAR_DT_LIMITE_ACEITO > SYSDATE
   UNION ALL
   SELECT DISTINCT
          BOOK.BOOK_NUMERO_BOOKING RESERVA,
          CONT.CONT_NUMERO CONTAINER,
          LLPOD.PORT_PENTAGRAMA PORTO_DESCARGA,
          FPOD.PORT_PENTAGRAMA PORTO_DESTINO_FINAL,
          BOOKS.FEL CHEIOVAZIO,
          TO_CHAR (ISOC.ISOC_TAMANHO) TAMANHO,
          TO_CHAR (ISOC.ISOC_ALTURA) ALTURA,
          ISOC.ISOC_CODIGO TIPO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 20)
             THEN
                '2800'
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 40)
             THEN
                '4000'
             WHEN (AGEN.AGEN_ID IS NOT NULL AND MERC.MERC_ID IS NULL)
             THEN
                '0'
             WHEN (    AGEN.AGEN_ID IS NOT NULL
                   AND AGEN.AGEN_DT_GATE IS NULL
                   AND MERC.MERC_ID IS NOT NULL)
             THEN
                TO_CHAR (ISOC.ISOC_TARA)
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                RPAD (
                   REPLACE (
                      CASE
                         WHEN MERC.MERC_PESO_BRUTO IS NOT NULL
                         THEN
                            MERC.MERC_PESO_BRUTO
                         WHEN MERC.MERC_PESO_BRUTO_MANIF != 0
                         THEN
                            TO_CHAR (MERC.MERC_PESO_BRUTO_MANIF)
                         ELSE
                            TO_CHAR (REPLACE (ITM.GROSS, ',', ''))
                      END,
                      '.',
                      ''),
                   4,
                   '0')
          END
             AS PESO_BRUTO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 20)
             THEN
                TO_NUMBER (NVL (ITEMLAR.ITLAR_PESO_BRUTO, 2800)) - 2800
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 40)
             THEN
                TO_NUMBER (NVL (ITEMLAR.ITLAR_PESO_BRUTO, 4000)) - 4000
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                CASE
                   WHEN MERC.MERC_PESO_LIQUIDO IS NOT NULL
                   THEN
                      MERC.MERC_PESO_LIQUIDO
                   WHEN MERC.MERC_PESO_LIQUIDO_MANIF != 0
                   THEN
                      MERC.MERC_PESO_LIQUIDO_MANIF
                   ELSE
                      NVL (ITM.CGO_GROSS_WT, 0)
                END
             ELSE
                0
          END
             AS PESO_LIQUIDO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 20)
             THEN
                '2800'
             WHEN (AGEN.AGEN_ID IS NULL AND ISOC.ISOC_TAMANHO = 40)
             THEN
                '4000'
             WHEN (AGEN.AGEN_ID IS NOT NULL AND MERC.MERC_ID IS NULL)
             THEN
                '0'
             WHEN (    AGEN.AGEN_ID IS NOT NULL
                   AND AGEN.AGEN_DT_GATE IS NULL
                   AND MERC.MERC_ID IS NOT NULL)
             THEN
                TO_CHAR (ISOC.ISOC_TARA)
             WHEN (AGEN.AGEN_ID IS NOT NULL AND MERC.MERC_ID IS NOT NULL)
             THEN
                RPAD (
                   REPLACE (
                      DECODE (MERC.MERC_TARA_MANIF,
                              NULL, TO_CHAR (ITM.TARE),
                              TO_CHAR (MERC.MERC_TARA_MANIF)),
                      '.',
                      ''),
                   4,
                   '0')
          END
             AS TARA,
          TO_CHAR (BOOKS.TEMP_SETTING) TEMPERATURA,
          (SELECT BHS.FUNC_LACRES_TOPS (ITM.ITEM_KEY) FROM DUAL) LACRE,
          ITM.ARR_TS DATA_ENTRADA,
          NULL DATA_VALIDADE,
          BOOKS.LINE_OPER AS ARMADOR,
          ESCA.NAVI_NOME NAVIO,
          '' EXPORTADOR,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM_ARMADOR,
          0 TIPO_DOC,
          ITOG.OOG_LEFT EXCESSO_ESQUERDO,
          ITOG.OOG_RIGHT EXCESSO_DIREITO,
          ITOG.OOG_FRONT EXCESSO_FRONTAL,
          ITOG.OOG_BACK EXCESSO_TRASEIRA,
          ITOG.OOG_TOP EXCESSO_CIMA,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                (SELECT BHS.FN_IMO_TOPS (ITM.ITEM_KEY) FROM DUAL)
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                (SELECT FN_IMO_MERCADORIA (MERC.MERC_ID) FROM DUAL)
          END
             IMO,
          CASE
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                (SELECT BHS.FN_ONU_TOPS (ITM.ITEM_KEY) FROM DUAL)
             WHEN (AGEN.AGEN_ID IS NOT NULL)
             THEN
                (SELECT FN_ONU_MERCADORIA (MERC.MERC_ID) FROM DUAL)
          END
             ONU,
          AGEN.AGEN_DT_CRIACAO DATA_AGENDAMENTO,
          ITM.DEP_TS DATA_SAIDA,
          '' DOCUMENTO,
          CASE
             WHEN MERC.MERC_PESO_BRUTO IS NULL THEN 0
             ELSE TO_NUMBER (MERC.MERC_PESO_BRUTO)
          END
             TOTAL_PESO,
          (CASE
              WHEN ISOC.ISOC_TAMANHO = 20 OR ISOC.ISOC_TAMANHO = 30 THEN 1
              WHEN ISOC.ISOC_TAMANHO = 40 OR ISOC.ISOC_TAMANHO = 45 THEN 2
           END)
             TOTAL_TEUS,
          'EXPORTA' CATEGORIA,
          MERC.MERC_ID MERC_ID,
          TO_DATE ('') DATA_VGM,
          CASE
             WHEN (AGEN.AGEN_DT_GATE IS NOT NULL AND MERC.MERC_STATUS = 'T')
             THEN
                'DEPOSITADO'
             WHEN (AGEN.AGEN_ID IS NULL)
             THEN
                'PROGRAMADO'
             WHEN (    CAEF.CAEF_ID IS NOT NULL
                   AND (   (TO_DATE (
                                  TO_CHAR (CAEF.CAEF_DATA, 'DD/MM/YYYY')
                               || ' '
                               || CAEF.CAEF_HORA_FINAL,
                               'DD/MM/YYYY HH24:MI:SS') <=
                               ESCA.ESCA_DTHR_DEADLINE)
                        OR (TO_DATE (
                                  TO_CHAR (CAEF.CAEF_DATA, 'DD/MM/YYYY')
                               || ' '
                               || CAEF.CAEF_HORA_FINAL,
                               'DD/MM/YYYY HH24:MI:SS') <
                               ITEMLAR.ITLAR_DT_LIMITE_ACEITO)))
             THEN
                'AGENDADO'
             ELSE
                ''
          END
             AS STATUSCONTEINER,
          CASE
             WHEN (SELECT COUNT (1)
                     FROM TAS.ITEM_LATE_ARRIVAL ILAR
                    WHERE     ILAR.ITLAR_LAAR_ID = LAAR.LAAR_ID
                          AND ILAR.ITLAR_TIPO = 'DOC'
                          AND ILAR.ITLAR_ID_STATUS = 1) > 0
             THEN
                'SIM'
             ELSE
                'NAO'
          END
             AS LARDOC,
          CASE
             WHEN (SELECT COUNT (1)
                     FROM TAS.ITEM_LATE_ARRIVAL ILAR
                    WHERE     ILAR.ITLAR_LAAR_ID = LAAR.LAAR_ID
                          AND ILAR.ITLAR_TIPO = 'CARGA'
                          AND ILAR.ITLAR_ID_STATUS = 1) > 0
             THEN
                'SIM'
             ELSE
                'NAO'
          END
             AS LARCARGA
     FROM TAS.LATE_ARRIVAL LAAR
          INNER JOIN TAS.ITEM_LATE_ARRIVAL ITEMLAR
             ON LAAR.LAAR_ID = ITEMLAR.ITLAR_LAAR_ID
          INNER JOIN BHS.BOOKING BOOK
             ON BOOK.BOOK_ID = LAAR.LAAR_BOOK_ID
          INNER JOIN BHS.ITEM_BOOKING ITBOOK
             ON ITBOOK.ITBO_BOOK_ID = BOOK.BOOK_ID
          INNER JOIN TAS.MERCADORIA MERCTAS
             ON MERCTAS.MERC_ID = ITBOOK.ITBO_MERC_ID_TAS
          INNER JOIN BHS.CONTEINER CONT
             ON CONT.CONT_ID = MERCTAS.MERC_CONT_ID
          INNER JOIN BHS.ISOCODE ISO
             ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.VW_ESCALA ESCA
             ON LAAR.LAAR_ESCA_ID = ESCA.ESCA_ID
          LEFT JOIN BHS.MERCADORIA MERC
             ON     MERC.MERC_ID = MERCTAS.MERC_ID_BHS
                AND MERC.MERC_ESCA_ID_EXP = ESCA.ESCA_ID
          INNER JOIN BHS.PORTO LLPOD
             ON BOOK.BOOK_PORT_ID_POD = LLPOD.PORT_ID
          INNER JOIN BHS.PORTO FPOD
             ON BOOK.BOOK_PORT_ID_FPOD = FPOD.PORT_ID
          INNER JOIN BHS.ISOCODE ISOC
             ON CONT.CONT_ISOC_ID = ISOC.ISOC_ID
          INNER JOIN TOPS.BOOKINGS BOOKS
             ON     BOOKS.BOOK_NO = RPAD (BOOK.BOOK_NUMERO_BOOKING, 20)
                AND BOOKS.ITEM_SIZE = ISO.ISOC_TAMANHO
                AND TRIM (REPLACE (TO_CHAR (BOOKS.HEIGHT), '.', ',')) =
                       TRIM (ISO.ISOC_ALTURA)
                AND BOOKS.ITEM_TYPE = ISO.ISOC_SIGLA
          LEFT JOIN TAS.AGENDAMENTO AGEN
             ON     MERCTAS.MERC_ID = AGEN.MERC_ID
                AND AGEN.AGEN_DT_CANCELAMENTO IS NULL
          LEFT JOIN TAS.CATEGORIA_EFETIVA CAEF
             ON AGEN.CAEF_ID = CAEF.CAEF_ID
          LEFT JOIN TOPS.ITEM ITM
             ON     ITM.BOOK_KEY = BOOKS.BOOK_KEY
                AND TRIM (ITM.ITEM_NO) = CONT.CONT_NUMERO
                AND ITM.DEP_CAR = RPAD (ESCA.ESCA_VIAGEM_TOS_EXP, 16, ' ')
          LEFT JOIN TOPS.ITEM_OOG ITOG
             ON ITM.ITEM_KEY = ITOG.ITEM_KEY
    WHERE     ITEMLAR.ITLAR_ID_STATUS = 1
          AND ITEMLAR.ITLAR_TIPO = 'CARGA'
          AND LAAR.LAAR_EMPTY_FULL = 'E'
          AND ITBOOK.ITBO_DTHR_CANCELAMENTO IS NULL
          AND BOOK.BOOK_DTHR_CANCELAMENTO IS NULL
          AND ITBOOK.ITBO_MERC_ID_TAS IS NOT NULL
          AND ITEMLAR.ITLAR_DT_LIMITE_ACEITO > SYSDATE

/******************************************************************************
      NAME:                VW_LOADING_REPORT
      PURPOSE:    

      Object Name:       VW_LOADING_REPORT
      Data de Alterao:   28/11/2014      
      Username:          j.schich     
      Motivo:            Atualizao ? substituio dos campos peso_bruto e peso_liquido que eram trazido do TOPO e  partir de agora sero trazidos da tabela bhs.mercadoria por solicitao da Juliana do setor de operaes(CARGO READNESS).
      Data de Alterao:   10/08/2015     
      Username:          j.schich     
      Motivo:            Atualizao ? substituio dos campos peso_bruto e peso_liquido que eram
                         trazido do TOPO e  partir de agora sero trazidos da tabela bhs.mercadoria por solicitao 
                         da Eliane do setor de operaes(CARGO READNESS). 
      Data de Alterao:   23/06/2016     
      Username:          r.linhares   
      Motivo:            Incluso de 2 campos da tabela BHS.MERCADORIA: (MERC_ID, MERC.MERC_DT_VGM). O objetivo da alterao foi para atender a demanda do projeto SOLAS VGM.
      Data de Alterao:   08/08/2017     
      Username:          t2s.diego
      Motivo:            Adicionada consulta para exibir contineres de TRANSBORDO, AVISADOS, CHEIOS e COM BL
      Data de Alteracao: 29/08/2017
      Username:          Jorge Roberto
      Motivo:            Atualizacao para ganho de performance, substituida a tabela ESCALA pela View VW_ESCALA, retirado join da tabela ESCALA com a tabela NAVIO, alteracao no join com a tabela ITEM retirando a funcao TRIM e passando a funcao no parametro que nao possui indice, ordenacao na ordem dos joins para que sejam ativos os indices.
      Username:          Cesar Augusto
      Motivo:            Projeto 1487 - Late Arrival
      Username:          GABRIEL
      Motivo:            Alterando o campo tipo de documento da primeira consulta para 0
      Username:          BRENDA  
      Motivo:            Altera??o da busca de IMO/ONU para a ultima consulta - Chamado 68321
      Username:          Leticia da Costa Oliveira.  
      Motivo:            Tratamento de virgula no peso bruto - Chamado 73809.
      Data de Alterao:   29/01/2019     
      Username:          Brenda Morado
      Motivo:            Consulta de peso e tara alterados para lar de vazio (I1901-632
      Data de Alterao:   11/02/2019     
      Username:          Brenda Morado
      Motivo:            Ajuste de v?rgula para peso liquido buscado no Topo (I1901-1793)
      Data de Alterao:   06/03/2019     
      Username:          Brenda Morado
      Motivo:            Inser??o de n?mero da RUC para casos de MRUC (Projeto 1679)
      Data de Alterao:   29/03/2019     
      Username:          Leticia da Costa Oliveira.
      Motivo:            Inser??o do Vazio no relat?rio. (I1903-1651)
      Username:          Cesar Augusto
      Motivo:            Alterando o peso de 4200 para 4000 quando o conteiner for lar e for programado (Regra reajustada pela opera??o) 25-07-2019
*****************************************************************************/

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_LOG_ACCESS_EQUIP" ("REGISTROS", "CHE_ID", "CHE_OPER", "LOGIN_TS", "LOGOUT_TS", "UNEXP_LOGOUT_TS", "DATA_LOG", "DATA_EXPIROU", "CHE_TYPE") AS 
  SELECT OP.EMPLOYEE_NO || ' - ' || OP.FULL_NAME || D.LOGIN_TS registros,
          CHMA.CHE_ID,
          OP.EMPLOYEE_NO || ' - ' || OP.FULL_NAME CHE_OPER,
          D.LOGIN_TS,
          D.LOGOUT_TS,
          D.UNEXP_LOGOUT_TS,
          CASE D.LOGIN_TS
             WHEN '               '
             THEN
                NULL
             ELSE
                   SUBSTR (D.LOGIN_TS, 7, 2)
                || '/'
                || SUBSTR (D.LOGIN_TS, 5, 2)
                || '/'
                || SUBSTR (D.LOGIN_TS, 0, 4)
          END
             DATA_log,
          CASE D.UNEXP_LOGOUT_TS
             WHEN '               '
             THEN
                NULL
             ELSE
                   SUBSTR (D.UNEXP_LOGOUT_TS, 7, 2)
                || '/'
                || SUBSTR (D.UNEXP_LOGOUT_TS, 5, 2)
                || '/'
                || SUBSTR (D.UNEXP_LOGOUT_TS, 0, 4)
          END
             DATA_EXPIROU,
          CHMA.CHE_TYPE
     FROM TOPS.TG2CWT D, TOPS.CHE_MASTER CHMA, TOPS.OPERATOR OP
    WHERE CHMA.CHE_ID = D.CHE_ID AND TRIM (D.CHE_OPER) = TRIM (OP.OPER_NAME)

-------------------------------------------------------------
--Objeto: BILLING. VW_LOG_ACCESS_EQUIP
--Criação: . - Data: 20180304
--Objetivo: view para verificar TT INATIVAS POR CONEXÃO
--Sistema: BBS
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_MENSAGEM24" ("ID", "MERC_ID", "CONTEINER", "CONTEINER_ANTIGO", "VIAGEM_IMP", "VIAGEM_EXP", "MERC_ESCA_ID_EXP_ANTIGA", "MERC_ESCA_ID_IMP_ANTIGA", "BOOK_NUMERO_BOOKING", "ISOC_CODIGO", "MERC_PESO_LIQUIDO", "MERC_PESO_BRUTO", "CONT_TARA", "MERC_CH_VZ", "CONTAINER_CATEGORY", "CATEGORY_CONSTANTE", "MERC_CTCA_NOVA", "MERC_CTCA_ANTIGA", "PORT_OF_LOADING", "PORT_OF_DESTINATION", "PORT_OF_DISCHARGE", "LINER", "BUDL_CNTR_SLAVE1", "BUDL_CNTR_SLAVE2", "BUDL_CNTR_SLAVE3", "BUDL_CNTR_SLAVE4", "BUDL_CNTR_SLAVE5", "BUDL_CNTR_SLAVE6", "BUDL_CNTR_SLAVE7", "EXCE_ALTURA", "EXCE_FRONTAL", "EXCE_LAT_DIR", "EXCE_LAT_ESQ", "EXCE_TRASEIRO", "MERC_TEMPERATURA", "MERC_CO2", "MERC_VENTILACAO", "MERC_UMIDADE", "CLIENTE", "CUSTOMER_TYPE", "TRA_TOS", "TRA_ID_ORIGEM", "NUMERO_GUIA", "MOTIVO_CAPTACAO", "NCM_ID", "NCM_COD_TOS", "AMNM_QUANTIDADE", "IMO_FLASH_POINT", "IMO_COD_MERC_PERIGOSA", "IMO_CLASSE_MERC_PERIGOSA", "USUARIO", "DELIVERY_PLACE", "SPECIAL_HANDLING") AS 
  WITH DADOS_MENSAGEM
        AS (SELECT MPRO_ID,
                   CONT_NUMERO_ANTIGO,
                   TO_NUMBER (MERC_ESCA_ID_EXP_ANTIGA)
                      AS MERC_ESCA_ID_EXP_ANTIGA,
                   TO_NUMBER (MERC_ESCA_ID_IMP_ANTIGA)
                      AS MERC_ESCA_ID_IMP_ANTIGA,
                   TO_NUMBER (MERC_USUA_ID_ALTERACAO)
                      AS MERC_USUA_ID_ALTERACAO,
                   TO_NUMBER (MERC_ID) AS MERC_ID,
                   TO_NUMBER (BOOK_ID) AS BOOK_ID,
                   TO_NUMBER (ISOC_ID) AS ISOC_ID,
                   MERC_PESO_LIQUIDO,
                   MERC_PESO_BRUTO,
                   CONT_TARA,
                   MERC_CH_VZ,
                   TO_NUMBER (CTCA_ID) AS CTCA_ID,
                   TO_NUMBER (CTCA_ID_ANTIGA) AS CTCA_ID_ANTIGA,
                   TO_NUMBER (PORT_ID_POL) AS PORT_ID_POL,
                   TO_NUMBER (PORT_ID_FPOD) AS PORT_ID_FPOD,
                   TO_NUMBER (PORT_ID_POD) AS PORT_ID_POD,
                   TO_NUMBER (LINER) AS LINER,
                   BUDL_CNTR_SLAVE1,
                   BUDL_CNTR_SLAVE2,
                   BUDL_CNTR_SLAVE3,
                   BUDL_CNTR_SLAVE4,
                   BUDL_CNTR_SLAVE5,
                   BUDL_CNTR_SLAVE6,
                   BUDL_CNTR_SLAVE7,
                   MERC_TEMPERATURA,
                   TO_NUMBER (MERC_CO2) AS MERC_CO2,
                   MERC_VENTILACAO,
                   MERC_UMIDADE,
                   TO_NUMBER (CLIENTE_ID) AS CLIENTE_ID,
                   DELIVERY_PLACE,
                   SPECIAL_HANDLING
              FROM (SELECT MP.MPRO_ID, MPF.MPRF_VALOR_FILTRO, MPF.MPRF_FILTRO
                      FROM    BHS.MENSAGENS_A_PROCESSAR_FILTRO MPF
                           INNER JOIN
                              BHS.MENSAGENS_A_PROCESSAR MP
                           ON (MP.MPRO_ID = MPF.MPRF_MPRO_ID)
                     WHERE     MP.MPRO_MESS_ID = 24
                           AND MP.MPRO_STATUS_PROCESSADO = 0) PIVOT (MAX (
                                                                        MPRF_VALOR_FILTRO)
                                                              FOR MPRF_FILTRO
                                                              IN  ('MERC_ID' AS MERC_ID,
                                                                  'CONT_NUMERO_ANTIGO' AS CONT_NUMERO_ANTIGO,
                                                                  'MERC_ESCA_ID_EXP_ANTIGA' AS MERC_ESCA_ID_EXP_ANTIGA,
                                                                  'MERC_ESCA_ID_IMP_ANTIGA' AS MERC_ESCA_ID_IMP_ANTIGA,
                                                                  'MERC_USUA_ID_ALTERACAO' AS MERC_USUA_ID_ALTERACAO,
                                                                  'BOOK_ID' AS BOOK_ID,
                                                                  'ISOC_ID' AS ISOC_ID,
                                                                  'MERC_PESO_LIQUIDO' AS MERC_PESO_LIQUIDO,
                                                                  'MERC_PESO_BRUTO' AS MERC_PESO_BRUTO,
                                                                  'CONT_TARA' AS CONT_TARA,
                                                                  'MERC_CH_VZ' AS MERC_CH_VZ,
                                                                  'CTCA_ID' AS CTCA_ID,
                                                                  'CTCA_ID_ANTIGA' AS CTCA_ID_ANTIGA,
                                                                  'PORT_ID_POL' AS PORT_ID_POL,
                                                                  'PORT_ID_FPOD' AS PORT_ID_FPOD,
                                                                  'PORT_ID_POD' AS PORT_ID_POD,
                                                                  'LINER' AS LINER,
                                                                  'BUDL_CNTR_SLAVE1' AS BUDL_CNTR_SLAVE1,
                                                                  'BUDL_CNTR_SLAVE2' AS BUDL_CNTR_SLAVE2,
                                                                  'BUDL_CNTR_SLAVE3' AS BUDL_CNTR_SLAVE3,
                                                                  'BUDL_CNTR_SLAVE4' AS BUDL_CNTR_SLAVE4,
                                                                  'BUDL_CNTR_SLAVE5' AS BUDL_CNTR_SLAVE5,
                                                                  'BUDL_CNTR_SLAVE6' AS BUDL_CNTR_SLAVE6,
                                                                  'BUDL_CNTR_SLAVE7' AS BUDL_CNTR_SLAVE7,
                                                                  'MERC_TEMPERATURA' AS MERC_TEMPERATURA,
                                                                  'MERC_CO2' AS MERC_CO2,
                                                                  'MERC_VENTILACAO' AS MERC_VENTILACAO,
                                                                  'MERC_UMIDADE' AS MERC_UMIDADE,
                                                                  'CLIENTE_ID' AS CLIENTE_ID,
                                                                  'DELIVERY_PLACE' AS DELIVERY_PLACE,
                                                                  'SPECIAL_HANDLING' AS SPECIAL_HANDLING)))
   SELECT DM.MPRO_ID AS ID,
          M.MERC_ID,
          M.CONTEINER,
          DM.CONT_NUMERO_ANTIGO AS CONTEINER_ANTIGO,
          M.VIAGEM_IMP,
          M.VIAGEM_EXP,
          DM.MERC_ESCA_ID_EXP_ANTIGA,
          DM.MERC_ESCA_ID_IMP_ANTIGA,
          B.BOOK_NUMERO_BOOKING,
          ISO.ISOC_CODIGO,
          DM.MERC_PESO_LIQUIDO,
          DM.MERC_PESO_BRUTO,
          DM.CONT_TARA,
          DM.MERC_CH_VZ,
          CC.CTCA_COD_TOS AS CONTAINER_CATEGORY,
          CC.CTCA_CONSTANTE AS CATEGORY_CONSTANTE,
          DM.CTCA_ID AS MERC_CTCA_NOVA,
          DM.CTCA_ID_ANTIGA AS MERC_CTCA_ANTIGA,
          POL.PORT_PENTAGRAMA AS PORT_OF_LOADING,
          FPOD.PORT_PENTAGRAMA AS PORT_OF_DESTINATION,
          POD.PORT_PENTAGRAMA AS PORT_OF_DISCHARGE,
          LINER.BTP_EMP_CONSTANTE AS LINER,
          DM.BUDL_CNTR_SLAVE1,
          DM.BUDL_CNTR_SLAVE2,
          DM.BUDL_CNTR_SLAVE3,
          DM.BUDL_CNTR_SLAVE4,
          DM.BUDL_CNTR_SLAVE5,
          DM.BUDL_CNTR_SLAVE6,
          DM.BUDL_CNTR_SLAVE7,
          E.EXCE_ALTURA,
          E.EXCE_FRONTAL,
          E.EXCE_LAT_DIR,
          E.EXCE_LAT_ESQ,
          E.EXCE_TRASEIRO,
          DM.MERC_TEMPERATURA,
          DM.MERC_CO2,
          DM.MERC_VENTILACAO,
          DM.MERC_UMIDADE,
          CLIENTE.BTP_EMP_CONSTANTE AS CLIENTE,
          C.CUST_TYPE AS CUSTOMER_TYPE,
          M.TRA_TOS,
          M.TRA_ID_ORIGEM,
          (SELECT AMGM_NUMERO_GUIA
             FROM    BHS.AMR_GUIA_MERCADORIA
                  INNER JOIN
                     BHS.TIPO_GUIA
                  ON (TIGU_ID = AMGM_TIGU_ID)
            WHERE     AMGM_MERC_ID = M.MERC_ID
                  AND AMGM_STATUS = 1
                  AND TIGU_CONSTANTE = 'GMCI')
             AS NUMERO_GUIA,
          (SELECT MAX (MOCA_SIGLA)
             FROM BHS.MOTIVO_CAPTACAO
                  INNER JOIN BHS.DOCUMENTO
                     ON (DCO_MOCA_ID = MOCA_ID)
                  INNER JOIN BHS.AMR_DOCUMENTO_MERCADORIA
                     ON (AMDM_DCO_ID = DCO_ID)
                  INNER JOIN BHS.TIPO_DOCUMENTO
                     ON (TIDO_ID = DCO_TIDO_ID)
            WHERE TIDO_CONSTANTE = 'BL' AND AMDM_MERC_ID = M.MERC_ID)
             AS MOTIVO_CAPTACAO,
          N.NCM_ID,
          N.NCM_COD_TOS,
          NM.AMNM_QUANTIDADE,
          IMO.IMO_FLASH_POINT,
          IMO.IMO_COD_MERC_PERIGOSA,
          IMO.IMO_CLASSE_MERC_PERIGOSA,
          NVL (U.USUA_LOGIN, 'HOST') AS USUARIO,
          DM.DELIVERY_PLACE,
          DM.SPECIAL_HANDLING
     FROM DADOS_MENSAGEM DM
          INNER JOIN BHS.VW_MERCADORIA M
             ON (M.MERC_ID = DM.MERC_ID)
          LEFT OUTER JOIN ACCESSCONTROL.USUARIO U
             ON (U.USUA_ID = DM.MERC_USUA_ID_ALTERACAO)
          LEFT OUTER JOIN BHS.BOOKING B
             ON (B.BOOK_ID = DM.BOOK_ID)
          LEFT OUTER JOIN BHS.ISOCODE ISO
             ON (ISO.ISOC_ID = DM.ISOC_ID)
          LEFT OUTER JOIN BHS.CATEGORIA_CARGA CC
             ON (CC.CTCA_ID = DM.CTCA_ID)
          LEFT OUTER JOIN BHS.PORTO POL
             ON (POL.PORT_ID = DM.PORT_ID_POL)
          LEFT OUTER JOIN BHS.PORTO FPOD
             ON (FPOD.PORT_ID = DM.PORT_ID_FPOD)
          LEFT OUTER JOIN BHS.PORTO POD
             ON (POD.PORT_ID = DM.PORT_ID_POD)
          LEFT OUTER JOIN ACCESSCONTROL.LOCAL_PARCEIRO LINER
             ON (LINER.LOPA_ID = DM.LINER)
          LEFT OUTER JOIN ACCESSCONTROL.LOCAL_PARCEIRO CLIENTE
             ON (CLIENTE.LOPA_ID = DM.CLIENTE_ID)
          LEFT OUTER JOIN TOPS.VIEW_CUSTOMER C
             ON (C.CUST_REG_NO = CLIENTE.BTP_EMP_CONSTANTE)
          LEFT OUTER JOIN BHS.EXCESSO E
             ON (E.EXCE_MERC_ID = DM.MERC_ID)
          LEFT OUTER JOIN BHS.AMR_NCM_MERCADORIA NM
             ON (NM.AMNM_MERC_ID = DM.MERC_ID)
          LEFT OUTER JOIN BHS.NCM N
             ON (N.NCM_ID = NM.AMNM_NCM_ID)
          LEFT OUTER JOIN BHS.AMR_IMO_MERCADORIA IM
             ON (IM.AMIM_MERC_ID = DM.MERC_ID)
          LEFT OUTER JOIN BHS.IMO IMO
             ON (IMO.IMO_ID = IM.AMIM_IMO_ID)
--------------------------------------------------------------------------------------------
--Criação: 
--Objetivo: LER MENSAGEM A PROCESSAR QUANDO HOUVER ATUALIZAÇÕES DOS DADOS DE UMA MERCADORIA
--Sistema: INTEGRADOR HOST-TOS
--Alteração: Allan Motroni - 03/02/2017
--Motivo da alteração: - Incluir campo Special Handling.
--Alteração: 
--Motivo da alteração: 
--------------------------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_MOV_EFETIVA" ("VIAGEMTOS", "EMB_CHEIO", "EMB_VAZIO", "DESC_VAZIO", "DESC_CHEIO", "TRANS_VAZIO", "TRANS_CHEIO") AS 
  SELECT TB1.ViagemTOS,
      SUM(TB1.EmbVazio) as Emb_Cheio,
      SUM(TB1.EmbCheio) as Emb_Vazio,
      SUM(TB2.DesVazio) as Desc_Vazio,
      SUM(TB2.DesCheio) as Desc_Cheio,
      SUM(TB1.TrbVazio + TB2.TrbVazio) as Trans_Vazio,
      SUM(TB1.TrbCheio + TB2.TrbCheio) as Trans_Cheio
FROM(SELECT V.dep_CAR as ViagemTOS,
       SUM( CASE
             WHEN V.CATEGORY='E' and V.FEL='E' THEN 1
             ELSE 0
           END) AS EmbVazio,
       SUM( CASE
             WHEN V.CATEGORY='E' and V.FEL='F' THEN 1
             ELSE 0
           END) AS EmbCheio,
       SUM( CASE
             WHEN V.CATEGORY='T' and V.FEL='E' THEN 1
             ELSE 0
           END) AS TrbVazio,
       SUM( CASE
             WHEN V.CATEGORY='T' and V.FEL='F' THEN 1
             ELSE 0
           END) AS TrbCheio
    FROM TOPS.item v 
    GROUP BY V.dep_CAR) TB1
JOIN
(SELECT V.ARR_CAR as ViagemTOS,       
      SUM( CASE
             WHEN V.CATEGORY='I' and V.FEL='E' THEN 1
             ELSE 0
           END) AS DesVazio,
      SUM( CASE
             WHEN V.CATEGORY='I' and V.FEL='F' THEN 1
             ELSE 0
           END) AS DesCheio,
       SUM( CASE
             WHEN V.CATEGORY='T' and V.FEL='E' THEN 1
             ELSE 0
           END) AS TrbVazio,
       SUM( CASE
             WHEN V.CATEGORY='T' and V.FEL='F' THEN 1
             ELSE 0
           END) AS TrbCheio
       
FROM TOPS.item v 
GROUP BY V.ARR_CAR) TB2
ON TB1.ViagemTOS = TB2.ViagemTOS
--where TB1.ViagemTOS = 'MSCALGSS437R'
group by TB1.ViagemTOS


  CREATE OR REPLACE FORCE VIEW "BHS"."VW_MOVES_CODESP" ("ESCA_VIAGEM_TOS_IMP", "ITEM_NO", "ACTION_TS", "MERC_CH_VZ", "NAVI_NOME", "ESCA_NUMERO_VIAGEM", "CGO_GROSS_WT", "GROSS", "ISOC_TARA", "MOVE_TYPE", "MESS_ID", "CATEGORY", "LENGTH", "ESCA_ID") AS 
  SELECT DISTINCT ESCA.ESCA_VIAGEM_TOS_imp,
                   IT.ITEM_NO,
                   TH.ACTION_TS,
                   MERC.MERC_CH_VZ,
                   ESCA.NAVI_NOME,
                   ESCA.ESCA_NUMERO_VIAGEM,
                   MERC.MERC_PESO_LIQUIDO CGO_GROSS_WT,
                   MERC.MERC_PESO_BRUTO GROSS,
                   ISO.ISOC_TARA,
                   TH.MOVE_TYPE,
                   TH.MESS_ID,
                   IT.CATEGORY,
                   IT.LENGTH,ESCA.ESCA_ID
     FROM BHS.VW_ESCALA ESCA,
          BHS.THALT_BHS TH,
          TOPS.ITEM IT,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          BHS.ISOCODE ISO
    WHERE     TH.CTR_KEY = IT.ITEM_KEY
          AND ISO.ISOC_ID = CONT.CONT_ISOC_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND CONT.CONT_ID = MERC.MERC_CONT_ID
          AND IT.SITE_ID = 'STD'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND MESS_ID IN (4)
          AND ESCA.VES_ID = TRIM (TH.VES_ID)
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
   UNION
   SELECT DISTINCT ESCA.ESCA_VIAGEM_TOS_imp,
                   IT.ITEM_NO,
                   TH.ACTION_TS,
                   MERC.MERC_CH_VZ,
                   ESCA.NAVI_NOME,
                   ESCA.ESCA_NUMERO_VIAGEM,
                   MERC.MERC_PESO_LIQUIDO CGO_GROSS_WT,
                   MERC.MERC_PESO_BRUTO GROSS,
                   ISO.ISOC_TARA,
                   TH.MOVE_TYPE,
                   TH.MESS_ID,
                   IT.CATEGORY,
                   IT.LENGTH,ESCA.ESCA_ID
     FROM BHS.VW_ESCALA ESCA,
          BHS.THALT_BHS TH,
          TOPS.ITEM IT,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          BHS.ISOCODE ISO
    WHERE     TH.CTR_KEY = IT.ITEM_KEY
          AND ISO.ISOC_ID = CONT.CONT_ISOC_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND CONT.CONT_ID = MERC.MERC_CONT_ID
          AND IT.SITE_ID = 'STD'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MESS_ID IN (3, 4)
          AND ESCA.VES_ID = TRIM (TH.VES_ID)
   UNION
   SELECT DISTINCT ESCA.ESCA_VIAGEM_TOS_imp,
                   IT.ITEM_NO,
                   TH.ACTION_TS,
                   MERC.MERC_CH_VZ,
                   ESCA.NAVI_NOME,
                   ESCA.ESCA_NUMERO_VIAGEM,
                   MERC.MERC_PESO_LIQUIDO CGO_GROSS_WT,
                   MERC.MERC_PESO_BRUTO GROSS,
                   ISO.ISOC_TARA,
                   TH.MOVE_TYPE,
                   TH.MESS_ID,
                   IT.CATEGORY,
                   IT.LENGTH,ESCA.ESCA_ID
     FROM BHS.VW_ESCALA ESCA,
          BHS.THALT_BHS TH,
          TOPS.ITEM IT,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          BHS.ISOCODE ISO
    WHERE     TH.CTR_KEY = IT.ITEM_KEY
          AND ISO.ISOC_ID = CONT.CONT_ISOC_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND CONT.CONT_ID = MERC.MERC_CONT_ID
          AND IT.SITE_ID = 'STD'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (   ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
               OR ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP)
          AND MESS_ID IN (11, 12, 13)
          AND ESCA.VES_ID = TRIM (TH.VES_ID)
-------------------------------------------------------------
--Objeto: BHS.VW_MOVES_CODESP
--Criação: . - Data: 08062016
--Objetivo: view para verificar moves.
--Sistema: SGR
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_PLANEJAMENTO_ARMAZEM" ("AMRX_DT_CRIACAO", "AMRX_SPECIAL_HANDLING_XRAY", "AMRX_SPECIAL_HANDLING_REPE", "AMRX_SPECIAL_HANDLING_POSI", "MERC_ID", "REPESAGEM_TAS", "IMO", "EXCESSO", "MERC_TEMPERATURA", "ITEM_KEY", "CONT_NUMERO", "ISOC_CODIGO", "DT_DESCARGA_GATEIN", "MERC_CH_VZ", "CTCA_ID", "CTCA_DESCRICAO", "VIAGEM_EXP", "ESCA_VIAGEM_TOS_EXP", "VIAGEM_IMP", "ESCA_VIAGEM_TOS_IMP", "MERC_PESO_LIQUIDO_MANIF", "MERC_PESO_BRUTO", "MERC_PESO_LIQUIDO", "MOCA_DESCRICAO", "MOCA_ID", "MOCA_SIGLA", "CAMINHO_XRAY", "STK_CLASS", "STACK", "X", "Y", "Z", "CHE_ID", "AMRX_ID", "AMRX_DELIVERY_PLACE", "PLACE_OF_DELIVERY", "LOPA_RAZAO_SOCIAL", "DCO_ID", "DCO_IDENTIFICACAO", "TIPO_ID", "TIPO_HDL_CODE", "TIPO_DESCRICAO", "POSI_DT_POSICIONADO", "POSI_DT_VISTORIADO", "POSI_ID", "AMPP_ID", "AMPP_DT_FINALIZA_POSI", "AMPP_DT_FINALIZA_POSI_OK") AS 
  SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          AMRX_SPECIAL_HANDLING_POSI,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          '' CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          AMRX.AMRX_DELIVERY_PLACE,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO,
          TIPO.TIPO_ID,
          TIPO.TIPO_HDL_CODE,
          TIPO.TIPO_DESCRICAO,
          POSI.POSI_DT_POSICIONADO,
          POSI.POSI_DT_VISTORIADO,
          POSI.POSI_ID,
          AMPP.AMPP_ID,
          AMPP.AMPP_DT_FINALIZA_POSI,
          AMPP.AMPP_DT_FINALIZA_POSI_OK
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT
             ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO
             ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA
             ON MERC.MERC_CTCA_ID = CTCA.CTCA_ID
          INNER JOIN TAS.POSICIONAMENTO POSI
             ON MERC.MERC_ID = POSI.POSI_MERC_ID_BHS
          INNER JOIN TAS.TIPO_POSICIONAMENTO TIPO
             ON POSI.TIPO_ID = TIPO.TIPO_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          INNER JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          INNER JOIN TOPS.ITEM_LOCATION ITLO
             ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          /*LEFT JOIN TOPS.VIEW_CHE_MASTER CHE
             ON ITLO.CHE_ID = CHE.CHE_ID*/
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IN (1, 2, 3)
                AND DCO.DCO_TIDO_ID = 50
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          INNER JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
          INNER JOIN BHS.AMR_PLANEJAMENTO_POSICIONAR AMPP
             ON AMRX.AMRX_ID = AMPP.AMPP_AMRX_ID
          INNER JOIN BHS.LOCALIZACAO LOCA
             ON (    TRIM (ITLO.STACK) = LOCA.LOCA_QUADRA
                 AND TRIM (ITLO.X) = LOCA.LOCA_PILHA
                 AND TRIM (ITLO.Y) = LOCA.LOCA_FILA
                 AND TRIM (ITLO.Z) = LOCA.LOCA_ALTURA)
    WHERE     MERC.MERC_STATUS = 'T'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (2, 3, 5)
          AND TRIM (ITLO.STK_PCH) = 'C'
          AND ITEM.HIST_FLG IN ('N', ' ')
          AND POSI.POSI_DT_CANCELADO IS NULL
          AND POSI.POSI_DT_FINALIZADO IS NULL
          AND POSI.POSI_DT_CONFIRMACAO IS NOT NULL
          AND POSI.POSI_DT_VISTORIADO IS NOT NULL
          AND AMPP.AMPP_DT_CANCEL_POSI IS NULL
          AND AMPP.AMPP_DT_FINALIZA_POSI_OK IS NULL
          AND TRIM (ITLO.STK_CLASS) = 'Y'
          AND LOCA.LOCA_ARMAZEM = 1
   UNION ALL
   SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          AMRX_SPECIAL_HANDLING_POSI,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          '' CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          AMRX.AMRX_DELIVERY_PLACE,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO,
          TIPO.TIPO_ID,
          TIPO.TIPO_HDL_CODE,
          TIPO.TIPO_DESCRICAO,
          POSI.POSI_DT_POSICIONADO,
          POSI.POSI_DT_VISTORIADO,
          POSI.POSI_ID,
          AMPP.AMPP_ID,
          AMPP.AMPP_DT_FINALIZA_POSI,
          AMPP.AMPP_DT_FINALIZA_POSI_OK
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT
             ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO
             ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA
             ON MERC.MERC_CTCA_ID = CTCA.CTCA_ID
          INNER JOIN TAS.POSICIONAMENTO POSI
             ON MERC.MERC_ID = POSI.POSI_MERC_ID_BHS
          INNER JOIN TAS.TIPO_POSICIONAMENTO TIPO
             ON POSI.TIPO_ID = TIPO.TIPO_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          INNER JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          INNER JOIN TOPS.ITEM_LOCATION ITLO
             ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          /*LEFT JOIN TOPS.VIEW_CHE_MASTER CHE
             ON ITLO.CHE_ID = CHE.CHE_ID*/
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IS NULL
                AND DCO.DCO_TIDO_ID = 68
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          INNER JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
          INNER JOIN BHS.AMR_PLANEJAMENTO_POSICIONAR AMPP
             ON AMRX.AMRX_ID = AMPP.AMPP_AMRX_ID
          INNER JOIN BHS.LOCALIZACAO LOCA
             ON (    TRIM (ITLO.STACK) = LOCA.LOCA_QUADRA
                 AND TRIM (ITLO.X) = LOCA.LOCA_PILHA
                 AND TRIM (ITLO.Y) = LOCA.LOCA_FILA
                 AND TRIM (ITLO.Z) = LOCA.LOCA_ALTURA)
    WHERE     MERC.MERC_STATUS = 'T'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (4, 3)
          AND TRIM (ITLO.STK_PCH) = 'C'
          AND ITEM.HIST_FLG IN ('N', ' ')
          AND POSI.POSI_DT_CANCELADO IS NULL
          AND POSI.POSI_DT_FINALIZADO IS NULL
          AND POSI.POSI_DT_CONFIRMACAO IS NOT NULL
          AND POSI.POSI_DT_VISTORIADO IS NOT NULL
          AND AMPP.AMPP_DT_CANCEL_POSI IS NULL
          AND AMPP.AMPP_DT_FINALIZA_POSI_OK IS NULL
          AND TRIM (ITLO.STK_CLASS) = 'Y'
          AND LOCA.LOCA_ARMAZEM = 1
-------------------------------------------------------------
--Objeto: BHS.VW_PLANEJAMENTO_ARMAZEM
--Sistema: BHS
--Alteração: Allan Motroni - Data: 02/12/2015
--Objetivo: Consulta dos contêineres que serão RETIRADOS do Armazém.
--Alteração: Allan Motroni - Data: 02/01/2017
--Objetivo: Alteração para considerar localizações com estão com a flag ARMAZEM como 1, retirada a tops.VIEW_CHE_MASTER da consulta,
--  alterada tabelas TOPS.ITEM e TOPS.ITEM_LOCATION para serem INNER JOIN
--Alteração:Brenda Morado - Data 29/10/2018
--Objetivo: Inclusão da categoria de cabotagem para consulta
--Alteração:
--Objetivo
-------------------------------------------------------------;

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_PLANEJAMENTO_REPESAGEM_XRAY" ("AMRX_DT_CRIACAO", "AMRX_SPECIAL_HANDLING_XRAY", "AMRX_SPECIAL_HANDLING_REPE", "MERC_ID", "REPESAGEM_TAS", "IMO", "EXCESSO", "MERC_TEMPERATURA", "ITEM_KEY", "CONT_NUMERO", "ISOC_CODIGO", "DT_DESCARGA_GATEIN", "MERC_CH_VZ", "CTCA_ID", "CTCA_DESCRICAO", "VIAGEM_EXP", "NAVI_EXP", "ESCA_VIAGEM_TOS_EXP", "VIAGEM_IMP", "NAVI_IMP", "ESCA_VIAGEM_TOS_IMP", "MERC_PESO_BRUTO_MANIF", "MERC_PESO_LIQUIDO_MANIF", "MERC_TARA_MANIF", "MERC_PESO_BRUTO", "MERC_PESO_LIQUIDO", "MOCA_DESCRICAO", "MOCA_ID", "MOCA_SIGLA", "MERC_STATUS", "CAMINHO_XRAY", "STK_CLASS", "STACK", "X", "Y", "Z", "CHE_ID", "AMRX_ID", "PLACE_OF_DELIVERY", "LOPA_RAZAO_SOCIAL", "LOPA_CLIENTE_VIP", "DCO_ID", "DCO_IDENTIFICACAO") AS 
  SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          NAVI_EXP.NAVI_NOME NAVI_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          NAVI_IMP.NAVI_NOME NAVI_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_BRUTO_MANIF,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_TARA_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          MERC.MERC_STATUS,
          XRAY.XRAY_PATH_FILE CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          NVL (LOPA.LOPA_CLIENTE_VIP, 0),
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT
             ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO
             ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA
             ON MERC.MERC_CTCA_ID = CTCA_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_EXP
             ON ESCA_EXP.ESCA_NAVI_ID = NAVI_EXP.NAVI_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_IMP
             ON ESCA_IMP.ESCA_NAVI_ID = NAVI_IMP.NAVI_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          LEFT JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          LEFT JOIN TOPS.ITEM_LOCATION ITLO
             ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          LEFT JOIN TOPS.VIEW_CHE_MASTER CHE
             ON ITLO.CHE_ID = CHE.CHE_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IN (1, 2, 3)
                AND DCO.DCO_TIDO_ID = 50
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          LEFT JOIN GATE.XRAY XRAY
             ON MERC.MERC_ID = XRAY.XRAY_MERC_ID
          LEFT JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
    WHERE     MERC.MERC_STATUS = 'T'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (2, 3, 5)
          AND TRIM (ITLO.STK_PCH) = 'C'
          AND ITEM.HIST_FLG IN ('N', ' ')
   UNION ALL
   SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          NAVI_EXP.NAVI_NOME NAVI_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          NAVI_IMP.NAVI_NOME NAVI_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_BRUTO_MANIF,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_TARA_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          MERC.MERC_STATUS,
          XRAY.XRAY_PATH_FILE CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          NVL (LOPA.LOPA_CLIENTE_VIP, 0),
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT
             ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO
             ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA
             ON MERC.MERC_CTCA_ID = CTCA_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_EXP
             ON ESCA_EXP.ESCA_NAVI_ID = NAVI_EXP.NAVI_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_IMP
             ON ESCA_IMP.ESCA_NAVI_ID = NAVI_IMP.NAVI_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          LEFT JOIN TOPS.ITEM ITEM
          ON ( (    RPAD (CONT.CONT_NUMERO, 12) = ITEM.ITEM_NO
                AND (   RPAD (ESCA_IMP.ESCA_VIAGEM_TOS_IMP, 16) =
                           ITEM.ARR_CAR
                     OR RPAD (ESCA_EXP.ESCA_VIAGEM_TOS_EXP, 16) =ITEM.DEP_CAR)                     
                     OR (    RPAD (CONT.CONT_NUMERO, 12) = ITEM.ITEM_NO
                         AND ITEM.DEP_TS =
                                TO_DATE ('31/12/1900 23:00:00',
                                         'DD/MM/YYYY HH24:MI:SS'))))
          LEFT JOIN TOPS.ITEM_LOCATION ITLO
             ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          LEFT JOIN TOPS.VIEW_CHE_MASTER CHE
             ON ITLO.CHE_ID = CHE.CHE_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IS NULL
                AND DCO.DCO_TIDO_ID = 68
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          LEFT JOIN GATE.XRAY XRAY
             ON MERC.MERC_ID = XRAY.XRAY_MERC_ID
          LEFT JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
    WHERE     MERC.MERC_STATUS = 'T'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (4, 3)
          AND TRIM (ITLO.STK_PCH) = 'C'
          AND ITEM.HIST_FLG IN ('N', ' ')
--------------------------------------------------------------------------
--OBJETO: BHS.VW_PLANEJAMENTO_REPESAGEM_XRAY
--OBJETIVO: CRIAR VIEW PARA LISTAR TODOS OS CONTEINERES PARA PLANEJAMENTO DE REPESAGEM E XRAY
--SISTEMA: BHS
--CRIAÇÃO: PAULO CÉSAR - DATA: <12082015>
--ALTERAÇÃO: ALLAN MOTRONI - DATA: <23032016>
--OBJETIVO: INCLUIR CATEGORIA DE CABOTAGEM IMPORTAÇÃO
--Alteração: Gabriel Rodrigues - DATA:  07/07/2016
--Motivo: Adicionado a coluna LOPA_CLIENTE_VIP
--------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_PLANEJAMENTO_REPE_XRAY_POSI" ("AMRX_DT_CRIACAO", "AMRX_SPECIAL_HANDLING_XRAY", "AMRX_SPECIAL_HANDLING_REPE", "AMRX_SPECIAL_HANDLING_POSI", "MERC_ID", "REPESAGEM_TAS", "IMO", "EXCESSO", "MERC_TEMPERATURA", "ITEM_KEY", "CONT_NUMERO", "ISOC_CODIGO", "DT_DESCARGA_GATEIN", "MERC_CH_VZ", "CTCA_ID", "CTCA_DESCRICAO", "VIAGEM_EXP", "ESCA_VIAGEM_TOS_EXP", "VIAGEM_IMP", "ESCA_VIAGEM_TOS_IMP", "MERC_PESO_LIQUIDO_MANIF", "MERC_PESO_BRUTO", "MERC_PESO_LIQUIDO", "MOCA_DESCRICAO", "MOCA_ID", "MOCA_SIGLA", "CAMINHO_XRAY", "STK_CLASS", "STACK", "X", "Y", "Z", "CHE_ID", "AMRX_ID", "PLACE_OF_DELIVERY", "LOPA_RAZAO_SOCIAL", "DCO_ID", "DCO_IDENTIFICACAO", "TIPO_ID", "TIPO_HDL_CODE", "TIPO_DESCRICAO", "POSI_DT_PRE_CONFIRMACAO", "POSI_DT_CONFIRMACAO", "POSI_ID") AS 
  SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          AMRX_SPECIAL_HANDLING_POSI,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          '' CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO,
          TIPO.TIPO_ID,
          TIPO.TIPO_HDL_CODE,
          TIPO.TIPO_DESCRICAO,
          POSI.POSI_DT_PRE_CONFIRMACAO,
          POSI.POSI_DT_CONFIRMACAO,
          POSI.POSI_ID
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA ON MERC.MERC_CTCA_ID = CTCA_ID
          INNER JOIN TAS.POSICIONAMENTO POSI
             ON MERC.MERC_ID = POSI.POSI_MERC_ID_BHS
          INNER JOIN TAS.TIPO_POSICIONAMENTO TIPO
             ON POSI.TIPO_ID = TIPO.TIPO_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          LEFT JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          LEFT JOIN TOPS.ITEM_LOCATION ITLO ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          LEFT JOIN TOPS.VIEW_CHE_MASTER CHE ON ITLO.CHE_ID = CHE.CHE_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IN (1, 2, 3)
                AND DCO.DCO_TIDO_ID = 50
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          LEFT JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
    WHERE     MERC.MERC_STATUS = 'T'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (2, 3, 5)
          AND TRIM (ITLO.STK_PCH) = 'C'
          AND ITEM.HIST_FLG IN ('N', ' ')
          AND POSI.POSI_DT_CANCELADO IS NULL
          AND POSI.POSI_DT_POSICIONADO IS NULL
          AND POSI.POSI_DT_VISTORIADO IS NULL
          AND POSI.POSI_DT_FINALIZADO IS NULL
          AND POSI.POSI_DT_PRE_CONFIRMACAO IS NOT NULL
          AND (TRIM (ITLO.STACK), TRIM(ITLO.X)) NOT IN (SELECT DISTINCT LOCA_QUADRA, LOCA_PILHA
                                          FROM bhs.localizacao
                                         WHERE LOCA_ARMAZEM = 1)
          AND TRIM (ITLO.STK_CLASS) <> 'V'
          AND TRIM (ITLO.STK_CLASS) <> 'C'
   UNION ALL
   SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          AMRX_SPECIAL_HANDLING_POSI,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          '' CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO,
          TIPO.TIPO_ID,
          TIPO.TIPO_HDL_CODE,
          TIPO.TIPO_DESCRICAO,
          POSI.POSI_DT_PRE_CONFIRMACAO,
          POSI.POSI_DT_CONFIRMACAO,
          POSI.POSI_ID
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA ON MERC.MERC_CTCA_ID = CTCA_ID
          INNER JOIN TAS.POSICIONAMENTO POSI
             ON MERC.MERC_ID = POSI.POSI_MERC_ID_BHS
          INNER JOIN TAS.TIPO_POSICIONAMENTO TIPO
             ON POSI.TIPO_ID = TIPO.TIPO_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          LEFT JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          LEFT JOIN TOPS.ITEM_LOCATION ITLO ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          LEFT JOIN TOPS.VIEW_CHE_MASTER CHE ON ITLO.CHE_ID = CHE.CHE_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IS NULL
                AND DCO.DCO_TIDO_ID = 68
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          LEFT JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
    WHERE     MERC.MERC_STATUS = 'T'
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (4, 3)
          AND TRIM (ITLO.STK_PCH) = 'C'
          AND ITEM.HIST_FLG IN ('N', ' ')
          AND POSI.POSI_DT_CANCELADO IS NULL
          AND POSI.POSI_DT_POSICIONADO IS NULL
          AND POSI.POSI_DT_VISTORIADO IS NULL
          AND POSI.POSI_DT_FINALIZADO IS NULL
          AND POSI.POSI_DT_PRE_CONFIRMACAO IS NOT NULL
          AND (TRIM (ITLO.STACK), TRIM(ITLO.X)) NOT IN (SELECT DISTINCT LOCA_QUADRA, LOCA_PILHA
                                          FROM bhs.localizacao
                                         WHERE LOCA_ARMAZEM = 1)
          AND TRIM (ITLO.STK_CLASS) <> 'V'
          AND TRIM (ITLO.STK_CLASS) <> 'C'
-------------------------------------------------------------
--Objeto: BHS.VW_PLANEJAMENTO_REPE_XRAY_POSI
--Sistema: BHS
--Alteração: Allan Motroni - Data: 02/12/2015
--Objetivo: Consulta dos contêineres que serão Planejados pela equipe de Estratégia.
--Alteração: Allan Motroni - Data: 23/03/2016
--Objetivo: Incluso da Categoria Cabotagem Importação.
--Alteração: Allan Motroni - Data: 24/03/2016
--Objetivo: Incluso das unidades que no estão com a flag Armazém
--Alteração: Juliane Oliveira - Data: 07/02/2018
--Objetivo: Consulta das unidades em quadra e pilha que não está com a flag Armazém 
-------------------------------------------------------------;

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_PLAN_REPE_XRAY_SAIDOS" ("AMRX_DT_CRIACAO", "AMRX_SPECIAL_HANDLING_XRAY", "AMRX_SPECIAL_HANDLING_REPE", "MERC_ID", "REPESAGEM_TAS", "IMO", "EXCESSO", "MERC_TEMPERATURA", "ITEM_KEY", "CONT_NUMERO", "ISOC_CODIGO", "DT_DESCARGA_GATEIN", "MERC_CH_VZ", "CTCA_ID", "CTCA_DESCRICAO", "VIAGEM_EXP", "NAVI_EXP", "ESCA_VIAGEM_TOS_EXP", "VIAGEM_IMP", "NAVI_IMP", "ESCA_VIAGEM_TOS_IMP", "MERC_PESO_BRUTO_MANIF", "MERC_PESO_LIQUIDO_MANIF", "MERC_TARA_MANIF", "MERC_PESO_BRUTO", "MERC_PESO_LIQUIDO", "MOCA_DESCRICAO", "MOCA_ID", "MOCA_SIGLA", "MERC_STATUS", "CAMINHO_XRAY", "STK_CLASS", "STACK", "X", "Y", "Z", "CHE_ID", "AMRX_ID", "PLACE_OF_DELIVERY", "LOPA_RAZAO_SOCIAL", "LOPA_CLIENTE_VIP", "DCO_ID", "DCO_IDENTIFICACAO") AS 
  SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          NAVI_EXP.NAVI_NOME NAVI_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          NAVI_IMP.NAVI_NOME NAVI_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_BRUTO_MANIF,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_TARA_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          MERC.MERC_STATUS,
          XRAY.XRAY_PATH_FILE CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          NVL (LOPA.LOPA_CLIENTE_VIP, 0),
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA ON MERC.MERC_CTCA_ID = CTCA_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_EXP
             ON ESCA_EXP.ESCA_NAVI_ID = NAVI_EXP.NAVI_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_IMP
             ON ESCA_IMP.ESCA_NAVI_ID = NAVI_IMP.NAVI_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          LEFT JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          LEFT JOIN TOPS.ITEM_LOCATION ITLO ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          LEFT JOIN TOPS.VIEW_CHE_MASTER CHE ON ITLO.CHE_ID = CHE.CHE_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IN (1, 2, 3)
                AND DCO.DCO_TIDO_ID = 50
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          LEFT JOIN GATE.XRAY XRAY ON MERC.MERC_ID = XRAY.XRAY_MERC_ID
          LEFT JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
    WHERE     MERC.MERC_STATUS IN ('T','S')
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (2, 3, 5)
          AND TRIM (ITLO.STK_PCH) = 'C'          
   UNION ALL
   SELECT DISTINCT
          AMRX_DT_CRIACAO,
          AMRX_SPECIAL_HANDLING_XRAY,
          AMRX_SPECIAL_HANDLING_REPE,
          MERC.MERC_ID,
          0 REPESAGEM_TAS,
          (SELECT COUNT (*)
             FROM BHS.AMR_IMO_MERCADORIA AMR
            WHERE AMR.AMIM_MERC_ID = MERC.MERC_ID)
             IMO,
          (SELECT COUNT (*)
             FROM BHS.EXCESSO EXC
            WHERE EXC.EXCE_MERC_ID = MERC.MERC_ID)
             EXCESSO,
          MERC.MERC_TEMPERATURA,
          ITEM.ITEM_KEY,
          CONT.CONT_NUMERO,
          ISO.ISOC_CODIGO,
          CASE
             WHEN DT_DESC.DATA_DESCARGA IS NOT NULL
             THEN
                DT_DESC.DATA_DESCARGA
             ELSE
                DT_GATE.DATA_ENTRADA
          END
             DT_DESCARGA_GATEIN,
          MERC.MERC_CH_VZ,
          CTCA_ID,
          CTCA.CTCA_DESCRICAO,
          ESCA_EXP.ESCA_NUMERO_VIAGEM VIAGEM_EXP,
          NAVI_EXP.NAVI_NOME NAVI_EXP,
          ESCA_EXP.ESCA_VIAGEM_TOS_EXP,
          ESCA_IMP.ESCA_NUMERO_VIAGEM VIAGEM_IMP,
          NAVI_IMP.NAVI_NOME NAVI_IMP,
          ESCA_IMP.ESCA_VIAGEM_TOS_IMP,
          MERC.MERC_PESO_BRUTO_MANIF,
          MERC.MERC_PESO_LIQUIDO_MANIF,
          MERC.MERC_TARA_MANIF,
          MERC.MERC_PESO_BRUTO,
          MERC.MERC_PESO_LIQUIDO,
          MOCA.MOCA_DESCRICAO,
          MOCA.MOCA_ID,
          MOCA.MOCA_SIGLA,
          MERC.MERC_STATUS,
          XRAY.XRAY_PATH_FILE CAMINHO_XRAY,
          ITLO.STK_CLASS,
          ITLO.STACK,
          ITLO.X,
          ITLO.Y,
          ITLO.Z,
          ITLO.CHE_ID,
          AMRX.AMRX_ID,
          ITEM.PLACE_OF_DELIVERY,
          LOPA.LOPA_RAZAO_SOCIAL,
          NVL (LOPA.LOPA_CLIENTE_VIP, 0),
          DCO.DCO_ID,
          DCO.DCO_IDENTIFICACAO
     FROM BHS.MERCADORIA MERC
          INNER JOIN BHS.CONTEINER CONT ON MERC.MERC_CONT_ID = CONT.CONT_ID
          INNER JOIN BHS.ISOCODE ISO ON CONT.CONT_ISOC_ID = ISO.ISOC_ID
          INNER JOIN BHS.CATEGORIA_CARGA CTCA ON MERC.MERC_CTCA_ID = CTCA_ID
          LEFT JOIN BHS.VW_DATA_DESCARGA DT_DESC
             ON MERC.MERC_ID = DT_DESC.MERC_ID
          LEFT JOIN BHS.VW_DATA_ENTRADA_GATE DT_GATE
             ON MERC.MERC_ID = DT_GATE.MERC_ID
          LEFT JOIN BHS.ESCALA ESCA_EXP
             ON MERC.MERC_ESCA_ID_EXP = ESCA_EXP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_EXP
             ON ESCA_EXP.ESCA_NAVI_ID = NAVI_EXP.NAVI_ID
          LEFT JOIN BHS.ESCALA ESCA_IMP
             ON MERC.MERC_ESCA_ID_IMP = ESCA_IMP.ESCA_ID
          LEFT JOIN BHS.NAVIO NAVI_IMP
             ON ESCA_IMP.ESCA_NAVI_ID = NAVI_IMP.NAVI_ID
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
             ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
          LEFT JOIN TOPS.ITEM ITEM
             ON     CONT.CONT_NUMERO = TRIM (ITEM.ITEM_NO)
                AND (   ESCA_IMP.ESCA_VIAGEM_TOS_IMP = TRIM (ITEM.ARR_CAR)
                     OR ESCA_EXP.ESCA_VIAGEM_TOS_EXP = TRIM (ITEM.DEP_CAR)
                     OR ESCA_IMP.ESCA_VIAGEM_TOS_IMP =
                           TRIM (ARR_CAR_MANIFEST))
          LEFT JOIN TOPS.ITEM_LOCATION ITLO ON ITEM.ITEM_KEY = ITLO.ITEM_KEY
          LEFT JOIN TOPS.VIEW_CHE_MASTER CHE ON ITLO.CHE_ID = CHE.CHE_ID
          LEFT JOIN BHS.DOCUMENTO DCO
             ON     AMDM.AMDM_DCO_ID = DCO.DCO_ID
                AND DCO.DCO_TICO_ID IS NULL
                AND DCO.DCO_TIDO_ID = 68
          LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
             ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
             ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
          LEFT JOIN GATE.XRAY XRAY ON MERC.MERC_ID = XRAY.XRAY_MERC_ID
          LEFT JOIN BHS.AMR_PLANEJAMENTO_REPE_XRAY AMRX
             ON (    MERC.MERC_ID = AMRX.AMRX_MERC_ID
                 AND ITEM.ITEM_KEY = AMRX.AMRX_ITEM_KEY)
    WHERE     MERC.MERC_STATUS IN ('T','S')
          AND MERC.MERC_DT_CANCEL IS NULL
          AND (MERC.MERC_TRA_ID = 40 OR MERC.MERC_TRA_ID IS NULL)
          AND CTCA.CTCA_ID IN (4, 3)
          AND TRIM (ITLO.STK_PCH) = 'C'         
-------------------------- ------------------------------------------------
--OBJETO: BHS.VW_PLAN_REPE_XRAY_SAIDOS
--OBJETIVO: CPIA DA BHS.VW_PLANEJAMENTO_REPESAGEM_XRAY PARA TRAZER MERCADORIAS SAIDAS E NO TERMINAL  
--SISTEMA: BHS.VW_PLAN_REPE_XRAY_SAIDOS
--CRIAO: ROBSON LINHARES - DATA: 11/11/2016
--------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_RELATORIO_FMA" ("DCO_IDENTIFICACAO", "TIPO_DOC", "BL", "CONTEINER", "MOT_CAP", "DESCARGA", "MERC_ID", "NCM_CODIGO", "LOPA_RAZAO_SOCIAL", "DCO_NUMERO_CE", "ESCA_NUMERO_VIAGEM", "NAVI_NOME", "TICO_DESCRICAO", "DCO_ID", "DCO_DT_CANCELAMENTO", "DCO_TIDO_ID") AS 
  SELECT DISTINCT
            DCO_SAIDA.DCO_IDENTIFICACAO DCO_IDENTIFICACAO,
            TIDO.TIDO_CONSTANTE TIPO_DOC,
            DCO.DCO_IDENTIFICACAO BL,
            CONT.CONT_NUMERO CONTEINER,
            MOCA.MOCA_DESCRICAO MOT_CAP,
            ATVI.ATVI_DTHR_INI DESCARGA,
            MERC.MERC_ID MERC_ID,
            CASE WHEN (NC.NCM_CODIGO = '9797' OR NC.NCM_ID IS NULL) THEN '9797' ELSE '' END NCM_CODIGO,
            LOPA.LOPA_RAZAO_SOCIAL,
            TO_CHAR (
               DECODE (
                  DCO.DCO_CE_MASTER,
                  NULL, DECODE (DCO.DCO_NUMERO_CE, NULL, '', DCO.DCO_NUMERO_CE),
                  DCO.DCO_CE_MASTER))
               DCO_NUMERO_CE,
            ESCA.ESCA_NUMERO_VIAGEM,
            NAVI.NAVI_NOME,
            TICO.TICO_DESCRICAO,
            DCO_SAIDA.DCO_ID,
            DCO_SAIDA.DCO_DT_CANCELAMENTO,
            DCO_SAIDA.DCO_TIDO_ID
       FROM BHS.MERCADORIA MERC
            INNER JOIN BHS.CATEGORIA_CARGA CACA
               ON MERC.MERC_CTCA_ID = CACA.CTCA_ID
            INNER JOIN BHS.CONTEINER CONT
               ON MERC.MERC_CONT_ID = CONT.CONT_ID
            INNER JOIN BHS.ESCALA ESCA
               ON MERC.MERC_ESCA_ID_IMP = ESCA.ESCA_ID
            INNER JOIN BHS.NAVIO NAVI
               ON ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
            LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA AMDM
               ON MERC.MERC_ID = AMDM.AMDM_MERC_ID
            LEFT JOIN BHS.DOCUMENTO DCO
               ON AMDM.AMDM_DCO_ID = DCO.DCO_ID
            LEFT JOIN BHS.TIPO_CONHECIMENTO TICO
               ON DCO.DCO_TICO_ID = TICO.TICO_ID
            LEFT JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
               ON DCO.DCO_LOPA_ID = LOPA.LOPA_ID
            LEFT JOIN BHS.MOTIVO_CAPTACAO MOCA
               ON DCO.DCO_MOCA_ID = MOCA.MOCA_ID
            LEFT JOIN BHS.AMR_DOCUMENTO AMD
               ON DCO.DCO_ID = AMD.AMDO_DCO_ID_RELACIONADO
            LEFT JOIN BHS.DOCUMENTO DCO_SAIDA
               ON AMD.AMDO_DCO_ID = DCO_SAIDA.DCO_ID
            LEFT JOIN BHS.TIPO_DOCUMENTO TIDO
               ON DCO_SAIDA.DCO_TIDO_ID = TIDO.TIDO_ID
            INNER JOIN BHS.ATIVIDADE ATVI
               ON MERC.MERC_ID = ATVI.ATVI_MERC_ID
            LEFT JOIN BHS.AMR_NCM_MERCADORIA AMNM
               ON MERC.MERC_ID = AMNM.AMNM_MERC_ID
            LEFT JOIN BHS.NCM NC
               ON AMNM.AMNM_NCM_ID = NC.NCM_ID
      WHERE     MERC.MERC_STATUS = 'T'
            AND (   CACA.CTCA_CONSTANTE = 'CS_IMPO'
                 OR CACA.CTCA_CONSTANTE = 'CS_TRANS')
            AND MERC.MERC_DT_CANCEL IS NULL
            AND CONT.CONT_numero IN
                   (SELECT TRIM (item_no)
                      FROM TOPS.ITEM i
                     WHERE I.HIST_FLG <> 'Y' AND I.CATEGORY IN ('I', 'T'))
            AND (ATVI.ATVI_TIAT_ID = 1 OR ATVI.ATVI_TIAT_ID = 4)
            AND (   (    DCO.DCO_ID IS NOT NULL
                     AND DCO.DCO_TIDO_ID = 50
                     AND DCO.DCO_DT_CANCELAMENTO IS NULL)
                 OR DCO.DCO_ID IS NULL)
            AND (   (    DCO_SAIDA.DCO_ID IS NOT NULL
                     AND DCO_SAIDA.DCO_DT_CANCELAMENTO IS NULL
                     AND DCO_SAIDA.DCO_TIDO_ID IN (51, 57, 46, 67, 50))
                 OR DCO_SAIDA.DCO_ID IS NULL)
   ORDER BY ATVI.ATVI_DTHR_INI
-------------------------------------------------------------
--Objeto: BHS.VW_RELATORIO_FMA
--Criação: Vanessa Lopes (auxílio Allan Motroni) - Data: 22/01/2016
--Objetivo: View para retornar os contêineres no Relatório de Entrada FMA.
--Sistema: BHS - Perdimento - Tela de Relatório de Entrada em FMA
--Alteração: Allan Motroni - 23/08/2016
--Motivo da alteração: Permitir trazer NCM nulos e considerar como 9797.
--Alteração:
--Motivo da alteração:
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_UNIDADES_DEPOSITADAS_EXP" ("ID", "DATA_EMBARQUE", "CATEGORIA_CARGA", "ISOCODE", "NAVIO", "VIAGEM", "ID_EXPORTADOR", "EXPORTADOR", "CONTEINER", "CHEIO_VAZIO", "BOOKING", "SERVICO", "ID_ARMADOR", "ARMADOR", "CNPJ") AS 
  SELECT merc_bhs.merc_id ID,
            item.DEP_TS Data_Embarque,
            caca.CTCA_DESCRICAO Categoria_Carga,
            (ISOC_TAMANHO || ' ' || ISOC_SIGLA) IsoCode,
            navi.NAVI_NOME Navio,
            esca.ESCA_NUMERO_VIAGEM Viagem,
            lopaExp.LOPA_ID Id_Exportador,
            lopaExp.LOPA_RAZAO_SOCIAL Exportador,
            cont.cont_numero Conteiner,
            merc_bhs.MERC_CH_VZ Cheio_Vazio,
            book.BOOK_NUMERO_BOOKING Booking,
            VEDE.VES_SERVICE Servico,
            lopaArm.LOPA_ID Id_Armador,
            lopaArm.LOPA_RAZAO_SOCIAL Armador,
            lopaExp.LOPA_CNPJ Cnpj
       FROM bhs.mercadoria merc_bhs
            LEFT OUTER JOIN TAS.MERCADORIA merc_tas
               ON merc_bhs.MERC_ID = merc_tas.MERC_ID_BHS
            LEFT OUTER JOIN BHS.ITEM_BOOKING itbo
               ON merc_tas.merc_id = itbo.ITBO_MERC_ID_TAS
            LEFT OUTER JOIN BHS.BOOKING book
               ON itbo.ITBO_BOOK_ID = book.BOOK_ID
            INNER JOIN BHS.CATEGORIA_CARGA caca
               ON merc_bhs.MERC_CTCA_ID = caca.CTCA_ID
            INNER JOIN bhs.conteiner cont
               ON merc_bhs.merc_cont_id = cont.cont_id
            INNER JOIN bhs.isocode isoc
               ON cont.CONT_ISOC_ID = isoc.ISOC_ID
            INNER JOIN bhs.escala esca
               ON merc_bhs.MERC_ESCA_ID_EXP = esca.ESCA_ID
            INNER JOIN bhs.navio navi
               ON esca_navi_id = navi.navi_id
            LEFT OUTER JOIN TAS.AMR_MERC_DOCUMENTO ammd
               ON ammd.MERC_ID = merc_tas.merc_id
            LEFT OUTER JOIN TAS.documento docu
               ON ammd.DOCU_ID = docu.DOCU_ID
            LEFT OUTER JOIN accesscontrol.local_parceiro lopaExp
               ON docu.LOPA_ID = lopaExp.LOPA_ID
            INNER JOIN accesscontrol.local_parceiro lopaArm
               ON merc_bhs.MERC_LOPA_ARM_EXP = lopaArm.LOPA_ID
            INNER JOIN TOPS.ITEM item
               ON cont.cont_numero = TRIM (item.ITEM_NO)
            LEFT OUTER JOIN TOPS.VESSEL_DETAILS VEDE
               ON esca.ESCA_VIAGEM_TOS_EXP = TRIM (VEDE.TFC_CODE_E)
      WHERE item.DEP_BY = 'V'
   ORDER BY cont.cont_numero
-----------------------------------------------------------------
--Objeto: BHS.VW_UNIDADES_DEPOSITADAS_EXP
--Criação: Allan Motroni - 01/10/2014
--Objetivo: View utilizada na tela de Relatório de Movimentação de Cais (unidades de exportação)
--Sistema: TAS
--Alteração:
--Motivo da alteração:
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_UNIDADES_DEPOSITADAS_IMP" ("ID", "DATA_DESCARGA", "CATEGORIA_CARGA", "ISOCODE", "NAVIO", "VIAGEM", "ID_IMPORTADOR", "IMPORTADOR", "CONTEINER", "CHEIO_VAZIO", "BL", "ID_ARMADOR", "ARMADOR", "SERVICO", "LOPA_CNPJ") AS 
  select
  merc_bhs.merc_id ID, 
  item.ARR_TS Data_Descarga, 
  caca.CTCA_DESCRICAO Categoria_Carga, 
  (ISOC_TAMANHO || ' ' || ISOC_SIGLA) IsoCode, 
  navi.NAVI_NOME Navio, 
  esca.ESCA_NUMERO_VIAGEM Viagem, 
  LopaImp.lopa_id Id_Importador, 
  lopaImp.LOPA_RAZAO_SOCIAL Importador, 
  cont.cont_numero Conteiner, 
  merc_bhs.MERC_CH_VZ Cheio_Vazio, 
  docu.DCO_IDENTIFICACAO BL, 
  lopaArm.LOPA_ID Id_Armador, 
  lopaArm.LOPA_RAZAO_SOCIAL Armador,
  VEDE.VES_SERVICE SERVICO, 
  lopaImp.LOPA_CNPJ
from bhs.mercadoria merc_bhs
inner join BHS.CATEGORIA_CARGA caca on merc_bhs.MERC_CTCA_ID = caca.CTCA_ID
inner join bhs.conteiner cont on merc_bhs.merc_cont_id = cont.cont_id
inner join bhs.isocode isoc on cont.CONT_ISOC_ID = isoc.ISOC_ID
inner join bhs.escala esca on merc_bhs.MERC_ESCA_ID_IMP = esca.ESCA_ID
inner join bhs.navio navi on esca_navi_id = navi.navi_id
inner join BHS.AMR_DOCUMENTO_MERCADORIA amdm on merc_bhs.merc_id = amdm.AMDM_MERC_ID
inner join bhs.documento docu on amdm.AMDM_DCO_ID = docu.dco_id
inner join accesscontrol.local_parceiro lopaImp on docu.DCO_LOPA_ID = lopaImp.LOPA_ID
inner join accesscontrol.local_parceiro lopaArm on merc_bhs.MERC_LOPA_ARM_IMP = lopaArm.LOPA_ID
inner join TOPS.ITEM item on cont.cont_numero = TRIM(item.ITEM_NO)
inner join TOPS.VESSEL_DETAILS VEDE on TRIM(esca.esca_viagem_tos_imp) = TRIM(TFC_CODE_I)
where 
    docu.dco_tido_id = 50 /*BL*/ and 
    TRIM(esca.ESCA_VIAGEM_TOS_IMP) = TRIM(item.ARR_CAR)
order by 
    cont.cont_numero
-----------------------------------------------------------------
--Objeto: BHS.VW_UNIDADES_DEPOSITADAS_IMP
--Criação: Allan Motroni - 01/10/2014
--Objetivo: View utilizada na tela de Relatório de Movimentação de Cais (unidades de importação)
--Sistema: TAS
--Alteração:
--Motivo da alteração:
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BHS"."VW_VESSEL_DETAILS" ("ID", "VES_ID", "IN_VOYAGE", "OUT_VOYAGE", "LINE_OPER", "TFC_CODE_E", "TFC_CODE_I", "VES_CD", "VES_NAME", "VES_SERVICE", "CALL_SIGN", "LLOYDS_NO", "DT_ATRACACAO") AS 
  SELECT ROWNUM ID,
          VES_ID,
          IN_VOYAGE,
          OUT_VOYAGE,
          LINE_OPER,
          TFC_CODE_E,
          TFC_CODE_I,
          VES_CD,
          VES_NAME,
          VES_SERVICE,
          CALL_SIGN,
          LLOYDS_NO,
          ACT_BERTH_TS
     FROM TOPS.VESSEL_DETAILS
-----------------------------------------------------------------
--Objeto: VIEW BHS.VW_VESSEL_DETAILS
--Criação: Allan Motroni - 29/09/2014
--Objetivo: LISTAR OS CAMPOS DA TABELA TOPS.VESSEL_DETAILS
--Sistema: TAS
--Alteração: Jorge Roberto - 09/01/2015
--Motivo da alteração:Inclusão do campo DT_ATRACACAO
-----------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_BOOKING_MERCADORIA" ("ITEM_NO", "MERC_ID", "ESCA_NUMERO_VIAGEM", "BOOK_NO") AS 
  SELECT IT.ITEM_NO, merc.merc_id,ESCA.ESCA_NUMERO_VIAGEM,
         IT.BOOK_NO
     FROM TOPS.ITEM it,
          BHS.escala esca,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,        
          BHS.NAVIO NAV
    WHERE     TRIM (IT.DEP_CAR) = ESCA.ESCA_VIAGEM_TOS_EXP       
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)       
          AND NAV.NAVI_ID = ESCA.ESCA_NAVI_ID

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_BTPSMART_NOTA_COBRANCA" ("NOCO_ID", "NOCO_LOPA_ID", "NOCO_RAZAO_SOCIAL", "NOCO_VIAGEM", "NOCO_NAVIO", "NOCO_DT_HR_ATRACACAO", "NOCO_DT_HR_INICIO_OPERACAO", "NOCO_DT_HR_FIM_OPERACAO", "NOCO_DT_HR_DESATRACACAO", "NOCO_RAP", "NOCO_ESCALA", "NOCO_CODIGOCESSAOSAP", "ESCA_ID", "DCO_IDENTIFICACAO", "NOCO_DTHR_GERACAO", "NOCO_ORIGEM", "NOCO_USUA_ID", "NOCO_USUA_LOGIN", "NOCO_OBSERVACAO", "NOCO_DESC_TIPO_DOC", "NOCO_COD_TIPO_DOC", "TIDO_ID", "NOCO_CODIGO_NAVIO", "NOCO_DTHR_ENVIOSAP", "NOCO_NROVFSAP", "NOCO_DTHR_CANCELAMENTO", "NOCO_DTHR_PAGAMENTO", "NOCO_DTHR_INCOBRAVEL", "NOCO_DTHR_PRORROGACAO", "LOPA_SAP_ID", "LOPA_CNPJ", "NOCO_DTHR_VENCIMENTO", "NOCO_NRONFESAP", "NOCO_DOLAR", "NOCO_TAMANHO_NAVIO", "NOCO_REFERENCIA", "NOCO_CODVERIFICACAOSAP") AS 
  SELECT NOCO.noco_id                   NOCO_ID, 
       NOCO.lopa_id                   NOCO_LOPA_ID, 
       LOPA.lopa_razao_social         AS NOCO_RAZAO_SOCIAL, 
       NOCO.noco_esca_id              AS NOCO_VIAGEM, 
       NAVI.navi_nome                 AS NOCO_NAVIO, 
       ESCA.esca_dthr_atracacao       AS NOCO_DT_HR_ATRACACAO, 
       ESCA.esca_dthr_inicio_operacao AS NOCO_DT_HR_INICIO_OPERACAO, 
       ESCA.esca_dthr_fim_operacao    AS NOCO_DT_HR_FIM_OPERACAO, 
       ESCA.esca_dthr_desatracacao    AS NOCO_DT_HR_DESATRACACAO, 
       ESCA.esca_rap                  AS NOCO_RAP, 
       ESCA.esca_numero               AS NOCO_ESCALA, 
       NOCO.noco_codigocessaosap, 
       ESCA.esca_id, 
       DOCU.dco_identificacao, 
       NOCO.noco_dthr_geracao, 
       NOCO.noco_origem, 
       NOCO.usua_id                   AS NOCO_USUA_ID, 
       USUA.usua_login                AS NOCO_USUA_LOGIN, 
       NOCO.noco_observacao, 
       TIDO.tido_descricao            NOCO_DESC_TIPO_DOC, 
       TIDO.tido_constante            NOCO_COD_TIPO_DOC, 
       tido.tido_id, 
       NAVI.navi_id                   NOCO_CODIGO_NAVIO, 
       NOCO.noco_dthr_enviosap, 
       NOCO.noco_nrovfsap, 
       NOCO.noco_dthr_cancelamento, 
       NOCO.noco_dthr_pagamento, 
       NOCO.noco_dthr_incobravel, 
       NOCO.noco_dthr_prorrogacao, 
       LOPA.lopa_sap_id, 
       LOPA.lopa_cnpj 
       || LOPA.lopa_cpf               LOPA_CNPJ, 
       NOCO.noco_dthr_vencimento, 
       NOCO.noco_nronfesap, 
       CASE 
         WHEN TACL.tacl_dolar = 1 THEN (SELECT Max (MOCO.moco_valor) 
                                        FROM   billing.moeda_conversao MOCO, 
                                               billing.tipo_moeda_conversao TIMC 
                                        WHERE 
         To_char (MOCO.moco_data, 'MM/DD/YYYY') = 
                                       To_char (ESCA.esca_dthr_fim_operacao, 
                                       'MM/DD/YYYY') 
                                               AND MOCO.tmco_id = TIMC.tmco_id 
                                               AND TIMC.tmco_constante = 
                                                   'CS_DOLARPTAXC') 
         ELSE NULL 
       END                            NOCO_DOLAR, 
       VESS.ves_len                   NOCO_TAMANHO_NAVIO, 
       NOCO.noco_referencia, 
       NOCO.noco_codverificacaosap 
FROM   billing.nota_cobranca NOCO, 
       accesscontrol.local_parceiro LOPA, 
       accesscontrol.usuario USUA, 
       bhs.documento DOCU, 
       bhs.tipo_documento TIDO, 
       bhs.vw_escala ESCA, 
       billing.btpsmart_tabela_cliente TACL, 
       bhs.navio NAVI, 
       tops.vessels VESS, 
       billing.item_cobranca ITCO, 
       billing.apontamento_servico APSE 
WHERE  LOPA.lopa_id(+) = NOCO.lopa_id 
       AND NOCO.noco_id = ITCO.noco_id(+) 
       AND ITCO.apse_id = APSE.apse_id(+) 
       AND LOPA.lopa_id = TACL.lopa_id(+) 
       AND TACL.tacl_situacao(+) = 1 
       AND ( APSE.apse_esca_id = ESCA.esca_id 
              OR NOCO.noco_esca_id = ESCA.esca_id ) 
       AND APSE.apse_dco_identificacao = DOCU.dco_identificacao(+) 
       AND ESCA.esca_navi_id = NAVI.navi_id 
       AND DOCU.dco_tido_id = TIDO.tido_id(+) 
       AND Trim (NAVI.navi_lloyd) = Trim (VESS.lloyds_no(+)) 
       AND NOCO.usua_id = USUA.usua_id 
GROUP  BY NOCO.noco_id, 
          NOCO.lopa_id, 
          LOPA.lopa_razao_social, 
          NOCO.noco_esca_id, 
          NAVI.navi_nome, 
          ESCA.esca_dthr_atracacao, 
          ESCA.esca_dthr_inicio_operacao, 
          ESCA.esca_dthr_fim_operacao, 
          ESCA.esca_dthr_desatracacao, 
          ESCA.esca_rap, 
          ESCA.esca_numero, 
          NOCO.noco_codigocessaosap, 
          ESCA.esca_id, 
          DOCU.dco_identificacao, 
          NOCO.noco_dthr_geracao, 
          NOCO.noco_origem, 
          NOCO.usua_id, 
          USUA.usua_login, 
          NOCO.noco_observacao, 
          TIDO.tido_descricao, 
          TIDO.tido_constante, 
          tido.tido_id, 
          NAVI.navi_id, 
          NOCO.noco_dthr_enviosap, 
          NOCO.noco_nrovfsap, 
          NOCO.noco_dthr_cancelamento, 
          NOCO.noco_dthr_pagamento, 
          NOCO.noco_dthr_incobravel, 
          NOCO.noco_dthr_prorrogacao, 
          LOPA.lopa_sap_id, 
          LOPA.lopa_cnpj, 
          LOPA.lopa_cpf, 
          NOCO.noco_dthr_vencimento, 
          NOCO.noco_nronfesap, 
          TACL.tacl_dolar, 
          VESS.ves_len, 
          NOCO.noco_referencia, 
          NOCO.noco_codverificacaosap

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_DATAS_CNTR" ("CONT_NUMERO", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "TRA_NOME", "TRA_COD_DTE", "LOPA_CNPJ", "DATA_SAIDA", "DATA_DESCARGA", "MERC_ID") AS 
  SELECT CONT.CONT_NUMERO,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,
         TR.TRA_NOME,
          TR.TRA_COD_DTE,
        LOPA.LOPA_CNPJ,
         DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
             DATA_SAIDA ,
          IT.ARR_TS AS DATA_DESCARGA,           
          MERC.MERC_ID         
     FROM BHS.ESCALA ESCA,
          BHS.MERCADORIA MERC,         
         BHS.TRA TR,
          BHS.CONTEINER CONT,
          TOPS.ITEM IT  ,
        ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE    ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
         AND MERC.MERC_TRA_ID = TR.TRA_ID(+)
          AND LOPA.LOPA_ID_TRA = TO_CHAR (TR.TRA_COD_DTE)           
       --  AND TR.TRA_COD_DTE = '022' 
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND (TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP) OR TRIM(IT.ARR_CAR_MANIFEST)= TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
       --   and CONT.CONT_NUMERO = 'MSCU7530518'

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_DATAS_EXP" ("CONT_NUMERO", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "DATA_SAIDA", "DATA_DESCARGA", "MERC_ID") AS 
  SELECT CONT.CONT_NUMERO,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,       
       
         DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
             DATA_SAIDA ,
          IT.ARR_TS AS DATA_DESCARGA,           
          MERC.MERC_ID         
     FROM BHS.ESCALA ESCA,
          BHS.MERCADORIA MERC,         
         
          BHS.CONTEINER CONT,
          TOPS.ITEM IT 
       
    WHERE    ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID         
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND (TRIM (IT.DEP_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP) OR TRIM (IT.DEP_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_EXP))

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_DESCARGA_ESCALA" ("ITEM_NO", "DATA_DESCARGA", "CATEGORY", "ESCA_NUMERO_VIAGEM", "ESCA_ID", "MERC_ID", "CTCA_CONSTANTE", "MERC_CH_VZ", "ISOC_TAMANHO", "ISOC_CODIGO", "LINE_OPER", "FEL") AS 
  SELECT IT.ITEM_NO,
          IT.ARR_TS AS DATA_DESCARGA,
          IT.CATEGORY,
          ESCA.ESCA_NUMERO_VIAGEM,
          ESCA.ESCA_ID,
          MERC.MERC_ID,
          CACA.CTCA_CONSTANTE,
          MERC.MERC_CH_VZ,
          IT.LENGTH ISOC_TAMANHO,
          iso.ISOC_CODIGO,
          IT.LINE_OPER,
          IT.FEL
     FROM TOPS.ITEM it,
          BHS.escala esca,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          BHS.CATEGORIA_CARGA CACA,
          BHS.ISOCODE ISO,
          BHS.NAVIO NAV
    WHERE     TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
          AND IT.CATEGORY IN ('I', 'T')
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND NAV.NAVI_ID = ESCA.ESCA_NAVI_ID
          AND CACA.CTCA_ID = MERC.MERC_CTCA_ID
          AND CONT.CONT_ISOC_ID = ISO.ISOC_ID
          AND MERC.MERC_DT_CANCEL IS NULL
-------------------------------------------------------------
--Objeto: BILLING.VW_DESCARGA_ESCALA
--Criação: Fabio Pozo. - Data: 09122015
--Objetivo: view para buscar cntr descarregados
--Sistema: BBS
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_EMBARQUE_ESCALA" ("ITEM_NO", "DATA_EMBARQUE", "CATEGORY", "ESCA_NUMERO_VIAGEM", "ESCA_ID", "MERC_ID", "CTCA_CONSTANTE", "MERC_CH_VZ", "ISOC_TAMANHO", "ISOC_CODIGO", "LINE_OPER", "FEL") AS 
  SELECT 
       IT.ITEM_NO,
       IT.DEP_TS AS "DATA_EMBARQUE",
       IT.CATEGORY,
       ESCA.ESCA_NUMERO_VIAGEM,
       ESCA.ESCA_ID,
       MERC.MERC_ID,
       CACA.CTCA_CONSTANTE,
       MERC.MERC_CH_VZ,
       IT.LENGTH ISOC_TAMANHO,
       iso.ISOC_CODIGO ,
       IT.LINE_OPER,
       IT.FEL
  FROM TOPS.ITEM it,
       BHS.escala esca,
       BHS.MERCADORIA MERC,
       BHS.CONTEINER CONT,
       BHS.ISOCODE ISO,
       BHS.CATEGORIA_CARGA CACA,
       BHS.NAVIO NAV
 WHERE     TRIM (IT.DEP_CAR) = ESCA.ESCA_VIAGEM_TOS_EXP
       AND IT.CATEGORY IN ('E', 'T')
       AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
       AND MERC.MERC_CONT_ID = CONT.CONT_ID
       AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
       AND CACA.CTCA_ID = MERC.MERC_CTCA_ID
       AND NAV.NAVI_ID = ESCA.ESCA_NAVI_ID
       AND CONT.CONT_ISOC_ID = ISO.ISOC_ID  
       and merc.MERC_DT_CANCEL is null        
       AND IT.DEP_TS <> TO_DATE('31/12/1900 23:00:00','DD/MM/YYYY HH24:MI:SS')
      -- AND CACA.CTCA_CONSTANTE IN ('CS_EXP','CS_TRANS')

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_ENTREGA_TRA" ("CONT_NUMERO", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "TRA_NOME", "TRA_COD_DTE", "LOPA_CNPJ", "ESCA_DTHR_FIM_OPERACAO", "DATA_DESCARGA", "AMGM_NUMERO_GUIA", "DATA_SAIDA", "DOCUMENTOS", "MERC_ID", "ESCA_ID", "LOPA_ID", "NAVI_NOME", "ESCA_DT_GATE_TRA") AS 
  SELECT CONT.CONT_NUMERO,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,
          TR.TRA_NOME,
          TR.TRA_COD_DTE,
          LOPA.LOPA_CNPJ,
          ESCA.ESCA_DTHR_FIM_OPERACAO,
          IT.ARR_TS AS DATA_DESCARGA,
          AMGM.AMGM_NUMERO_GUIA,
          IT.DEP_TS DATA_SAIDA,
          (SELECT documentos
             FROM TABLE (BHS.FUNC_DOCUMENTO_MERCADORIA (MERC.MERC_ID)))
             DOCUMENTOS,
          MERC.MERC_ID,
          ESCA.ESCA_ID,
          LOPA.LOPA_ID,
          NAV.NAVI_NOME,
          ESCA.ESCA_DT_GATE_TRA
     FROM BHS.ESCALA ESCA,
          BHS.MERCADORIA MERC,
          BHS.AMR_GUIA_MERCADORIA AMGM,
          BHS.TRA TR,
          BHS.CONTEINER CONT,
          BHS.NAVIO NAV,
          TOPS.ITEM IT,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_TRA_ID = TR.TRA_ID
          AND LOPA.LOPA_ID_TRA = TO_CHAR (TR.TRA_COD_DTE)
          AND AMGM.AMGM_STATUS = 1
          AND MERC.MERC_ID = AMGM.AMGM_MERC_ID
          AND ESCA.ESCA_NAVI_ID = NAV.NAVI_ID
          AND TR.TRA_COD_DTE <> '022'
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
-------------------------------------------------------------
--Objeto: BILLING.VW_ENTREGA_TRA
--Criação: . - Data: 10/04/2014
--Objetivo: view para tabela escala
--Sistema: bhs
--Alteração:<fabio> - Data: <10042014>
--Motivo da alteração:<Buscar uma navio que foi trocado no topo>
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_EXCESSO_MERC_TOPS" ("CONT_NUMERO", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "DATA_SAIDA", "DATA_DESCARGA", "CATEGORY", "MERC_ID") AS 
  SELECT CONT.CONT_NUMERO,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,
          DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
             DATA_SAIDA,
          IT.ARR_TS AS DATA_DESCARGA,
          IT.CATEGORY,
          MERC.MERC_ID
     FROM BHS.ESCALA ESCA,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          TOPS.ITEM IT,
          TOPS.ITEM_OOG OOG
    WHERE     (ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP OR ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP)
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND IT.ITEM_KEY = OOG.ITEM_KEY
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND (   TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
               OR TRIM (IT.ARR_CAR_MANIFEST) =
                     TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
               OR TRIM (IT.DEP_CAR) = ESCA.ESCA_VIAGEM_TOS_EXP)
-------------------------------------------------------------
--Objeto: BILLING. VW_EXCESSO_MERC_TOPS
--Criação:  - Data: 10/04/2014
--Objetivo: view para tabela excesso
--Sistema: bhs
--Alteração:<fabio> - Data: <15042014>
--Motivo da alteração:<Buscar uma esxcesso no topo>
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_HATCHCOVER" ("HORA_PARADA", "TIPO_PARADA", "ESCA_ID", "LOPA_ID") AS 
  SELECT C.ACTIVITY_FROM_TS AS "HORA_PARADA", C.CHE_OPERATION AS "TIPO_PARADA",
       ESCA.ESCA_ID,LOPA.LOPA_ID
  FROM TOPS.CHE_ACTIVITY c, TOPS.VIEW_VES_SCHEDULE vivs,
       BHS.vw_escala esca, ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
       BHS.NAVIO NAV
 WHERE C.VES_ID = VIVS.TOPX_VES_ID and
       ( TRIM(VIVS.TFC_IMP) = ESCA.ESCA_VIAGEM_TOS_IMP OR
         TRIM(VIVS.TFC_EXP) = ESCA.ESCA_VIAGEM_TOS_EXP)
       and C.CHE_OPERATION IN ('SR06','SR07')
       AND ESCA.ESCA_NAVI_ID = NAV.NAVI_ID
       AND NAV.NAVI_LOPA_ID_OWNER = LOPA.LOPA_ID
       and ESCA.ESCA_DTHR_FIM_OPERACAO IS NOT NULL

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_MONITOR_REEFER" ("ITEM_NO", "MERC_ID", "NAVI_NOME", "ESCA_RAP", "ESCA_NUMERO_VIAGEM", "DATA_SAIDA", "DATA_ENTRADA", "LENGTH", "CATEGORY", "BOOK_NO", "DATA_PLUGAGEM_DESPLUGAGEM", "IS_CONNECTED", "PLACE_OF_DELIVERY") AS 
  SELECT DISTINCT IT.ITEM_NO,
          MERC.MERC_ID,
          NAV.NAVI_NOME,
          ESCA.ESCA_RAP,
          ESCA.ESCA_NUMERO_VIAGEM,     
          DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
             DATA_SAIDA,
          TO_CHAR (IT.ARR_TS, 'dd/mm/yyyy hh24:mi') AS DATA_ENTRADA,
          IT.LENGTH,
          IT.CATEGORY,
          IT.BOOK_NO,
          TO_CHAR (RE.INSPECT_TS, 'dd/mm/yyyy hh24:mi') Data_Plugagem_Desplugagem,RE.IS_CONNECTED,
          IT.PLACE_OF_DELIVERY
     FROM BHS.ESCALA ESCA,
          BHS.NAVIO nav,
          TOPS.ITEM IT,
          TOPS.REEFER_MONITOR re,
           BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT
    WHERE     
          ( TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP) or TRIM (IT.DEP_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_EXP))
          AND IT.CATEGORY <> 'R'
          and IT.ITEM_KEY = re.ITEM_KEY
          and ESCA.ESCA_NAVI_ID = NAV.NAVI_ID
            AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_NOTA_COBRANCA" ("NOCO_ID", "NOCO_LOPA_ID", "NOCO_RAZAO_SOCIAL", "NOCO_VIAGEM", "NOCO_NAVIO", "NOCO_DT_HR_ATRACACAO", "NOCO_DT_HR_INICIO_OPERACAO", "NOCO_DT_HR_FIM_OPERACAO", "NOCO_DT_HR_DESATRACACAO", "NOCO_RAP", "NOCO_ESCALA", "NOCO_CODIGOCESSAOSAP", "ESCA_ID", "DCO_IDENTIFICACAO", "NOCO_DTHR_GERACAO", "NOCO_ORIGEM", "NOCO_USUA_ID", "NOCO_USUA_LOGIN", "NOCO_OBSERVACAO", "NOCO_DESC_TIPO_DOC", "NOCO_COD_TIPO_DOC", "TIDO_ID", "NOCO_CODIGO_NAVIO", "NOCO_DTHR_ENVIOSAP", "NOCO_NROVFSAP", "NOCO_DTHR_CANCELAMENTO", "NOCO_DTHR_PAGAMENTO", "NOCO_DTHR_INCOBRAVEL", "NOCO_DTHR_PRORROGACAO", "LOPA_SAP_ID", "LOPA_CNPJ", "NOCO_DTHR_VENCIMENTO", "NOCO_NRONFESAP", "NOCO_DOLAR", "NOCO_TAMANHO_NAVIO", "NOCO_REFERENCIA", "NOCO_CODVERIFICACAOSAP") AS 
  SELECT NOCO.NOCO_ID NOCO_ID,
         NOCO.LOPA_ID NOCO_LOPA_ID,
         LOPA.LOPA_RAZAO_SOCIAL AS NOCO_RAZAO_SOCIAL,
         NOCO.NOCO_ESCA_ID AS NOCO_VIAGEM,
         NAVI.NAVI_NOME AS NOCO_NAVIO,
         ESCA.ESCA_DTHR_ATRACACAO AS NOCO_DT_HR_ATRACACAO,
         ESCA.ESCA_DTHR_INICIO_OPERACAO AS NOCO_DT_HR_INICIO_OPERACAO,
         ESCA.ESCA_DTHR_fim_OPERACAO AS NOCO_DT_HR_FIM_OPERACAO,
         ESCA.ESCA_DTHR_DESATRACACAO AS NOCO_DT_HR_DESATRACACAO,
         ESCA.ESCA_RAP AS NOCO_RAP,
         ESCA.ESCA_NUMERO AS NOCO_ESCALA,
         NOCO.NOCO_CODIGOCESSAOSAP,
         ESCA.ESCA_ID,
         DOCU.DCO_IDENTIFICACAO,
         NOCO.NOCO_DTHR_GERACAO,
         NOCO.NOCO_ORIGEM,
         NOCO.USUA_ID AS NOCO_USUA_ID,
         USUA.USUA_LOGIN AS NOCO_USUA_LOGIN,
         NOCO.NOCO_OBSERVACAO,
         TIDO.TIDO_DESCRICAO NOCO_DESC_TIPO_DOC,
         TIDO.TIDO_CONSTANTE NOCO_COD_TIPO_DOC,
         tido.TIDO_ID,
         NAVI.NAVI_ID NOCO_CODIGO_NAVIO,
         NOCO.NOCO_DTHR_ENVIOSAP,
         NOCO.NOCO_NROVFSAP,
         NOCO.NOCO_DTHR_CANCELAMENTO,
         NOCO.NOCO_DTHR_PAGAMENTO,
         NOCO.NOCO_DTHR_INCOBRAVEL,
         NOCO.NOCO_DTHR_PRORROGACAO,
         LOPA.LOPA_SAP_ID,
         LOPA.LOPA_CNPJ || LOPA.LOPA_CPF LOPA_CNPJ,
         NOCO.NOCO_DTHR_VENCIMENTO,
         NOCO.NOCO_NRONFESAP,
         CASE
            WHEN TACL.TACL_DOLAR = 1
            THEN
               (SELECT MAX (MOCO.MOCO_VALOR)
                  FROM BILLING.MOEDA_CONVERSAO MOCO,
                       BILLING.TIPO_MOEDA_CONVERSAO TIMC
                 WHERE     TO_CHAR (MOCO.MOCO_DATA, 'MM/DD/YYYY') =
                              TO_CHAR (ESCA.ESCA_DTHR_fim_OPERACAO,
                                       'MM/DD/YYYY')
                       AND MOCO.TMCO_ID = TIMC.TMCO_ID
                       AND TIMC.TMCO_CONSTANTE = 'CS_DOLARPTAXC')
            ELSE
               NULL
         END
            NOCO_DOLAR,
         VESS.VES_LEN NOCO_TAMANHO_NAVIO, 
         NOCO.NOCO_REFERENCIA,
         NOCO.NOCO_CODVERIFICACAOSAP
    FROM BILLING.NOTA_COBRANCA NOCO,
         ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
         ACCESSCONTROL.USUARIO USUA,
         BHS.DOCUMENTO DOCU,
         BHS.TIPO_DOCUMENTO TIDO,
         BHS.VW_ESCALA ESCA,
         BILLING.TABELA_CLIENTE TACL,
         BHS.NAVIO NAVI,
         TOPS.VESSELS VESS,
         BILLING.ITEM_COBRANCA ITCO,
         BILLING.APONTAMENTO_SERVICO APSE
   WHERE     LOPA.LOPA_ID(+) = NOCO.LOPA_ID
         AND NOCO.NOCO_ID = ITCO.NOCO_ID(+)
         AND ITCO.APSE_ID = APSE.APSE_ID(+)
         AND LOPA.LOPA_ID = TACL.LOPA_ID(+)       
         AND TACL.TACL_SITUACAO(+) = 1
         AND ( APSE.APSE_ESCA_ID = ESCA.ESCA_ID OR NOCO.NOCO_ESCA_ID = ESCA.ESCA_ID)
         AND APSE.APSE_DCO_IDENTIFICACAO = DOCU.DCO_IDENTIFICACAO(+)
         AND ESCA.esca_NAVI_ID = NAVI.NAVI_ID
         AND DOCU.DCO_TIDO_ID = TIDO.TIDO_ID(+)
         AND TRIM (NAVI.NAVI_LLOYD) = TRIM (VESS.LLOYDS_NO(+))
         AND NOCO.USUA_ID = USUA.USUA_ID 
GROUP BY NOCO.NOCO_ID,
         NOCO.LOPA_ID,
         LOPA.LOPA_RAZAO_SOCIAL,
         NOCO.NOCO_ESCA_ID,
         NAVI.NAVI_NOME,
         ESCA.ESCA_DTHR_ATRACACAO,
         ESCA.ESCA_DTHR_INICIO_OPERACAO,
         ESCA.ESCA_DTHR_fim_OPERACAO,
         ESCA.ESCA_DTHR_DESATRACACAO,
         ESCA.ESCA_RAP,
         ESCA.ESCA_NUMERO,
         NOCO.NOCO_CODIGOCESSAOSAP,
         ESCA.ESCA_ID,
         DOCU.DCO_IDENTIFICACAO,
         NOCO.NOCO_DTHR_GERACAO,
         NOCO.NOCO_ORIGEM,
         NOCO.USUA_ID,
         USUA.USUA_LOGIN,
         NOCO.NOCO_OBSERVACAO,
         TIDO.TIDO_DESCRICAO,
         TIDO.TIDO_CONSTANTE,
         tido.TIDO_ID,
         NAVI.NAVI_ID,
         NOCO.NOCO_DTHR_ENVIOSAP,
         NOCO.NOCO_NROVFSAP,
         NOCO.NOCO_DTHR_CANCELAMENTO,
         NOCO.NOCO_DTHR_PAGAMENTO,
         NOCO.NOCO_DTHR_INCOBRAVEL,
         NOCO.NOCO_DTHR_PRORROGACAO,
         LOPA.LOPA_SAP_ID,
         LOPA.LOPA_CNPJ,
         LOPA.LOPA_CPF,
         NOCO.NOCO_DTHR_VENCIMENTO,
         NOCO.NOCO_NRONFESAP,
         TACL.TACL_DOLAR,
         VESS.VES_LEN,
         NOCO.NOCO_REFERENCIA,
         NOCO.NOCO_CODVERIFICACAOSAP
         
-------------------------------------------------------------
--Objeto: BILLING.VW_NOTA_COBRANCA
--Criação:
--Objetivo:
--Sistema:
--Alteração 14122016 ADICIONA COLUMN NOCO_CODVERIFICACAOSAP
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_NOTA_COBRANCA_SEM_DOC_ESCA" ("NOCO_ID", "NOCO_LOPA_ID", "NOCO_RAZAO_SOCIAL", "NOCO_VIAGEM", "NOCO_NAVIO", "NOCO_DT_HR_ATRACACAO", "NOCO_DT_HR_INICIO_OPERACAO", "NOCO_DT_HR_FIM_OPERACAO", "NOCO_DT_HR_DESATRACACAO", "NOCO_RAP", "NOCO_ESCALA", "NOCO_CODIGOCESSAOSAP", "ESCA_ID", "DCO_IDENTIFICACAO", "NOCO_DTHR_GERACAO", "NOCO_ORIGEM", "NOCO_USUA_ID", "NOCO_USUA_LOGIN", "NOCO_OBSERVACAO", "NOCO_DESC_TIPO_DOC", "NOCO_COD_TIPO_DOC", "TIDO_ID", "NOCO_CODIGO_NAVIO", "NOCO_DTHR_ENVIOSAP", "NOCO_NROVFSAP", "NOCO_DTHR_CANCELAMENTO", "NOCO_DTHR_PAGAMENTO", "NOCO_DTHR_INCOBRAVEL", "NOCO_DTHR_PRORROGACAO", "LOPA_SAP_ID", "LOPA_CNPJ", "NOCO_DTHR_VENCIMENTO", "NOCO_NRONFESAP", "NOCO_DOLAR", "NOCO_TAMANHO_NAVIO", "NOCO_REFERENCIA", "NOCO_CODVERIFICACAOSAP") AS 
  SELECT NOCO.NOCO_ID NOCO_ID,
            NOCO.LOPA_ID NOCO_LOPA_ID,
            LOPA.LOPA_RAZAO_SOCIAL AS NOCO_RAZAO_SOCIAL,
            NOCO.NOCO_ESCA_ID AS NOCO_VIAGEM,
            NAVI.NAVI_NOME AS NOCO_NAVIO,
            ESCA.ESCA_DTHR_ATRACACAO AS NOCO_DT_HR_ATRACACAO,
            ESCA.ESCA_DTHR_INICIO_OPERACAO AS NOCO_DT_HR_INICIO_OPERACAO,
            ESCA.ESCA_DTHR_fim_OPERACAO AS NOCO_DT_HR_FIM_OPERACAO,
            ESCA.ESCA_DTHR_DESATRACACAO AS NOCO_DT_HR_DESATRACACAO,
            ESCA.ESCA_RAP AS NOCO_RAP,
            ESCA.ESCA_NUMERO AS NOCO_ESCALA,
            NOCO.NOCO_CODIGOCESSAOSAP,
            ESCA.ESCA_ID,
            DOCU.DCO_IDENTIFICACAO,
            NOCO.NOCO_DTHR_GERACAO,
            NOCO.NOCO_ORIGEM,
            NOCO.USUA_ID AS NOCO_USUA_ID,
            USUA.USUA_LOGIN AS NOCO_USUA_LOGIN,
            NOCO.NOCO_OBSERVACAO,
            TIDO.TIDO_DESCRICAO NOCO_DESC_TIPO_DOC,
            TIDO.TIDO_CONSTANTE NOCO_COD_TIPO_DOC,
            tido.TIDO_ID,
            NAVI.NAVI_ID NOCO_CODIGO_NAVIO,
            NOCO.NOCO_DTHR_ENVIOSAP,
            NOCO.NOCO_NROVFSAP,
            NOCO.NOCO_DTHR_CANCELAMENTO,
            NOCO.NOCO_DTHR_PAGAMENTO,
            NOCO.NOCO_DTHR_INCOBRAVEL,
            NOCO.NOCO_DTHR_PRORROGACAO,
            LOPA.LOPA_SAP_ID,
            LOPA.LOPA_CNPJ || LOPA.LOPA_CPF LOPA_CNPJ,
            NOCO.NOCO_DTHR_VENCIMENTO,
            NOCO.NOCO_NRONFESAP,
            CASE
               WHEN TACL.TACL_DOLAR = 1
               THEN
                  (SELECT MAX (MOCO.MOCO_VALOR)
                     FROM BILLING.MOEDA_CONVERSAO MOCO,
                          BILLING.TIPO_MOEDA_CONVERSAO TIMC
                    WHERE     TO_CHAR (MOCO.MOCO_DATA, 'MM/DD/YYYY') =
                                 TO_CHAR (ESCA.ESCA_DTHR_fim_OPERACAO,
                                          'MM/DD/YYYY')
                          AND MOCO.TMCO_ID = TIMC.TMCO_ID
                          AND TIMC.TMCO_CONSTANTE = 'CS_DOLARPTAXC')
               ELSE
                  NULL
            END
               NOCO_DOLAR,
            VESS.VES_LEN NOCO_TAMANHO_NAVIO,
            NOCO.NOCO_REFERENCIA,
            NOCO.NOCO_CODVERIFICACAOSAP
       FROM BILLING.NOTA_COBRANCA NOCO,
            ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
            ACCESSCONTROL.USUARIO USUA,
            BHS.DOCUMENTO DOCU,
            BHS.TIPO_DOCUMENTO TIDO,
            BHS.VW_ESCALA ESCA,
            BILLING.TABELA_CLIENTE TACL,
            BHS.NAVIO NAVI,
            TOPS.VESSELS VESS,
            BILLING.ITEM_COBRANCA ITCO,
            BILLING.APONTAMENTO_SERVICO APSE
      WHERE     LOPA.LOPA_ID(+) = NOCO.LOPA_ID
            AND NOCO.NOCO_ID = ITCO.NOCO_ID(+)
            AND ITCO.APSE_ID = APSE.APSE_ID(+)
            AND LOPA.LOPA_ID = TACL.LOPA_ID(+)
            AND TACL.TACL_SITUACAO(+) = 1
            AND NOCO.NOCO_ESCA_ID = ESCA.ESCA_ID(+)
            AND NOCO.NOCO_DCO_ID = DOCU.DCO_ID(+)
            AND ESCA.esca_NAVI_ID = NAVI.NAVI_ID(+)
            AND DOCU.DCO_TIDO_ID = TIDO.TIDO_ID(+)
            AND TRIM (NAVI.NAVI_LLOYD) = TRIM (VESS.LLOYDS_NO(+))
            AND NOCO.USUA_ID = USUA.USUA_ID
   GROUP BY NOCO.NOCO_ID,
            NOCO.LOPA_ID,
            LOPA.LOPA_RAZAO_SOCIAL,
            NOCO.NOCO_ESCA_ID,
            NAVI.NAVI_NOME,
            ESCA.ESCA_DTHR_ATRACACAO,
            ESCA.ESCA_DTHR_INICIO_OPERACAO,
            ESCA.ESCA_DTHR_fim_OPERACAO,
            ESCA.ESCA_DTHR_DESATRACACAO,
            ESCA.ESCA_RAP,
            ESCA.ESCA_NUMERO,
            NOCO.NOCO_CODIGOCESSAOSAP,
            ESCA.ESCA_ID,
            DOCU.DCO_IDENTIFICACAO,
            NOCO.NOCO_DTHR_GERACAO,
            NOCO.NOCO_ORIGEM,
            NOCO.USUA_ID,
            USUA.USUA_LOGIN,
            NOCO.NOCO_OBSERVACAO,
            TIDO.TIDO_DESCRICAO,
            TIDO.TIDO_CONSTANTE,
            tido.TIDO_ID,
            NAVI.NAVI_ID,
            NOCO.NOCO_DTHR_ENVIOSAP,
            NOCO.NOCO_NROVFSAP,
            NOCO.NOCO_DTHR_CANCELAMENTO,
            NOCO.NOCO_DTHR_PAGAMENTO,
            NOCO.NOCO_DTHR_INCOBRAVEL,
            NOCO.NOCO_DTHR_PRORROGACAO,
            LOPA.LOPA_SAP_ID,
            LOPA.LOPA_CNPJ,
            LOPA.LOPA_CPF,
            NOCO.NOCO_DTHR_VENCIMENTO,
            NOCO.NOCO_NRONFESAP,
            TACL.TACL_DOLAR,
            VESS.VES_LEN,
            NOCO.NOCO_REFERENCIA,
            NOCO.NOCO_CODVERIFICACAOSAP
-------------------------------------------------------------
--Objeto: BILLING.VW_NOTA_COBRANCA_SEM_DOC_ESCA
--Criação:
--Objetivo:
--Sistema:
-- Alteração 14122016 ADICIONA COLUMN NOCO_CODVERIFICACAOSAP
-- Alteração 250525017 nota sem viagem / doc
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_PLUGAGEM" ("ITEM_NO", "DATA_ENTRADA", "DATA_SAIDA", "NAVI_NOME", "ESCA_NUMERO_VIAGEM", "LENGTH", "CATEGORY", "BOOK_NO", "ESCA_DTHR_ATRACACAO", "LINE_OPER", "LOPA_RAZAO_SOCIAL", "LOPA_CNPJ", "DEP_CAR") AS 
  SELECT DISTINCT
          IT.ITEM_NO,
          TO_CHAR (IT.ARR_TS, 'dd/mm/yyyy hh24:mi') AS DATA_ENTRADA,
          TO_DATE (DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
                  , 'dd/mm/yyyy hh24:mi')
             DATA_SAIDA,
          NAVI.NAVI_NOME,
          ESCA.ESCA_NUMERO_VIAGEM,
          IT.LENGTH,
          IT.CATEGORY,
          IT.BOOK_NO,
          ESCA.ESCA_DTHR_ATRACACAO,
          IT.LINE_OPER,
          LOPA.LOPA_RAZAO_SOCIAL,
          LOPA.LOPA_CNPJ,
          IT.DEP_CAR
     FROM TOPS.ITEM IT,
          TOPS.REEFER_MONITOR re,
          BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          BHS.CONTEINER CONT,
          BHS.MERCADORIA MERC,
          BHS.AMR_DOCUMENTO_MERCADORIA AMDM,
          BHS.DOCUMENTO DCO,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     IT.ITEM_KEY = re.ITEM_KEY
          AND ESCA.ESCA_VIAGEM_TOS_EXP = TRIM (IT.DEP_CAR)
          AND ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_ID = AMDM.AMDM_MERC_ID
          AND AMDM.AMDM_DCO_ID = DCO.DCO_ID
          AND DCO.DCO_LOPA_ID = LOPA.LOPA_ID
          AND IT.CATEGORY = 'E'
   UNION
   SELECT DISTINCT
          IT.ITEM_NO,
          TO_CHAR (IT.ARR_TS, 'dd/mm/yyyy hh24:mi') AS DATA_ENTRADA,
          TO_DATE (DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
                  , 'dd/mm/yyyy hh24:mi')
             DATA_SAIDA,
          NAVI.NAVI_NOME,
          ESCA.ESCA_NUMERO_VIAGEM,
          IT.LENGTH,
          IT.CATEGORY,
          IT.BOOK_NO,
          ESCA.ESCA_DTHR_ATRACACAO,
          IT.LINE_OPER,
          '' LOPA_RAZAO_SOCIAL,
          '' LOPA_CNPJ,
          IT.DEP_CAR
     FROM TOPS.ITEM IT,
          TOPS.REEFER_MONITOR re,
          BHS.ESCALA ESCA,
          BHS.NAVIO NAVI
    WHERE     IT.ITEM_KEY = re.ITEM_KEY
          AND ESCA.ESCA_VIAGEM_TOS_EXP = TRIM (IT.DEP_CAR)
          AND ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
          AND IT.CATEGORY = 'T'
   ORDER BY ESCA_DTHR_ATRACACAO,
            4,
            5,
            1

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_PLUGAGEM_DEZ_2013" ("ITEM_NO", "DATA_ENTRADA", "DATA_SAIDA", "NAVI_NOME", "ESCA_NUMERO_VIAGEM", "LENGTH", "CATEGORY", "BOOK_NO", "ESCA_DTHR_ATRACACAO", "LINE_OPER", "LOPA_RAZAO_SOCIAL", "LOPA_CNPJ", "DEP_CAR") AS 
  SELECT DISTINCT
          IT.ITEM_NO,
          TO_CHAR (IT.ARR_TS, 'dd/mm/yyyy hh24:mi') AS DATA_ENTRADA,
          TO_DATE (DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
                  , 'dd/mm/yyyy hh24:mi')
             DATA_SAIDA,
          NAVI.NAVI_NOME,
          ESCA.ESCA_NUMERO_VIAGEM,
          IT.LENGTH,
          IT.CATEGORY,
          IT.BOOK_NO,
          ESCA.ESCA_DTHR_ATRACACAO,
          IT.LINE_OPER,
          LOPA.LOPA_RAZAO_SOCIAL,
          LOPA.LOPA_CNPJ,
          IT.DEP_CAR
     FROM TOPS.ITEM IT,
          TOPS.REEFER_MONITOR re,
          BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          BHS.CONTEINER CONT,
          BHS.MERCADORIA MERC,
          BHS.AMR_DOCUMENTO_MERCADORIA AMDM,
          BHS.DOCUMENTO DCO,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     IT.ITEM_KEY = re.ITEM_KEY
          AND ESCA.ESCA_VIAGEM_TOS_EXP = TRIM (IT.DEP_CAR)
          AND ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_ID = AMDM.AMDM_MERC_ID(+)
          AND AMDM.AMDM_DCO_ID = DCO.DCO_ID(+)
          AND DCO.DCO_LOPA_ID = LOPA.LOPA_ID(+)
          AND IT.CATEGORY = 'E'
   UNION
   SELECT DISTINCT
          IT.ITEM_NO,
          TO_CHAR (IT.ARR_TS, 'dd/mm/yyyy hh24:mi') AS DATA_ENTRADA,
          TO_DATE (DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), '',
                  TO_CHAR (IT.DEP_TS, 'dd/mm/yyyy hh24:mi'))
                  , 'dd/mm/yyyy hh24:mi')
             DATA_SAIDA,
          NAVI.NAVI_NOME,
          ESCA.ESCA_NUMERO_VIAGEM,
          IT.LENGTH,
          IT.CATEGORY,
          IT.BOOK_NO,
          ESCA.ESCA_DTHR_ATRACACAO,
          IT.LINE_OPER,
          '' LOPA_RAZAO_SOCIAL,
          '' LOPA_CNPJ,
          IT.DEP_CAR
     FROM TOPS.ITEM IT,
          TOPS.REEFER_MONITOR re,
          BHS.ESCALA ESCA,
          BHS.NAVIO NAVI
    WHERE     IT.ITEM_KEY = re.ITEM_KEY
          AND ESCA.ESCA_VIAGEM_TOS_EXP = TRIM (IT.DEP_CAR)
          AND ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
          AND IT.CATEGORY = 'T'
   ORDER BY ESCA_DTHR_ATRACACAO,
            4,
            5,
            1

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_RECEITA_P_CONTEINER" ("MERC_ID", "CONTEINER", "CTCA_COD_TOS", "CTCA_ID", "MERC_CH_VZ", "ISOC_TAMANHO", "IS_REEFER", "IS_DANGEROUS", "IS_OOG", "DATA_DESCARGA", "DATA_SAIDA", "NAVI_NOME", "ESCA_NUMERO_VIAGEM", "ESCA_ID", "VES_SERVICE", "ESCA_DTHR_FIM_OPERACAO", "ESCA_DTHR_ATRACACAO", "NFE", "VF", "NOCO_DTHR_ENVIOSAP", "LOPA_ID", "IMPORTADOR", "CNPJ", "DESCRICAO", "SEPO_NOME", "SEPO_SAP_ID", "SEPO_ID", "SEPO_NATUREZA", "NOCO_NRONFESAP", "NOCO_NROVFSAP", "ITCO_VALOR") AS 
  SELECT MERC.MERC_ID,
          CONT.CONT_NUMERO CONTEINER,
          CATE.CTCA_COD_TOS,
          CATE.CTCA_ID,
          MERC.MERC_CH_VZ,
          ISO.ISOC_TAMANHO,
          IT.IS_REEFER,
          IT.IS_DANGEROUS,
          IT.IS_OOG,
          IT.ARR_TS DATA_DESCARGA,
          IT.DEP_TS DATA_SAIDA,
          ESCA.NAVI_NOME,
          ESCA.ESCA_NUMERO_VIAGEM,
          ESCA.ESCA_ID,
          VES.VES_SERVICE,
          ESCA.ESCA_DTHR_FIM_OPERACAO,
          ESCA.ESCA_DTHR_ATRACACAO,
          NOCO.NOCO_NRONFESAP NFE,
          NOCO.NOCO_NROVFSAP VF,
          NOCO.NOCO_DTHR_ENVIOSAP,
          NOCO.LOPA_ID,
          IMP.LOPA_RAZAO_SOCIAL IMPORTADOR,
          IMP.LOPA_CNPJ CNPJ,
          TACL.TACL_ID || ' - ' || TACL.TACL_DESCRICAO DESCRICAO,
          SEPO.SEPO_NOME,
          SEPO.SEPO_SAP_ID,
          SEPO.SEPO_ID,
          SEPO.SEPO_NATUREZA,
          NOCO.NOCO_NRONFESAP,
          NOCO.NOCO_NROVFSAP,
          ITCO.ITCO_VALOR
     FROM BILLING.APONTAMENTO_SERVICO APSE,
          BHS.MERCADORIA MERC,
          BHS.ISOCODE ISO,
          TOPS.ITEM IT,
          BHS.VW_ESCALA ESCA,
          TOPS.VIEW_VES_SCHEDULE VES,
          BHS.CATEGORIA_CARGA CATE,
          BHS.CONTEINER CONT,
          BILLING.ITEM_COBRANCA ITCO,
          BILLING.NOTA_COBRANCA NOCO,
          BILLING.SERVICO_PORTUARIO SEPO,
          ACCESSCONTROL.LOCAL_PARCEIRO IMP,
          BILLING.TABELA_CLIENTE TACL
    WHERE     APSE.APSE_MERC_ID = MERC.MERC_ID
          AND CONT.CONT_ISOC_ID = ISO.ISOC_ID
          AND APSE.APSE_ESCA_ID = ESCA.ESCA_ID
          AND ESCA.ESCA_VIAGEM_TOS_IMP = TRIM (VES.TFC_IMP)
          AND MERC.MERC_CTCA_ID = CATE.CTCA_ID
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND APSE.SEPO_ID = SEPO.SEPO_ID
          AND APSE.APSE_ID = ITCO.APSE_ID
          AND ITCO.NOCO_ID = NOCO.NOCO_ID
          AND ITCO.ITCO_TACL_ID = TACL.TACL_ID(+)
          AND (   TRIM (IT.ARR_CAR) = ESCA.ESCA_VIAGEM_TOS_IMP
               OR TRIM (IT.ARR_CAR_MANIFEST) = ESCA.ESCA_VIAGEM_TOS_IMP)
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND NOCO.LOPA_ID = IMP.LOPA_ID
          AND APSE.APSE_DTHR_CANCELAMENTO IS NULL
          AND NOCO.NOCO_DTHR_CANCELAMENTO IS NULL
   UNION
   SELECT MERC.MERC_ID,
          CONT.CONT_NUMERO CONTEINER,
          CATE.CTCA_COD_TOS,
          CATE.CTCA_ID,
          MERC.MERC_CH_VZ,
          ISO.ISOC_TAMANHO,
          IT.IS_REEFER,
          IT.IS_DANGEROUS,
          IT.IS_OOG,
          IT.ARR_TS DATA_DESCARGA,
          IT.DEP_TS DATA_SAIDA,
          ESCA.NAVI_NOME,
          ESCA.ESCA_NUMERO_VIAGEM,
          ESCA.ESCA_ID,
          VES.VES_SERVICE,
          ESCA.ESCA_DTHR_FIM_OPERACAO,
          ESCA.ESCA_DTHR_ATRACACAO,
          NOCO.NOCO_NRONFESAP NFE,
          NOCO.NOCO_NROVFSAP VF,
          NOCO.NOCO_DTHR_ENVIOSAP,
          NOCO.LOPA_ID,
          IMP.LOPA_RAZAO_SOCIAL IMPORTADOR,
          IMP.LOPA_CNPJ CNPJ,
          TACL.TACL_ID || ' - ' || TACL.TACL_DESCRICAO DESCRICAO,
          SEPO.SEPO_NOME,
          SEPO.SEPO_SAP_ID,
          SEPO.SEPO_ID,
          SEPO.SEPO_NATUREZA,
          NOCO.NOCO_NRONFESAP,
          NOCO.NOCO_NROVFSAP,
          ITCO.ITCO_VALOR
     FROM BILLING.APONTAMENTO_SERVICO APSE,
          BHS.MERCADORIA MERC,
          BHS.ISOCODE ISO,
          TOPS.ITEM IT,
          BHS.VW_ESCALA ESCA,
          TOPS.VIEW_VES_SCHEDULE VES,
          BHS.CATEGORIA_CARGA CATE,
          BHS.CONTEINER CONT,
          BILLING.ITEM_COBRANCA ITCO,
          BILLING.NOTA_COBRANCA NOCO,
          BILLING.SERVICO_PORTUARIO SEPO,
          ACCESSCONTROL.LOCAL_PARCEIRO IMP,
          BILLING.TABELA_CLIENTE TACL
    WHERE     APSE.APSE_MERC_ID = MERC.MERC_ID
          AND CONT.CONT_ISOC_ID = ISO.ISOC_ID
          AND APSE.APSE_ESCA_ID = ESCA.ESCA_ID
          AND ESCA.ESCA_VIAGEM_TOS_IMP = TRIM (VES.TFC_IMP)
          AND MERC.MERC_CTCA_ID = CATE.CTCA_ID
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND APSE.SEPO_ID = SEPO.SEPO_ID
          AND APSE.APSE_ID = ITCO.APSE_ID
          AND ITCO.NOCO_ID = NOCO.NOCO_ID
          AND ITCO.ITCO_TACL_ID = TACL.TACL_ID(+)
          AND TRIM (IT.DEP_CAR) = ESCA.ESCA_VIAGEM_TOS_EXP
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND NOCO.LOPA_ID = IMP.LOPA_ID
          AND APSE.APSE_DTHR_CANCELAMENTO IS NULL
          AND NOCO.NOCO_DTHR_CANCELAMENTO IS NULL
  UNION      
          SELECT  MERC.MERC_ID,
          CONT.CONT_NUMERO CONTEINER,
          CATE.CTCA_COD_TOS,
          CATE.CTCA_ID,
          MERC.MERC_CH_VZ,
          ISO.ISOC_TAMANHO,
          DECODE (MERC.MERC_TEMPERATURA, NULL,' ', 'Y')IS_REEFER, 
          DECODE (IM.AMIM_MERC_ID, NULL,' ', 'Y') IS_DANGEROUS,          
          DECODE (EX.EXCE_MERC_ID, NULL,' ', 'Y') IS_OOG,
          ATIV.ATVI_DTHR_FIM DATA_DESCARGA,
          AGEND.AGEN_DT_GATEOUT DATA_SAIDA,
          '' NAVI_NOME,
          NULL ESCA_NUMERO_VIAGEM,
          NULL ESCA_ID,
          NULL VES_SERVICE,
          NULL ESCA_DTHR_FIM_OPERACAO,
          NULL ESCA_DTHR_ATRACACAO,
          NOCO.NOCO_NRONFESAP NFE,
          NOCO.NOCO_NROVFSAP VF,
          NOCO.NOCO_DTHR_ENVIOSAP,
          NOCO.LOPA_ID,
          IMP.LOPA_RAZAO_SOCIAL IMPORTADOR,
          IMP.LOPA_CNPJ CNPJ,
          TACL.TACL_ID || ' - ' || TACL.TACL_DESCRICAO DESCRICAO,
          SEPO.SEPO_NOME,
          SEPO.SEPO_SAP_ID,
          SEPO.SEPO_ID,
          SEPO.SEPO_NATUREZA,
          NOCO.NOCO_NRONFESAP,
          NOCO.NOCO_NROVFSAP,
          ITCO.ITCO_VALOR
     FROM BILLING.APONTAMENTO_SERVICO APSE,
          BHS.MERCADORIA MERC,
          BHS.ISOCODE ISO,        
          BHS.CATEGORIA_CARGA CATE,
          BHS.CONTEINER CONT,
          BHS.AMR_IMO_MERCADORIA IM,
          BHS.EXCESSO EX, 
          BHS.ATIVIDADE ATIV,       
          BILLING.ITEM_COBRANCA ITCO,
          BILLING.NOTA_COBRANCA NOCO,
          BILLING.SERVICO_PORTUARIO SEPO,
          ACCESSCONTROL.LOCAL_PARCEIRO IMP,
          TAS.AGENDAMENTO AGEND,
          TAS.VW_AGEND_GATE AGEN,
          BILLING.TABELA_CLIENTE TACL
    WHERE     APSE.APSE_MERC_ID = MERC.MERC_ID
          AND CONT.CONT_ISOC_ID = ISO.ISOC_ID        
          AND MERC.MERC_CTCA_ID = CATE.CTCA_ID
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND IM.AMIM_MERC_ID (+) = MERC.MERC_ID
          AND EX.EXCE_MERC_ID (+) = MERC.MERC_ID
          AND ATIV.ATVI_MERC_ID = MERC.MERC_ID
          AND AGEN.CONT_NUMERO = CONT.CONT_NUMERO         
          AND APSE.SEPO_ID = SEPO.SEPO_ID
          AND APSE.APSE_ID = ITCO.APSE_ID
          AND ITCO.NOCO_ID = NOCO.NOCO_ID
          AND ITCO.ITCO_TACL_ID = TACL.TACL_ID(+)          
          AND NOCO.LOPA_ID = IMP.LOPA_ID
          AND AGEND.AGEN_ID = AGEN.VISIT_CODE
          AND AGEN.CATEGOR = 'DES_EXP'          
          AND CATE.CTCA_ID = 4
          AND ATIV.ATVI_TIAT_ID = 4          
          AND APSE.APSE_DTHR_CANCELAMENTO IS NULL
          AND NOCO.NOCO_DTHR_CANCELAMENTO IS NULL
-------------------------------------------------------------
--Objeto: BILLING. VW_RECEITA_P_CONTEINER
--Criação:  - Data: 20062014
--Objetivo: view para verificar VW_RECEITA_P_CONTEINER.
--Sistema: BBS
-- ALTERAO  19/10/2015 add colunas
-- ALTERAO  10/12/2015 add colunas
--Alteração: Vanessa Lopes - Data: 21/08/2017
--Motivo da alteração: Exibir Desistência de Embarque
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_RELATORIO_CARGAS_IMPORTACAO" ("TIDO_CONSTANTE", "TIDO_ID", "DOCUMENTO", "LOPA_CNPJ", "CLIENTE", "CNPJ_DESPACHANTE", "DESPACHANTE", "CONT_NUMERO", "DATA_SAIDA", "DATA_ENTRADA", "CTCA_CONSTANTE", "MERC_ID", "FIM_OPER_DDC") AS 
  SELECT TIDO.TIDO_CONSTANTE,
          TIDO.TIDO_ID,
          SAIDA.DCO_IDENTIFICACAO DOCUMENTO,
          LOPACLI.LOPA_CNPJ,
          LOPACLI.LOPA_RAZAO_SOCIAL CLIENTE,
          LOPADESP.LOPA_CNPJ CNPJ_DESPACHANTE,
          LOPADESP.LOPA_RAZAO_SOCIAL DESPACHANTE,
          CONT.CONT_NUMERO,
          DECODE (IT.DEP_TS,
                  TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI'), '',
                  TO_DATE (IT.DEP_TS, 'DD/MM/YYYY HH24:MI'))
             DATA_SAIDA,
          IT.ARR_TS DATA_ENTRADA,
          CACA.CTCA_CONSTANTE,
          MERC.MERC_ID,
          OPED.OPED_DT_FIM
     FROM TOPS.ITEM IT,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          BHS.DOCUMENTO SAIDA,
          BHS.AMR_DOCUMENTO_MERCADORIA AMDM,
          BHS.AMR_DOCUMENTO AMD,
          BHS.DOCUMENTO ENTRADA,
          BHS.TIPO_DOCUMENTO TIDO,
          BHS.ESCALA ESCA,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPACLI,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPADESP,
          BHS.CATEGORIA_CARGA CACA,
          BHS.SOLICITACAO_DDC SOLD,
          BHS.OPERACAO_DDC OPED
    WHERE     SAIDA.DCO_LOPA_ID = LOPACLI.LOPA_ID
          AND AMD.AMDO_DCO_ID = SAIDA.DCO_ID
          AND AMD.AMDO_DCO_ID_RELACIONADO = ENTRADA.DCO_ID
          AND AMDM.AMDM_MERC_ID = MERC.MERC_ID
          AND AMDM.AMDM_DCO_ID = ENTRADA.DCO_ID
          AND SAIDA.DCO_LOPA_ID_AG_EMISSORA_CE = LOPADESP.LOPA_ID(+)
          AND SAIDA.DCO_TIDO_ID = TIDO.TIDO_ID
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND MERC.MERC_DT_CANCEL IS NULL
          AND MERC.MERC_STATUS <> 'A'
          AND MERC.MERC_ESCA_ID_IMP = ESCA.ESCA_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND CACA.CTCA_ID = MERC.MERC_CTCA_ID
          AND (   TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
               OR TRIM (IT.ARR_CAR_MANIFEST) =
                     TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
          AND SAIDA.DCO_DT_CANCELAMENTO IS NULL
          AND ENTRADA.DCO_DT_CANCELAMENTO IS NULL
          AND TIDO.TIDO_ENTRADA_SAIDA = 'S'
          AND SOLD.SOLD_MERC_ID(+) = MERC.MERC_ID
          AND OPED.OPED_ID(+) = SOLD.SOLD_OPED_ID
          AND (   IT.DEP_TS <>
                     TO_DATE ('31/12/1900 23:00', 'DD/MM/YYYY HH24:MI')
               OR OPED.OPED_DT_FIM IS NOT NULL)
-------------------------------------------------------------
--Objeto: BILLING. VW_RELATORIO_CARGAS_IMPORTACAO
--Criação: . - Data: 20062014
--Objetivo: view para verificar SAIDAS DE IMPORTAÇÃO.
--Sistema: BFS
-- ALTERAÇÃO TIRAR MERCADORIAS CANCELADAS
-- ALTERAÇÃO TIRAR BL CANCELADO
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_RELATORIO_CNTR_ESTOQUE" ("CONTEINER", "ARMADOR", "PLACE_OF_DELIVERY", "ENTRADA", "CATEGORY", "ISO", "FEL", "TAMANHO", "VIAGEM", "NAVIO", "ACT_BERTH_TS", "SAIDA") AS 
  SELECT TO_CHAR (I.ITEM_NO) CONTEINER,
            TO_CHAR (I.LINE_OPER) ARMADOR,
            TO_CHAR (I.PLACE_OF_DELIVERY) PLACE_OF_DELIVERY,
            TO_CHAR (I.ARR_TS, 'DD/MM/YYYY') ENTRADA,
            TO_CHAR (I.CATEGORY) CATEGORY,
            TO_CHAR (I.ISO) ISO,
            TO_CHAR (I.FEL) FEL,
            TO_CHAR (I.LENGTH) TAMANHO,
            TO_CHAR (ARR_CAR) VIAGEM,
            TO_CHAR (V.VES_NAME) NAVIO,
            TO_CHAR (I.ARR_TS, 'DD/MM/YYYY') ACT_BERTH_TS,
            I.DEP_TS SAIDA
       FROM TOPS.ITEM I, TOPS.VESSEL_DETAILS VD, TOPS.VESSELS V
      WHERE     (I.ARR_CAR = VD.TFC_CODE_I OR I.DEP_CAR = VD.TFC_CODE_e)
            AND VD.VES_CD = V.VES_CD
            AND I.FEL = 'F'
   ORDER BY 1       
-------------------------------------------------------------
--Objeto: BILLING.VW_RELATORIO_CNTR_ESTOQUE
--Criação: . - Data: 30/04/2014
--Objetivo: VIEW para relatório de estoque
--Sistema: BBS
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_REMOCAO_CAIS_ESCALA" ("ITEM_NO", "DATA_REMOCAO", "CATEGORY", "ESCA_NUMERO_VIAGEM", "MERC_ID", "ESCA_ID", "FEL", "LENGTH", "ISO", "LINE_OPER") AS 
  SELECT IT.ITEM_NO,
          IT.DEP_TS AS "DATA_REMOCAO",
          IT.CATEGORY,
          ESCA.ESCA_NUMERO_VIAGEM,
          MERC.MERC_ID,
          ESCA.ESCA_ID,
   --       LOPA.LOPA_ID,
          IT.FEL,
          IT.LENGTH,
          IT.ISO,
          IT.LINE_OPER
     FROM TOPS.ITEM it,
          BHS.CATEGORIA_CARGA CACA,
          BHS.escala esca,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT
      --    ACCESSCONTROL.LOCAL_PARCEIRO LOPA
    WHERE     TRIM (IT.DEP_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_EXP)
          AND IT.CATEGORY IN ('R')
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND MERC.MERC_CTCA_ID = CACA.CTCA_ID
          AND CACA.CTCA_CONSTANTE = 'CS_REMO_TERRA'

-----------------------------------------------------------------
-- Alteração: Vanessa Lopes - Data: 29/06/2017
-- Motivo da alteração: Exibir conteineres de Remoção com viagens imp e exp diferentes.
---------------------------------------------------------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_REMOCAO_ESCALA" ("ITEM_NO", "DATA_REMOCAO", "CATEGORY", "ESCA_NUMERO_VIAGEM", "MERC_ID", "ESCA_ID", "FEL", "LENGTH", "ISO", "LINE_OPER") AS 
  SELECT IT.ITEM_NO,
          IT.DEP_TS AS "DATA_REMOCAO",
          IT.CATEGORY,
          ESCA.ESCA_NUMERO_VIAGEM,
          MERC.MERC_ID,
          ESCA.ESCA_ID,
          IT.FEL,
          IT.LENGTH,
          IT.ISO,
          IT.LINE_OPER
     FROM TOPS.ITEM it,
          BHS.CATEGORIA_CARGA CACA,
          BHS.escala esca,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT
    WHERE     TRIM (IT.DEP_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_imp)
          AND IT.CATEGORY IN ('S')
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
          AND MERC.MERC_CTCA_ID = CACA.CTCA_ID
          AND CACA.CTCA_CONSTANTE = 'CS_REMO_BORDO'
          
          -------------------------------------------------------------------
          --Nome: VW_REMOCAO_ESCALA
          -- Alteração: 29/10/2015 Gabriel Rodrigues
          --Objetivo: de: IT.CATEGORY IN ('R') para :IT.CATEGORY IN ('S')
          -------------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "BILLING"."VW_TICKET_MEDIO" ("APSE_DTHR_PREV_FIM", "ARR_TS", "DATA_SAIDA", "NOCO_ID", "NOCO_NRONFESAP", "NOCO_DTHR_ENVIOSAP", "NOCO_ESCA_ID", "SEPO_NOME", "ISOC_TAMANHO", "LOPA_ID", "LOPA_CNPJ", "CLIENTE", "DCO_CIF_NACIONAL", "DCO_FOB_NACIONAL", "DESC_VALOR", "CNPJ_DESPACHANTE", "DESPACHANTE", "TIDO_CONSTANTE", "TIDO_ID", "DOCUMENTO", "CONT_NUMERO", "ITCO_VALOR", "APSE_ID", "APFL_DTHR_REPROVACAO", "APFL_DTHR_APROVACAO", "MERC_ID") AS 
  SELECT APSE.APSE_DTHR_PREV_FIM,
            IT.ARR_TS,
            DECODE (IT.DEP_TS,
                    TO_DATE ('31/12/1900 23:00', 'dd/mm/yyyy hh24:mi'), NULL,
                    TO_CHAR (IT.DEP_TS, 'dd/mm/YYYY'))
               DATA_SAIDA,
            NOCO.NOCO_ID,
            NOCO.NOCO_NRONFESAP,
            NOCO.NOCO_DTHR_ENVIOSAP,
            NOCO.NOCO_ESCA_ID,
            SEPO.SEPO_NOME,
            ISO.ISOC_TAMANHO,
            LOPACLI.LOPA_ID,
            LOPACLI.LOPA_CNPJ,
            LOPACLI.LOPA_RAZAO_SOCIAL CLIENTE,
            SAIDA.DCO_CIF_NACIONAL,
            SAIDA.DCO_FOB_NACIONAL,
            DES.DESC_VALOR,
            LOPADESP.LOPA_CNPJ CNPJ_DESPACHANTE,
            LOPADESP.LOPA_RAZAO_SOCIAL DESPACHANTE,
            TIDO.TIDO_CONSTANTE,
            TIDO.TIDO_ID,
            SAIDA.DCO_IDENTIFICACAO DOCUMENTO,
            CONT.CONT_NUMERO,
            ITCO.ITCO_VALOR,
            APSE.APSE_ID,
            APFL.APFL_DTHR_REPROVACAO,
            APFL.APFL_DTHR_APROVACAO,
            merc.merc_id
       FROM TOPS.ITEM IT,
            BHS.MERCADORIA MERC,
            BHS.CONTEINER CONT,
            BHS.ISOCODE iso,
            BHS.DOCUMENTO SAIDA,
            BHS.AMR_DOCUMENTO_MERCADORIA AMDM,
            BHS.AMR_DOCUMENTO AMD,
            BHS.DOCUMENTO ENTRADA,
            BHS.TIPO_DOCUMENTO TIDO,
            bhs.escala esca,
            ACCESSCONTROL.LOCAL_PARCEIRO LOPACLI,
            ACCESSCONTROL.LOCAL_PARCEIRO LOPADESP,
            bhs.categoria_carga caca,
            BILLING.APONTAMENTO_SERVICO apse,
            BILLING.ITEM_COBRANCA itco,
            BILLING.NOTA_COBRANCA noco,
            BILLING.SERVICO_PORTUARIO sepo,
            BILLING.DESCONTO des,
            BILLING.APROVACAO_FLUXO APFL
      WHERE     apse.sepo_id = sepo.sepo_id
            AND ITCO.NOCO_ID = NOCO.NOCO_ID
            AND merc.merc_id = APSE.APSE_MERC_ID
            AND APSE.APSE_ID = itco.apse_id
            AND SAIDA.DCO_LOPA_ID = LOPACLI.LOPA_ID
            AND NOCO.NOCO_DCO_ID = SAIDA.DCO_ID
            AND AMD.AMDO_DCO_ID = SAIDA.DCO_ID
            AND AMD.AMDO_DCO_ID_RELACIONADO = ENTRADA.DCO_ID
            AND AMDM.AMDM_MERC_ID = MERC.MERC_ID
            AND AMDM.AMDM_DCO_ID = ENTRADA.DCO_ID
            AND SAIDA.DCO_LOPA_ID_AG_EMISSORA_CE = LOPADESP.LOPA_ID(+)
            AND SAIDA.DCO_TIDO_ID = TIDO.TIDO_ID
            AND MERC.MERC_CONT_ID = CONT.CONT_ID
            AND MERC.MERC_ESCA_ID_IMP = ESCA.ESCA_ID
            AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
            AND CONT.CONT_ISOC_ID = ISO.ISOC_id
            AND CACA.CTCA_ID = MERC.MERC_CTCA_ID
            AND (   TRIM (IT.ARR_CAR) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP)
                 OR TRIM (IT.ARR_CAR_MANIFEST) =
                       TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
            AND saida.DCO_DT_CANCELAMENTO IS NULL
            AND TIDO.TIDO_ENTRADA_SAIDA = 'S'
            AND NOCO.NOCO_DTHR_CANCELAMENTO IS NULL
            AND APSE.APSE_ID = DES.DESC_APSE_ID(+)
            AND DES.DESC_ID = APFL.APFL_DESC_ID(+)
            AND SEPO.SEPO_CONSTANTE LIKE '%CS_ARM%'            
   GROUP BY NOCO.NOCO_ID,
            NOCO.NOCO_NRONFESAP,
            NOCO.NOCO_DTHR_ENVIOSAP,
            NOCO.NOCO_ESCA_ID,
            SEPO.SEPO_NOME,
            ISO.ISOC_TAMANHO,
            LOPACLI.LOPA_ID,
            LOPACLI.LOPA_CNPJ,
            LOPACLI.LOPA_RAZAO_SOCIAL,
            SAIDA.DCO_CIF_NACIONAL,
            SAIDA.DCO_FOB_NACIONAL,
            DES.DESC_VALOR,
            LOPADESP.LOPA_CNPJ,
            LOPADESP.LOPA_RAZAO_SOCIAL,
            TIDO.TIDO_CONSTANTE,
            TIDO.TIDO_ID,
            SAIDA.DCO_IDENTIFICACAO,
            CONT.CONT_NUMERO,
            ITCO.ITCO_VALOR,
            APSE.APSE_ID,
            APSE.APSE_DTHR_PREV_FIM,
            IT.ARR_TS,
            IT.DEP_TS,
            APFL.APFL_DTHR_REPROVACAO,
            APFL.APFL_DTHR_APROVACAO,
            merc.merc_id
-------------------------------------------------------------
--Objeto: BILLING. VW_TICKET_MEDIO
--Criação: . - Data: 20062014
--Objetivo: view para verificar TABELAS VINCULADAS.
--Sistema: BBS
-- ALTERAÇÃO  26082014  apenas contêiner c saida
-------------------------------------------------------------

  CREATE OR REPLACE PROCEDURE "BLOQUEIO"."SP_INSERE_CLIENTE_TOS" (
   P_OPERACAO                       IN VARCHAR2,
   P_CNPJ_CPF                       IN VARCHAR2,
   P_DESCRICAO                      IN VARCHAR2)
IS
   /******************************************************************************
   --Objeto:SP_INSERE_CLIENTE_TOS
   --Criação:CELIA - 06/02/2013
   --Objetivo: INSERIR CLIENTE NA BASE TOS
   --Sistema: MANIFESTO
   ******************************************************************************/
   V_ROWS   NUMBER;
   EXISTE   EXCEPTION;
BEGIN
   IF P_OPERACAO = 'I'
   THEN
      SELECT COUNT (*)
        INTO V_ROWS
        FROM TOPS.CUSTOMER CUST
       WHERE CUST.ADDR1 = P_CNPJ_CPF ;

      IF V_ROWS = 0
      THEN
         INSERT
           INTO TOPS.CUSTOMER (CUST_REG_NO,
                               CUST_TYPE,
                               FULL_NAME,
                               ADDR1)
         VALUES (SQ_SP_CLIENTE_TOS.NEXTVAL,
                 'I', -- Importacao 
                 P_DESCRICAO, P_CNPJ_CPF);      
      END IF;
   END IF;     
EXCEPTION
   WHEN EXISTE
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'REGISTRO JÁ CADASTRADO');
   WHEN OTHERS
   THEN
      RAISE;
END SP_INSERE_CLIENTE_TOS;

  CREATE OR REPLACE FORCE VIEW "BLOQUEIO"."VW_LISTA_ATRACACAO" ("ID", "NOME_NAVIO", "CODIGONAVIO", "COMPRIMENTO", "ARMADOR", "VIAGEM", "ETACHEGADA", "ETBATRACACAO", "ETSDESATRACACAO", "PONTO", "UNIDADES", "OBSERVACOES", "DIRECAOATRACACAO", "MOTIVOESPERA", "JOINT", "SERVICO", "CALLSIGN", "LLOYDSREG", "EMB", "DESCARGA", "REMOCAO", "NUMEROESCALA", "RAP", "TRA_MARGEM", "TRA_TOS", "VIAGEMTOS") AS 
  SELECT DISTINCT
          SCHE.VES_ID Id,
          VESS.VES_NAME Nome_Navio,
          VESS.LLOYDS_NO CodigoNavio,
          VESS.VES_LEN Comprimento,
          SCHE.LINE_OPER Armador,
          SCHE.IN_VOYAGE Viagem,
          SCHE.EST_BERTH_TS EtaChegada,
          SCHE.ACT_BERTH_TS EtbAtracacao,
          SCHE.ACT_DEP_TS EtsDesatracacao,
          SCHE.PREFER_BERTH_SIDE Ponto,
            SCHE.EST_DISCHARGE_EMPTY
          + SCHE.EST_DISCHARGE_FULL
          + SCHE.EST_LOAD_EMPTY
          + SCHE.EST_LOAD_FULL
          + SCHE.EST_RESTOW
             Unidades,
          VESS.REMARKS Observacoes,
          DECODE (SCHE.BTOA_SIDE,
                  'P', 'BOMBORDO',
                  'S', 'BOROESTE',
                  SCHE.BTOA_SIDE)
             DirecaoAtracacao,
          VWSR.DESCRIPTION MotivoEspera,
          SCHE.LINE_OPER Joint,
          SCHE.VES_SERVICE Servico,
          SCHE.CALL_SIGN CallSign,
          SCHE.LLOYDS_NO LloydsReg,
          SCHE.EST_LOAD_EMPTY + SCHE.EST_LOAD_FULL Emb,
          SCHE.EST_DISCHARGE_EMPTY + SCHE.EST_DISCHARGE_FULL Descarga,
          SCHE.EST_RESTOW Remocao,
          ESCA.ESCA_NUMERO NumeroEscala,
          ESCA.ESCA_RAP Rap,
          TRA.TRA_MARGEM,
          TRA.TRA_TOS,
          SCHE.TFC_CODE_E ViagemTos
     FROM TOPS.VESSELS VESS,
          TOPS.VESSEL_DETAILS SCHE,
          MANIFESTO.ESCALA ESCA,
          MANIFESTO.TRA TRA,
          TOPS.VIEW_WORK_STOP_REASON VWSR
    WHERE     VESS.LLOYDS_NO = SCHE.LLOYDS_NO
          AND SCHE.TFC_CODE_I = ESCA.ESCA_VIAGEM_TOS(+)
          AND ESCA.ESCA_TRA_ID = TRA.TRA_ID(+)
          AND SCHE.STOP_CODE = VWSR.CODE(+)

  CREATE OR REPLACE FORCE VIEW "EDISRV"."VW_ITEM_DISCHARGE_LIST" ("ITEM_KEY", "ITEM_NO", "ISO", "FEL", "GROSS_KG", "TARE_KG", "CATEGORY", "SEAL_NO_CURRENT", "I_LINE_OPER", "CAR", "CAR_BY", "CAR_TS", "VOYAGE", "VD_LINE_OPER", "LLOYDS_NO", "VES_NAME", "LIC_PLATE_NO", "VISIT_CODE", "BL_NO", "BL_TC", "BOOK_NO", "STOWAGE_CELL", "ORG_PORT", "LL_DISCH_PORT", "FDISCH_PORT") AS 
  WITH CONVERSAO_PORTOS
           AS (SELECT CA_P.COAR_DE AS DE, CA_P.COAR_PARA AS PARA
                 FROM EDISRV.FORMATO F
                      INNER JOIN EDISRV.CONVERSAO_ARMADOR CA_P
                         ON (    (CA_P.COAR_FORM_ID = F.FORM_ID)
                             AND (CA_P.COAR_LINER IN ('MSK', 'HAM', 'ALI'))
                             AND (CA_P.COAR_TIPO = 'PORTO'))
                WHERE F.DESCRICAO = 'COARRI DISCHARGE')
   SELECT I.ITEM_KEY,
          I.ITEM_NO,
          I.ORIG_ISO AS ISO,
          I.FEL,
          (I.GROSS * 1000) AS GROSS_KG,
          (I.TARE * 1000) AS TARE_KG,
          I.CATEGORY,
          I.SEAL_NO_CURRENT,
          NVL (MEOI.MAERSK_OPERATOR, TRIM (I.LINE_OPER)) AS I_LINE_OPER,
          I.ARR_CAR AS CAR,
          I.ARR_BY AS CAR_BY,
          I.ARR_TS AS CAR_TS,
          NVL (VV.OUT_VOYAGE, VD.OUT_VOYAGE) AS VOYAGE,
          NVL (MEOV.MAERSK_OPERATOR, TRIM (VD.LINE_OPER)) AS VD_LINE_OPER,
          VD.LLOYDS_NO,
          VD.VES_NAME,
          NULL AS LIC_PLATE_NO,
          I.VISIT_CODE,
          D.DCO_IDENTIFICACAO AS BL_NO,
          NULL AS BL_TC,
          I.BOOK_NO,
          (TRIM (IL.X) || TRIM (IL.Y) || TRIM (IL.Z)) AS STOWAGE_CELL,
          COALESCE (CP_POL.PARA, POL.PORT_PENTAGRAMA, I.ORG_PORT) AS ORG_PORT,
          I.LL_DISCH_PORT,
          I.FDISCH_PORT
     FROM TOPS.ITEM I
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOI
             ON (MEOI.BTP_OPERATOR = TRIM (I.LINE_OPER))
          INNER JOIN TOPS.VESSEL_DETAILS VD ON (VD.TFC_CODE_I = I.ARR_CAR)
          LEFT JOIN TOPS.VES_VOYAGE VV
             ON ( (VV.VES_ID = VD.VES_ID) AND (VV.LINE_OPER = I.LINE_OPER))
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOV
             ON (MEOV.BTP_OPERATOR = TRIM (VD.LINE_OPER))
          INNER JOIN TOPS.ITEM_LOCATION IL
             ON (    (IL.ITEM_KEY = I.ITEM_KEY)
                 AND (IL.STK_REF = VD.VES_ID)
                 AND (IL.CRT_TS =
                         (SELECT MAX (ILT.CRT_TS)
                            FROM TOPS.ITEM_LOCATION ILT
                           WHERE     (ILT.ITEM_KEY = I.ITEM_KEY)
                                 AND (ILT.STK_REF = VD.VES_ID))))
          INNER JOIN BHS.CONTEINER C ON (C.CONT_NUMERO = TRIM (I.ITEM_NO))
          INNER JOIN BHS.ESCALA E
             ON (E.ESCA_VIAGEM_TOS_IMP = TRIM (VD.TFC_CODE_I))
          INNER JOIN BHS.MERCADORIA M
             ON (    (M.MERC_CONT_ID = C.CONT_ID)
                 AND (M.MERC_ESCA_ID_IMP = E.ESCA_ID))
          LEFT JOIN BHS.AMR_DOCUMENTO_MERCADORIA A
             ON (A.AMDM_MERC_ID = M.MERC_ID)
          LEFT JOIN BHS.DOCUMENTO D ON (D.DCO_ID = A.AMDM_DCO_ID)
          LEFT JOIN BHS.TIPO_DOCUMENTO TD
             ON ( (TD.TIDO_ID = D.DCO_TIDO_ID) AND (TD.TIDO_CONSTANTE = 'BL'))
          LEFT JOIN BHS.TIPO_CONHECIMENTO TC
             ON (    TC.TICO_ID = D.DCO_TICO_ID
                 AND (TC.TICO_DESCRICAO IN ('BL', 'MBL')))
          LEFT JOIN BHS.PORTO POL ON (POL.PORT_ID = D.DCO_PORT_ID_POL)
          LEFT JOIN CONVERSAO_PORTOS CP_POL
             ON (CP_POL.DE = NVL (POL.PORT_PENTAGRAMA, I.ORG_PORT))
    WHERE     I.ARR_BY = 'V'
          AND I.ARR_TS >= SYSDATE - 7
          AND NOT EXISTS
                 (SELECT 1
                    FROM EDISRV.MAERSK_EDI ME
                   WHERE     ME.MSKE_ITEM_KEY = I.ITEM_KEY
                         AND ME.MSKE_MENSAGEM_TIPO = 1)
          AND I.CATEGORY NOT IN ('R', 'S')
          AND (   I.LINE_OPER IN ('SAF',
                                  'MAE',
                                  'MSK',
                                  'SEA',
                                  'ALI',
                                  'HAM')
               OR VD.LINE_OPER IN ('MAE', 'MSK', 'HAM', 'ALI'))
--AND ROWNUM <= 100
-------------------------------------------------------------
--Objeto: EDISRV.VW_ITEM_DISCHARGE_LIST
--Criação: T2S - Data: 29/08/2014
--Objetivo: View que recupera todos os contêineres Maersk com mensagem COARRI de desembarque pendente
--Sistema: EDI MAERSK
--Alteração: Carla Trindade - Data: 29/01/2015
--Motivo da alteração: Solução paliativa para redução do custo, será gerado um projeto para uma melhor analise de sistemas.
--Inclusão armador SEA(20/07) - Carla
--Alteração: Italo Petrucio  - Data 07/12/2017
--Motivo da alteração: Retirar a Mercosul dos envios de EDI para a Maersk
--Alteração: Italo / Hugo - T2S  - Data 08/01/2018
--Motivo da alteração: Ajuste Viagem parceiro e conversão de porto
--Alteração: Robson Linhares - Data 30/01/2019
--Motivo da alteração: Inclusão dos liners(HAM, ALI)
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "EDISRV"."VW_ITEM_GATEIN_LIST" ("ITEM_KEY", "ITEM_NO", "ISO", "FEL", "GROSS_KG", "TARE_KG", "CATEGORY", "SEAL_NO_CURRENT", "I_LINE_OPER", "CAR", "CAR_BY", "CAR_TS", "VOYAGE", "VD_LINE_OPER", "LLOYDS_NO", "VES_NAME", "LIC_PLATE_NO", "VISIT_CODE", "BL_NO", "BL_TC", "BOOK_NO", "STOWAGE_CELL", "ORG_PORT", "LL_DISCH_PORT", "FDISCH_PORT") AS 
  WITH CONVERSAO_PORTOS
           AS (SELECT CA_P.COAR_DE AS DE, CA_P.COAR_PARA AS PARA
                 FROM EDISRV.FORMATO F
                      INNER JOIN EDISRV.CONVERSAO_ARMADOR CA_P
                         ON (    (CA_P.COAR_FORM_ID = F.FORM_ID)
                             AND (CA_P.COAR_LINER IN ('MSK', 'HAM', 'ALI'))
                             AND (CA_P.COAR_TIPO = 'PORTO'))
                WHERE F.DESCRICAO = 'CODECO IN')
   SELECT I.ITEM_KEY,
          I.ITEM_NO,
          I.ORIG_ISO AS ISO,
          I.FEL,
          (I.GROSS * 1000) AS GROSS_KG,
          (I.TARE * 1000) AS TARE_KG,
          I.CATEGORY,
          I.SEAL_NO_CURRENT,
          NVL (MEOI.MAERSK_OPERATOR, TRIM (I.LINE_OPER)) AS I_LINE_OPER,
          I.ARR_CAR AS CAR,
          I.ARR_BY AS CAR_BY,
          I.ARR_TS AS CAR_TS,
          NVL (VV.OUT_VOYAGE, VD.OUT_VOYAGE) AS VOYAGE,
          NVL (MEOV.MAERSK_OPERATOR, TRIM (VD.LINE_OPER)) AS VD_LINE_OPER,
          VD.LLOYDS_NO,
          VD.VES_NAME,
          T.LIC_PLATE_NO,
          I.VISIT_CODE,
          NULL AS BL_NO,
          NULL AS BL_TC,
          I.BOOK_NO,
          NULL AS STOWAGE_CELL,
          I.ORG_PORT,
          NVL (CP_POD.PARA, I.LL_DISCH_PORT) AS LL_DISCH_PORT,
          I.FDISCH_PORT
     FROM TOPS.ITEM I
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOI
             ON (MEOI.BTP_OPERATOR = TRIM (I.LINE_OPER))
          INNER JOIN TOPS.BOOKINGS B ON ( --B.BOOK_NO = I.BOOK_NO AND (B.ITEM_TYPE || B.ITEM_SIZE || B.HEIGHT) = (I.ITEM_TYPE || I.LENGTH || I.HEIGHT))
                                         B.BOOK_KEY = I.BOOK_KEY)
          INNER JOIN TOPS.VESSEL_DETAILS VD ON (VD.TFC_CODE_E = B.TFC_CODE)
          LEFT JOIN TOPS.VES_VOYAGE VV
             ON ( (VV.VES_ID = VD.VES_ID) AND (VV.LINE_OPER = I.LINE_OPER))
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOV
             ON (MEOV.BTP_OPERATOR = TRIM (VD.LINE_OPER))
          INNER JOIN TOPS.TRK_TRANSACT TT
             ON (TT.VISIT_CODE = I.VISIT_CODE AND TT.ITEM_KEY = I.ITEM_KEY)
          INNER JOIN TOPS.TRUCK T ON (T.TRK_KEY = TT.TRK_KEY)
          LEFT JOIN CONVERSAO_PORTOS CP_POD ON (CP_POD.DE = I.LL_DISCH_PORT)
    WHERE     I.ARR_BY = 'T'
          AND I.ARR_TS >= SYSDATE - 7
          AND NOT EXISTS
                 (SELECT 1
                    FROM EDISRV.MAERSK_EDI ME
                   WHERE     ME.MSKE_ITEM_KEY = I.ITEM_KEY
                         AND ME.MSKE_MENSAGEM_TIPO = 2)
          AND I.LINE_OPER IN ('SAF',
                              'MAE',
                              'MSK',
                              'SEA',
                              'ALI',
                              'HAM')

  CREATE OR REPLACE FORCE VIEW "EDISRV"."VW_ITEM_GATEOUT_LIST" ("ITEM_KEY", "ITEM_NO", "ISO", "FEL", "GROSS_KG", "TARE_KG", "CATEGORY", "SEAL_NO_CURRENT", "I_LINE_OPER", "CAR", "CAR_BY", "CAR_TS", "VOYAGE", "VD_LINE_OPER", "LLOYDS_NO", "VES_NAME", "LIC_PLATE_NO", "VISIT_CODE", "BL_NO", "BL_TC", "BOOK_NO", "STOWAGE_CELL", "ORG_PORT", "LL_DISCH_PORT", "FDISCH_PORT") AS 
  WITH ID_ULTIMO_ROLLOVER_NAVIO
           AS (  SELECT MAX (RLNA_ID) AS RLNA_ID
                   FROM BHS.ROLLOVER_NAVIO
               GROUP BY RLNA_MERC_ID)
   SELECT I.ITEM_KEY,
          I.ITEM_NO,
          I.ORIG_ISO AS ISO,
          I.FEL,
          (I.GROSS * 1000) AS GROSS_KG,
          (I.TARE * 1000) AS TARE_KG,
          I.CATEGORY,
          I.SEAL_NO_CURRENT,
          NVL (MEOI.MAERSK_OPERATOR, TRIM (I.LINE_OPER)) AS I_LINE_OPER,
          I.DEP_CAR AS CAR,
          I.DEP_BY AS CAR_BY,
          I.DEP_TS AS CAR_TS,
          NVL (VV.IN_VOYAGE, VD.IN_VOYAGE) AS VOYAGE,
          NVL (MEOV.MAERSK_OPERATOR, TRIM (VD.LINE_OPER)) AS VD_LINE_OPER,
          VD.LLOYDS_NO,
          VD.VES_NAME,
          T.LIC_PLATE_NO,
          I.VISIT_CODE,
          BL.BL_NO,
          BL.BL_TC,
          NULL AS BOOK_NO,
          NULL AS STOWAGE_CELL,
          I.ORG_PORT,
          I.LL_DISCH_PORT,
          I.FDISCH_PORT
     FROM TOPS.ITEM I
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOI
             ON (MEOI.BTP_OPERATOR = TRIM (I.LINE_OPER))
          INNER JOIN TOPS.VESSEL_DETAILS VD ON (VD.TFC_CODE_I = I.ARR_CAR)
          LEFT JOIN TOPS.VES_VOYAGE VV
             ON ( (VV.VES_ID = VD.VES_ID) AND (VV.LINE_OPER = I.LINE_OPER))
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOV
             ON (MEOV.BTP_OPERATOR = TRIM (VD.LINE_OPER))
          INNER JOIN TOPS.TRK_TRANSACT TT
             ON (TT.VISIT_CODE = I.VISIT_CODE AND I.ITEM_KEY = TT.ITEM_KEY)
          INNER JOIN TOPS.TRUCK T ON (T.TRK_KEY = TT.TRK_KEY)
          INNER JOIN BHS.CONTEINER C ON (C.CONT_NUMERO = TRIM (I.ITEM_NO))
          INNER JOIN BHS.ESCALA E
             ON (E.ESCA_VIAGEM_TOS_IMP = TRIM (VD.TFC_CODE_I))
          INNER JOIN BHS.MERCADORIA M
             ON (    (M.MERC_CONT_ID = C.CONT_ID)
                 AND (M.MERC_ESCA_ID_IMP = E.ESCA_ID))
          LEFT JOIN
          (SELECT A.AMDM_MERC_ID AS MERC_ID,
                  D.DCO_IDENTIFICACAO AS BL_NO,
                  TC.TICO_DESCRICAO AS BL_TC
             FROM BHS.AMR_DOCUMENTO_MERCADORIA A
                  INNER JOIN BHS.DOCUMENTO D ON (D.DCO_ID = A.AMDM_DCO_ID)
                  INNER JOIN BHS.TIPO_DOCUMENTO TD
                     ON (    (TD.TIDO_ID = D.DCO_TIDO_ID)
                         AND (TD.TIDO_CONSTANTE = 'BL'))
                  INNER JOIN BHS.TIPO_CONHECIMENTO TC
                     ON (    (TC.TICO_ID = D.DCO_TICO_ID)
                         AND (TC.TICO_DESCRICAO IN ('BL', 'MBL')))
                  INNER JOIN BHS.PORTO POL
                     ON (POL.PORT_ID = D.DCO_PORT_ID_POL)) BL
             ON (BL.MERC_ID = M.MERC_ID)
    WHERE     I.DEP_BY = 'T'
          AND I.DEP_TS >= SYSDATE - 7
          AND NOT EXISTS
                 (SELECT 1
                    FROM EDISRV.MAERSK_EDI ME
                   WHERE     (ME.MSKE_ITEM_KEY = I.ITEM_KEY)
                         AND (ME.MSKE_MENSAGEM_TIPO = 3))
          AND I.LINE_OPER IN ('SAF',
                              'MAE',
                              'MSK',
                              'SEA',
                              'ALI',
                              'HAM')
   --AND ROWNUM <= 100
   UNION
   SELECT I.ITEM_KEY,
          I.ITEM_NO,
          I.ORIG_ISO AS ISO,
          I.FEL,
          (I.GROSS * 1000) AS GROSS_KG,
          (I.TARE * 1000) AS TARE_KG,
          I.CATEGORY,
          I.SEAL_NO_CURRENT,
          NVL (MEOI.MAERSK_OPERATOR, TRIM (I.LINE_OPER)) AS I_LINE_OPER,
          I.DEP_CAR AS CAR,
          I.DEP_BY AS CAR_BY,
          I.DEP_TS AS CAR_TS,
          NVL (VV.IN_VOYAGE, VD.IN_VOYAGE) AS VOYAGE,
          NVL (MEOV.MAERSK_OPERATOR, TRIM (VD.LINE_OPER)) AS VD_LINE_OPER,
          VD.LLOYDS_NO,
          VD.VES_NAME,
          T.LIC_PLATE_NO,
          I.VISIT_CODE,
          NULL AS BL_NO,
          NULL AS BL_TC,
          NULL AS BOOK_NO,
          NULL AS STOWAGE_CELL,
          I.ORG_PORT,
          I.LL_DISCH_PORT,
          I.FDISCH_PORT
     FROM TOPS.ITEM I
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOI
             ON (MEOI.BTP_OPERATOR = TRIM (I.LINE_OPER))
          INNER JOIN TOPS.TRK_TRANSACT TT
             ON (TT.VISIT_CODE = I.VISIT_CODE AND TT.ITEM_KEY = I.ITEM_KEY)
          INNER JOIN TOPS.TRUCK T ON (T.TRK_KEY = TT.TRK_KEY)
          INNER JOIN TAS.AGENDAMENTO AG ON (AG.AGEN_ID = TRIM (I.VISIT_CODE))
          INNER JOIN TAS.MERCADORIA TM ON (TM.MERC_ID = AG.MERC_ID)
          INNER JOIN
          (SELECT RLNA_MERC_ID, RLNA_ESCA_ID_ANTES
             FROM ID_ULTIMO_ROLLOVER_NAVIO IURN
                  INNER JOIN BHS.ROLLOVER_NAVIO RN
                     ON (RN.RLNA_ID = IURN.RLNA_ID)) URN
             ON (URN.RLNA_MERC_ID = TM.MERC_ID_BHS)
          INNER JOIN BHS.ESCALA E ON (E.ESCA_ID = URN.RLNA_ESCA_ID_ANTES)
          INNER JOIN TOPS.VESSEL_DETAILS VD
             ON (TRIM (VD.TFC_CODE_E) = TRIM (E.ESCA_VIAGEM_TOS_EXP))
          LEFT JOIN TOPS.VES_VOYAGE VV
             ON ( (VV.VES_ID = VD.VES_ID) AND (VV.LINE_OPER = I.LINE_OPER))
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOV
             ON (MEOV.BTP_OPERATOR = TRIM (VD.LINE_OPER))
    WHERE     I.ARR_BY = 'T'
          AND I.DEP_BY = 'T'
          AND I.CATEGORY = 'E'
          AND I.DEP_TS >= SYSDATE - 7
          AND NOT EXISTS
                 (SELECT 1
                    FROM EDISRV.MAERSK_EDI ME
                   WHERE     (ME.MSKE_ITEM_KEY = I.ITEM_KEY)
                         AND (ME.MSKE_MENSAGEM_TIPO = 3))
          AND I.LINE_OPER IN ('SAF',
                              'MAE',
                              'MSK',
                              'SEA',
                              'ALI',
                              'HAM')

-------------------------------------------------------------
--Objeto: EDISRV.VW_ITEM_GATEOUT_LIST
--Criação: T2S - Data: 29/08/2014
--Objetivo: View que recupera todos os contêineres Maersk com mensagem COARRI de desembarque pendente
--Sistema: EDI MAERSK
--Alteração: Carla Trindade - Data: 29/01/2015
--Motivo da alteração: Solução paliativa para redução do custo, será gerado um projeto para uma melhor analise de sistemas.
--Inclusão do armador SEA  20/07-Carla
--Alteração: Italo Petrucio  - Data 07/12/2017
--Motivo da alteração: Retirar a Mercosul dos envios de EDI para a Maersk
--Alteração: Italo / Hugo - T2S  - Data 08/01/2018
--Motivo da alteração: Ajuste Viagem parceiro
--Alteração: Robson Linhares - Data 30/01/2019
--Motivo da alteração: Inclusão dos liners(HAM, ALI)
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "EDISRV"."VW_ITEM_LOADING_LIST" ("ITEM_KEY", "ITEM_NO", "ISO", "FEL", "GROSS_KG", "TARE_KG", "CATEGORY", "SEAL_NO_CURRENT", "I_LINE_OPER", "CAR", "CAR_BY", "CAR_TS", "VOYAGE", "VD_LINE_OPER", "LLOYDS_NO", "VES_NAME", "LIC_PLATE_NO", "VISIT_CODE", "BL_NO", "BL_TC", "BOOK_NO", "STOWAGE_CELL", "ORG_PORT", "LL_DISCH_PORT", "FDISCH_PORT") AS 
  WITH CONVERSAO_PORTOS
           AS (SELECT CA_P.COAR_DE AS DE, CA_P.COAR_PARA AS PARA
                 FROM EDISRV.FORMATO F
                      INNER JOIN EDISRV.CONVERSAO_ARMADOR CA_P
                         ON (    (CA_P.COAR_FORM_ID = F.FORM_ID)
                             AND (CA_P.COAR_LINER IN ('MSK', 'HAM', 'ALI'))
                             AND (CA_P.COAR_TIPO = 'PORTO'))
                WHERE F.DESCRICAO = 'COARRI LOADING')
   SELECT I.ITEM_KEY,
          I.ITEM_NO,
          I.ORIG_ISO AS ISO,
          I.FEL,
          (I.GROSS * 1000) AS GROSS_KG,
          (I.TARE * 1000) AS TARE_KG,
          I.CATEGORY,
          I.SEAL_NO_CURRENT,
          NVL (MEOI.MAERSK_OPERATOR, TRIM (I.LINE_OPER)) AS I_LINE_OPER,
          I.DEP_CAR AS CAR,
          I.DEP_BY AS CAR_BY,
          I.DEP_TS AS CAR_TS,
          NVL (VV.IN_VOYAGE, VD.IN_VOYAGE) AS VOYAGE,
          NVL (MEOV.MAERSK_OPERATOR, TRIM (VD.LINE_OPER)) AS VD_LINE_OPER,
          VD.LLOYDS_NO,
          VD.VES_NAME,
          NULL AS LIC_PLATE_NO,
          I.VISIT_CODE,
          NULL AS BL_NO,
          NULL AS BL_TC,
          I.BOOK_NO,
          (TRIM (IL.X) || TRIM (IL.Y) || TRIM (IL.Z)) AS STOWAGE_CELL,
          I.ORG_PORT,
          NVL (CP_POD.PARA, I.LL_DISCH_PORT) AS LL_DISCH_PORT,
          NVL (CP_FPOD.PARA, I.FDISCH_PORT) AS FDISCH_PORT
     FROM TOPS.ITEM I
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOI
             ON (MEOI.BTP_OPERATOR = TRIM (I.LINE_OPER))
          INNER JOIN TOPS.VESSEL_DETAILS VD ON (VD.TFC_CODE_E = I.DEP_CAR)
          LEFT JOIN TOPS.VES_VOYAGE VV
             ON ( (VV.VES_ID = VD.VES_ID) AND (VV.LINE_OPER = I.LINE_OPER))
          LEFT JOIN EDISRV.MAERSK_EDI_OPERATOR MEOV
             ON (MEOV.BTP_OPERATOR = TRIM (VD.LINE_OPER))
          INNER JOIN TOPS.ITEM_LOCATION IL
             ON (    (IL.ITEM_KEY = I.ITEM_KEY)
                 AND (IL.STK_REF = VD.VES_ID)
                 AND (IL.CRT_TS =
                         (SELECT MAX (ILT.CRT_TS)
                            FROM TOPS.ITEM_LOCATION ILT
                           WHERE     (ILT.ITEM_KEY = I.ITEM_KEY)
                                 AND (ILT.STK_REF = VD.VES_ID))))
          LEFT JOIN CONVERSAO_PORTOS CP_POD ON (CP_POD.DE = I.LL_DISCH_PORT)
          LEFT JOIN CONVERSAO_PORTOS CP_FPOD ON (CP_FPOD.DE = I.FDISCH_PORT)
    WHERE     I.DEP_BY = 'V'
          AND I.DEP_TS >= SYSDATE - 7
          AND NOT EXISTS
                 (SELECT 1
                    FROM EDISRV.MAERSK_EDI ME
                   WHERE     ME.MSKE_ITEM_KEY = I.ITEM_KEY
                         AND ME.MSKE_MENSAGEM_TIPO = 0)
          AND (   I.LINE_OPER IN ('SAF',
                                  'MAE',
                                  'MSK',
                                  'SEA',
                                  'HAM',
                                  'ALI')
               OR VD.LINE_OPER IN ('MAE', 'MSK', 'HAM', 'ALI'))
          AND (   (    I.CATEGORY IN ('R', 'S')
                   AND VD.LINE_OPER IN ('SAF',
                                        'MAE',
                                        'MSK',
                                        'SEA',
                                        'HAM',
                                        'ALI'))
               OR I.CATEGORY NOT IN ('R', 'S'))

-------------------------------------------------------------
--Objeto: EDISRV.VW_ITEM_LOADING_LIST
--Criação: T2S - Data: 29/08/2014
--Objetivo: View que recupera todos os contêineres Maersk com mensagem COARRI de embarque pendente
--Sistema: EDI MAERSK
--Alteração: Carla Trindade - Data: 29/01/2015
--Motivo da alteração: Solução paliativa para redução do custo, será gerado um projeto para uma melhor analise de sistemas.
--Alteração: Robson Linhares - Data 19/10/2015
--Motivo da alteração: Inclusão de mais um filtro para os casos de Restow de navios parceiros, a Maersk não quer receber o EDI.
--Alteração: Italo Petrucio  - Data 07/12/2017
--Motivo da alteração: Retirar a Mercosul dos envios de EDI para a Maersk
--Alteração: Hugo de Lima Gomes  - Data 22/12/2017
--Motivo da alteração: Adição de conversão de pentagrama de porto, quando necessária
--Alteração: Italo / Hugo - T2S  - Data 08/01/2018
--Motivo da alteração: Ajuste Viagem parceiro e conversão de porto
--Alteração: Robson Linhares - Data 30/01/2019
--Motivo da alteração: Inclusão dos liners(HAM, ALI)
-------------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_CHE_MASTER" ("CHE_ID", "CHE_TYPE", "DESCR") AS 
  select trim(upper(vcm.che_id)) as che_id,
       trim(upper(vcm.che_type)) as che_type,
       trim(upper(vcm.descr)) as descr 
from tops.view_che_master vcm
where trim(upper(vcm.che_id)) is not null
and trim(upper(vcm.che_type)) is not null
and trim(upper(vcm.descr)) is not null
and not exists (select e.cod_equip from equipamento e where e.cod_equip = trim(upper(vcm.che_id)))

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_CUSTOMER" ("CUST_REG_NO", "CNPJ_SM", "CNPJ", "FULL_NAME", "CUST_TYPE", "CLASSIFICACAO") AS 
  SELECT
    trim(upper(vc.cust_reg_no))                                AS cust_reg_no,
    REPLACE(REPLACE(REPLACE(TRANSLATE(trim(upper(vc.cnpj)),',$,%,#,@,*,&,.,/,-, , ',' '), CHR(10)), CHR(13)), CHR(9)) AS cnpj_sm,
    trim(upper(vc.cnpj))                                       AS cnpj,
    trim(upper(vc.full_name))                                  AS full_name,
    trim(upper(vc.cust_type))                                  AS cust_type,
    (
      SELECT
        targa
      FROM
        btp_conversao_targa_tos
      WHERE
        trim(vc.cust_type) = trim(tos)
      AND tipo             = 'TIPOCLIENTE'
    ) AS classificacao
  FROM
    tops.view_customer vc
  WHERE
    trim(upper(vc.cust_type)) IN
    (
      SELECT
        tos
      FROM
        btp_conversao_targa_tos
      WHERE
        tipo     ='TIPOCLIENTE'
      AND targa IS NOT NULL
    )
  AND NOT EXISTS
    (
      SELECT
        bctt.tos
      FROM
        btp_conversao_targa_tos bctt
      WHERE
        bctt.tos = trim(upper(vc.cust_reg_no))
    )

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_CUSTOMER_TYPE" ("CUST_TYPE") AS 
  select distinct trim(upper(vc.cust_type)) as cust_type
from tops.view_customer vc
where not exists (select bctt.tos from btp_conversao_targa_tos bctt where tipo ='TIPOCLIENTE' and trim(upper(vc.cust_type)) = bctt.tos)
and trim(upper(vc.cust_type)) is not null

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_HAZ_MASTER" ("HAZ_CLASS", "HAZ_UN_NO", "HAZ_TECH_NAME", "DESCR", "flashpoint_type") AS 
  select trim(upper(vhm.haz_class)) as haz_class,
       trim(upper(vhm.haz_un_no)) as haz_un_no,
       trim(upper(vhm.haz_tech_name)) as haz_tech_name,
       trim(upper(vhm.descr)) as descr,
       trim(upper(vhm.flashpoint_type)) as flashpoint_type	
from tops.view_haz_master vhm
where trim(upper(vhm.haz_class)) is not null 
and trim(upper(vhm.haz_un_no)) is not null 
and trim(upper(vhm.haz_tech_name)) is not null 
and trim(upper(vhm.descr)) is not null
and not exists (select cun.cod_classif_un from classificacao_un cun where cun.cod_classif_un = trim(upper(vhm.haz_un_no)))

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_ISO_CODE" ("ISO", "DESCR", "CTR_TYPE", "LENGTH", "HEIGHT", "TARE", "DSC_ISO") AS 
  select trim(upper(vic.iso)) as iso,
       trim(upper(vic.descr)) as descr,
       trim(upper(vic.ctr_type)) as ctr_type,
       trim(upper(vic.length)) as length,
       trim(upper(vic.height)) as height,
       trim(upper(vic.tare)) as tare,
       trim(upper(vic.dsc_iso)) as dsc_iso
from tops.view_iso_code vic 
where trim(upper(vic.descr)) is not null
and trim(upper(vic.ctr_type)) is not null
and trim(upper(vic.length)) is not null
and trim(upper(vic.height)) is not null
and trim(upper(vic.tare)) is not null
and trim(upper(vic.dsc_iso)) is not null
and not exists (select ic.codigo from host.iso_code ic where ic.codigo = trim(upper(vic.iso)))

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_OPERATOR" ("OPER_NAME", "FULL_NAME", "oper_class") AS 
  select trim(upper(tvo.oper_name)) as oper_name, 
       trim(upper(tvo.full_name)) as full_name,
       trim(upper(tvo.oper_class_1)) as oper_class
from tops.view_operator tvo
where not exists (select bctt.tos from btp_conversao_targa_tos bctt where bctt.tos = trim(upper(tvo.oper_name)))

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_CONVERSAO_PORTCODE" ("UN_PORT", "UN_COUNTRY", "DESCR", "DESC_PORT") AS 
  select trim(upper(vpc.un_port)) as un_port,
       trim(upper(vpc.un_country)) as un_country,
       trim(upper(vpc.descr)) as descr,
       trim(upper(vpc.desc_port)) as desc_port
from tops.view_portcode vpc
where trim(upper(vpc.un_country))||trim(upper(vpc.un_port)) not in (select codigo_pais||cod_porto from porto)
and trim(upper(vpc.un_port)) is not null 
and trim(upper(vpc.un_country)) is not null 
and trim(upper(vpc.descr)) is not null

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_ESTADA_CONTEINER_PROC" ("BECP_DT_HR_ENTRADA", "BECP_DT_HR_SAIDA", "BECP_DT_HR_SAIDA_OPER_PORT", "BECP_DESC_REGIME_CIRC", "BECP_COD_PROP", "BECP_NUM_CONTEINER", "BECP_DIGITO_VERIFICADOR", "BECP_CONTEINER", "BECP_TAMANHO_CONTEINER", "BECP_TIPO_CONTEINER", "BECP_COD_TIPO_DOC", "BECP_NUM_SEQ_DOC", "BECP_DOC_ANO", "BECP_IDENT_DOC", "BECP_IND_ENTRADA_CHEIO_VAZIO", "BECP_NOME_ARMADOR", "BECP_CNPJ_ARMADOR", "BECP_NOME_CLIENTE", "BECP_CNPJ_CLIENTE", "BECP_LOPA_ID_CLIENTE", "BECP_PARC_ID_ARMADOR", "BECP_LOPA_ID_ARMADOR", "BECP_ANO_CNTR", "BECP_SEQ_EST_CONT", "BECP_DOC_FUNC", "BECP_IDENTIFICACAO_ARMADOR", "BECP_CATEGORIA_ARMADOR", "BECP_CODIGO_NAVIO_IMP", "BECP_VIAGEM_ANO_IMP", "BECP_VIAGEM_IMP", "BECP_ESCALA_IMP", "BECP_RAP_IMP", "BECP_CODIGO_NAVIO_EXP", "BECP_VIAGEM_ANO_EXP", "BECP_VIAGEM_EXP", "BECP_ESCALA_EXP", "BECP_RAP_EXP", "BECP_CODIGO_NAVIO_DOC", "BECP_VIAGEM_ANO_DOC", "BECP_VIAGEM_DOC", "BECP_ESCALA_DOC", "BECP_RAP_DOC", "BECP_IND_LONGO_CURSO_CABOTAGEM", "BECP_TERMINAL_ENTREGA", "BECP_CHEGADA_BARRA") AS 
  SELECT TO_CHAR (ESCO.DT_HR_ENTRADA, 'DD/MM/YYYY HH24:MI:SS')
             BECP_DT_HR_ENTRADA,
          ESCO.DT_HR_SAIDA BECP_DT_HR_SAIDA,
          ESCO.DT_HR_SAIDA_OPER_PORT BECP_DT_HR_SAIDA_OPER_PORT,
          RECI.DESC_REGIME_CIRC BECP_DESC_REGIME_CIRC,
          CONT.COD_PROP BECP_COD_PROP,
          CONT.NUM_CONTEINER BECP_NUM_CONTEINER,
          CONT.DIGITO_VERIFICADOR BECP_DIGITO_VERIFICADOR,
          CONT.COD_PROP || CONT.NUM_CONTEINER || CONT.DIGITO_VERIFICADOR
             BECP_CONTEINER,
          ISO.TAMANHO_CONTEINER BECP_TAMANHO_CONTEINER,
          TICO.DESC_TIPO_CONTEINER BECP_TIPO_CONTEINER,
          DOCU.COD_TIPO_DOC BECP_COD_TIPO_DOC,
          DOCU.NUM_SEQ_DOC BECP_NUM_SEQ_DOC,
          DOCU.ANO BECP_DOC_ANO,
          DOCU.IDENT_DOC BECP_IDENT_DOC,
          IND_ENTRADA_CHEIO_VAZIO BECP_IND_ENTRADA_CHEIO_VAZIO,
          EMP_ARM.NOME_EMPRESA BECP_NOME_ARMADOR,
             EST_ARM.identificacao
          || '/'
          || EST_ARM.numero_estabelecimento
          || '-'
          || EST_ARM.digito_cgc
             BECP_CNPJ_ARMADOR,
          EMP_IMPEXP.nome_empresa BECP_NOME_CLIENTE,
             EST_CLI.identificacao
          || '/'
          || EST_CLI.numero_estabelecimento
          || '-'
          || EST_CLI.digito_cgc
             BECP_CNPJ_CLIENTE,
          LOPA.LOPA_ID BECP_LOPA_ID_CLIENTE,
          PARC_ARMADOR.PARC_ID BECP_PARC_ID_ARMADOR,
          CASE
             WHEN LOPA_ARM.LOPA_ID IS NULL
             THEN
                (SELECT MAX (LOPA_ID)
                   FROM ACCESSCONTROL.LOCAL_PARCEIRO
                  WHERE PARC_ID = PARC_ARMADOR.PARC_ID)
             ELSE
                LOPA_ARM.LOPA_ID
          END
             BECP_LOPA_ID_ARMADOR,
          ESCO.ANO BECP_ANO_CNTR,
          ESCO.SEQ_EST_CONT BECP_SEQ_EST_CONT,
          (SELECT documentos
             FROM TABLE (
                     func_conteiner_documento (ESCO.ANO, ESCO.SEQ_EST_CONT)))
             BECP_DOC_FUNC,
          DOCU.IDENTIFICACAO_ARMADOR BECP_IDENTIFICACAO_ARMADOR,
          DOCU.CATEGORIA_ARMADOR BECP_CATEGORIA_ARMADOR,
          VINA_IMP.CODIGO_NAVIO BECP_CODIGO_NAVIO_IMP,
          VINA_IMP.ANO BECP_VIAGEM_ANO_IMP,
          VINA_IMP.VIAGEM BECP_VIAGEM_IMP,
          VINA_IMP.ESCALA BECP_ESCALA_IMP,
          VINA_IMP.CODIGO_EXTERNO BECP_RAP_IMP,
          VINA_EXP.CODIGO_NAVIO BECP_CODIGO_NAVIO_EXP,
          VINA_EXP.ANO BECP_VIAGEM_ANO_EXP,
          VINA_EXP.VIAGEM BECP_VIAGEM_EXP,
          VINA_EXP.ESCALA BECP_ESCALA_EXP,
          VINA_EXP.CODIGO_EXTERNO BECP_RAP_EXP,
          VINA_DOC.CODIGO_NAVIO BECP_CODIGO_NAVIO_DOC,
          VINA_DOC.ANO BECP_VIAGEM_ANO_DOC,
          VINA_DOC.VIAGEM BECP_VIAGEM_DOC,
          VINA_DOC.ESCALA BECP_ESCALA_DOC,
          VINA_DOC.CODIGO_EXTERNO BECP_RAP_DOC,
          BVTP.BVTP_IND_LONGO_CURSO_CABOTAGEM BECP_IND_LONGO_CURSO_CABOTAGEM,
          ESCO.TERMINAL_ENTREGA BECP_TERMINAL_ENTREGA,
          (SELECT VEDE.ACT_PILOT_TS FROM TOPS.VESSEL_DETAILS VEDE, HOST.VIAGEM_NAVIO VINA WHERE 
                   (TRIM(VEDE.TFC_CODE_E) = TRIM(VINA.BTP_VIAGEM_TOS) OR TRIM(VEDE.TFC_CODE_I) = TRIM(VINA.BTP_VIAGEM_TOS)) AND
                   VINA.ESCALA = VINA_DOC.ESCALA ) BECP_CHEGADA_BARRA
     FROM ESTADA_CONTEINER ESCO,
          CONTEINER CONT,
          iso_code iso,
          DOCUMENTO_CONTEINER DOCO,
          DOCUMENTO DOCU,
          VIAGEM_NAVIO VINA_IMP,
          VIAGEM_NAVIO VINA_EXP,
          VIAGEM_NAVIO VINA_DOC,
          EMPRESA EMP_ARM,
          EMPRESA EMP_IMPEXP,
          TIPO_CONTEINER TICO,
          ESTABELECIMENTO EST_ARM,
          ESTABELECIMENTO EST_CLI,
          HOST.REGIME_CIRCULACAO RECI,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA_ARM,
          ACCESSCONTROL.PARCEIRO PARC_ARMADOR,
          HOST.BTP_VERIFICA_TIPO_PROCESSO BVTP
    WHERE     ESCO.DT_HR_CANCELAMENTO IS NULL
          AND BVTP.BVTP_EC_ANO = ESCO.ANO
          AND ISO.CODIGO = CONT.CODIGO
          AND BVTP.BVTP_EC_SEQ = ESCO.SEQ_EST_CONT
          AND ESCO.COD_PROP = CONT.COD_PROP
          AND ESCO.NUM_CONTEINER = CONT.NUM_CONTEINER
          AND ESCO.DIGITO_VERIFICADOR = CONT.DIGITO_VERIFICADOR
          AND ESCO.ANO_GERA_VIAGEM = VINA_IMP.ANO(+)
          AND ESCO.VIAGEM = VINA_IMP.VIAGEM(+)
          AND ESCO.ANO_GERA_VIAGEM_EXP = VINA_EXP.ANO(+)
          AND ESCO.VIAGEM_EXP = VINA_EXP.VIAGEM(+)
          AND ESCO.ANO = DOCO.ANO_EST_CONT
          AND ESCO.SEQ_EST_CONT = DOCO.SEQ_EST_CONT
          AND DOCO.ANO = DOCU.ANO
          AND DOCO.NUM_SEQ_DOC = DOCU.NUM_SEQ_DOC
          AND DOCU.ANO = VINA_DOC.ANO(+)
          AND DOCU.VIAGEM = VINA_DOC.VIAGEM(+)
          AND DOCU.CATEGORIA_ARMADOR = EMP_ARM.CATEGORIA(+)
          AND DOCU.IDENTIFICACAO_ARMADOR = EMP_ARM.IDENTIFICACAO(+)
          AND DOCU.CATEGORIA_IMPORTEXPORT = EMP_IMPEXP.CATEGORIA(+)
          AND DOCU.IDENTIFICACAO_IMPORTEXPORT = EMP_IMPEXP.IDENTIFICACAO(+)
          AND CONT.TIP_CODIGO = TICO.CODIGO(+)
          AND EMP_IMPEXP.CATEGORIA = EST_CLI.CATEGORIA(+)
          AND EMP_IMPEXP.IDENTIFICACAO = EST_CLI.IDENTIFICACAO(+)
          AND EMP_ARM.CATEGORIA_REP_NACIONAL = EST_ARM.CATEGORIA
          AND EMP_ARM.IDENTIFICACAO_REP_NACIONAL = EST_ARM.IDENTIFICACAO
          AND EMP_ARM.NUMERO_ESTAB_REP_NACIONAL =
                 EST_ARM.NUMERO_ESTABELECIMENTO
          AND RECI.COD_REGIME_CIRC = DOCU.COD_REGIME_CIRC
          AND DOCU.ESTAB_FILIAL_CLIENTE = EST_CLI.numero_estabelecimento
          AND    EST_CLI.identificacao
              || EST_CLI.numero_estabelecimento
              || EST_CLI.digito_cgc = LOPA.LOPA_CNPJ(+)
          AND    EST_ARM.identificacao
              || EST_ARM.numero_estabelecimento
              || EST_ARM.digito_cgc = LOPA_ARM.LOPA_CNPJ(+)
          AND    EST_ARM.IDENTIFICACAO
              || EST_ARM.NUMERO_ESTABELECIMENTO
              || EST_ARM.DIGITO_CGC = PARC_ARMADOR.PARC_CNPJ(+)   
              AND  dOCU.DT_HR_CANCELA_DOC is null

  CREATE OR REPLACE FORCE VIEW "HOST"."BTP_VW_DEADLINE_NAVIO" ("DEAD_LINE", "BOOKING") AS 
  SELECT VW.RECV_CTR_CUTOFF_TS, BO.BOOK_DESCRICAO
     FROM TOPS.VIEW_VES_SCHEDULE VW,
          HOST.VIAGEM_NAVIO VN,
          HOST.BTP_BOOKING BO
    WHERE     TRIM (VW.TFC_EXP) = VN.BTP_VIAGEM_TOS
          AND VN.ANO = BO.BOOK_ANO
          AND VN.VIAGEM = BO.BOOK_VIAGEM
          AND VN.DT_HR_CANCELAMENTO IS NULL
          AND BO.BOOK_DT_CANCELAMENTO IS NULL

  CREATE OR REPLACE PROCEDURE "HOST"."SP_INSERE_NCM_TOPS" (
P_CODE_TP IN TOPS.SYS_CODES.CODE_TP%TYPE,
P_CODE_REF IN TOPS.SYS_CODES.CODE_REF%TYPE,
P_DESCR IN TOPS.SYS_CODES.DESCR%TYPE,
P_UPD_TS IN VARCHAR2 := NULL)
AS
BEGIN 
INSERT INTO TOPS.SYS_CODES (CODE_TP,CODE_REF,DESCR,UPD_TS) VALUES (P_CODE_TP, P_CODE_REF, P_DESCR, TO_DATE(P_UPD_TS,'DD/MM/YYYY HH24:MI:SS'));
END SP_INSERE_NCM_TOPS;

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_BOLETIM_SUPERVIAS" ("MANI_DESC_TP_TRAF", "CODIGO_BERCO", "DT_HR_INICIO_OPERACAO", "DT_HR_FIM_OPERACAO", "PRIMEIRA", "ULTIMA", "FIM_OPERACAO", "VIAGEM", "COD_EQUIPAMENTO_OPERACAO", "COD_EQUIPAMENTO_TERRA") AS 
  SELECT CASE NVL (VINA.TIPO_NAVEGACAO, '')
             WHEN 'L' THEN 'LONGO CURSO'
             WHEN 'C' THEN 'CABOTAGEM'
             ELSE ''
          END
             AS MANI_DESC_TP_TRAF,
          VINA.CODIGO_BERCO,
          CASE
             WHEN TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "DT_HR_INICIO_OPERACAO",         --VINA.DT_HR_INICIO_OPERACAO,
          CASE
             WHEN TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "DT_HR_FIM_OPERACAO",               --VINA.DT_HR_FIM_OPERACAO,
          CASE
             WHEN TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "PRIMEIRA",              --TVVS.ACT_START_WORK_TS AS PRIMEIRA,
          CASE
             WHEN TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "ULTIMA",                     --TVVS.ACT_END_WORK_TS AS ULTIMA
          CASE
             WHEN TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                'N'
             ELSE
                'S'
          END
             AS FIM_OPERACAO,
          VINA.VIAGEM,
          '5' AS COD_EQUIPAMENTO_OPERACAO,
          '5' AS COD_EQUIPAMENTO_TERRA
     FROM HOST.VIAGEM_NAVIO VINA, TOPS.VESSEL_DETAILS TVVS
    WHERE    TRIM(VINA.BTP_VIAGEM_TOS) = TRIM(TVVS.TFC_CODE_E)
          OR TRIM(VINA.BTP_VIAGEM_TOS) = TRIM(TVVS.TFC_CODE_I)

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_BTP_CONVERSAO" ("TIPO", "CHAVE", "DESCRICAO") AS 
  select 'ARMADOR' as tipo,
       trim(upper(tvl.code)) as chave,
       trim(upper(tvl.description)) as descricao
from tops.view_liner tvl
union
select 'AVARIA' as tipo,
       trim(upper(tvdc.code)) as chave,
       trim(upper(tvdc.damage_type)) ||'-'|| trim(upper(tvdc.damage_location)) as descricao
from tops.view_damage_code tvdc
union
select 'TIPOCLIENTE' as tipo,
       trim(upper(tvct.code)) as chave,
       trim(upper(tvct.description)) as descricao
from tops.view_customer_type tvct
union
select 'MERCADORIA' as tipo,
        trim(upper(tvc.code)) as chave,
        trim(upper(tvc.description)) as descricao
from tops.view_commodity tvc

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_CONS_CONT_LACRE" ("MANIFESTADO", "ENCONTRADO", "SEAL_TYPE", "MERC_NUM_CONTEINER") AS 
  SELECT 
AMLM.AMLM_NUM_LACRE MANIFESTADO,
LACRE_TOS.SEAL_NO ENCONTRADO,
LACRE_TOS.SEAL_TYPE,
MERC.MERC_NUM_CONTEINER 
FROM
MANIFESTO.MERCADORIA MERC,
MANIFESTO.AMR_LACRE_MERCADORIA AMLM,
(
SELECT 
ITSE.SEAL_NO,
ITSE.SEAL_TYPE,
IT.ITEM_NO,
IT.ITEM_KEY
FROM
TOPS.ITEM IT,
TOPS.ITEM_SEAL ITSE
WHERE
    IT.ITEM_KEY = ITSE.ITEM_KEY
AND ITSE.STATUS = 'C'  
AND ITSE.SEAL_TYPE <> 'BTP'
ORDER BY IT.ITEM_KEY DESC
) LACRE_TOS 
WHERE
    AMLM.AMLM_MERC_ID(+) = MERC.MERC_ID
AND MERC.MERC_NUM_CONTEINER(+) = TRIM (TO_CHAR (LACRE_TOS.ITEM_NO))

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_CONSULTA_CBR" ("ID", "NAVIO", "VIAGEM", "AGENCIA", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "DT_HR_ATRACACAO", "PREVISAO_SAIDA", "DT_HR_SAIDA_NAVIO", "BERCO", "ANO", "ID_VIAGEM", "SRV") AS 
  SELECT VINA.CODIGO_EXTERNO "ID",
          NAVI.DESCRICAO_NAVIO "NAVIO",
          VINA.NUM_VIA_ARMADOR "VIAGEM",
          EMPR.APELIDO "AGENCIA",
          VINA.DT_HR_ETA "PREVISAO_CHEGADA",
          VINA.DT_HR_CHEGADA_BARRA "CHEGADA",
          VINA.DT_HR_ETB "PREVISAO_ATRACACAO",
          VINA.DT_HR_ATRACACAO,
          DT_HR_ESPERADA_SAIDA "PREVISAO_SAIDA",
          VINA.DT_HR_SAIDA_NAVIO,
          BERC.DESC_BERCO BERCO,
          VINA.ANO,
          VINA.VIAGEM ID_VIAGEM,
          VITO.VES_SERVICE "SRV"
     FROM VIAGEM_NAVIO VINA,
          NAVIO NAVI,
          EMPRESA EMPR,
          BERCO BERC,
          TOPS.VES_VOYAGE VITO
    WHERE     NAVI.CODIGO_NAVIO = VINA.CODIGO_NAVIO
          AND EMPR.CATEGORIA = NAVI.CATEGORIA
          AND EMPR.IDENTIFICACAO = NAVI.IDENTIFICACAO
          AND BERC.CODIGO_BERCO = VINA.CODIGO_BERCO
          AND VINA.BTP_VIAGEM_TOS = VITO.VES_ID(+)

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_CONSULTA_DESCARGA_NAVIO" ("ID", "NAVIO", "VIAGEM", "AGENCIA", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "DT_HR_ATRACACAO", "PREVISAO_SAIDA", "DT_HR_SAIDA_NAVIO", "DESC_BERCO", "QTD", "ANO", "ID_VIAGEM", "SRV") AS 
  SELECT VINA.CODIGO_EXTERNO "ID",
          NAVI.DESCRICAO_NAVIO "NAVIO",
          VINA.NUM_VIA_ARMADOR "VIAGEM",
          EMPR.APELIDO "AGENCIA",
          VINA.DT_HR_ETA "PREVISAO_CHEGADA",
          VINA.DT_HR_CHEGADA_BARRA "CHEGADA",
          VINA.DT_HR_ETB "PREVISAO_ATRACACAO",
          VINA.DT_HR_ATRACACAO,
          DT_HR_ESPERADA_SAIDA "PREVISAO_SAIDA",
          VINA.DT_HR_SAIDA_NAVIO,
          BERC.DESC_BERCO,
          CNTR.PREVISTOS QTD,
          VINA.ANO,
          VINA.VIAGEM ID_VIAGEM,
          VITO.VES_SERVICE "SRV"
     FROM VIAGEM_NAVIO VINA,
          NAVIO NAVI,
          EMPRESA EMPR,
          BERCO BERC,
          VW_B2B_DESCARG_PREV_VIAGEM CNTR,
          TOPS.VES_VOYAGE VITO
    WHERE     NAVI.CODIGO_NAVIO = VINA.CODIGO_NAVIO
          AND EMPR.CATEGORIA = NAVI.CATEGORIA
          AND EMPR.IDENTIFICACAO = NAVI.IDENTIFICACAO
          AND BERC.CODIGO_BERCO = VINA.CODIGO_BERCO
          AND VINA.BTP_VIAGEM_TOS = VITO.VES_ID(+)
          AND CNTR.ANO = VINA.ANO
          AND CNTR.VIAGEM = VINA.VIAGEM
          AND CNTR.PREVISTOS > 0

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_CONSULTA_EMBARQUE_NAVIO" ("CNTR_IMP", "CNTR_EXP", "ID", "NAVIO", "VIAGEM", "AGENCIA", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "DT_HR_ATRACACAO", "PREVISAO_SAIDA", "DT_HR_SAIDA_NAVIO", "BERCO", "ANO", "ID_VIAGEM", "SRV", "QTD") AS 
  SELECT (SELECT COUNT (*)
             FROM ESTADA_CONTEINER ESCO
            WHERE     ESCO.VIAGEM = VINA.VIAGEM
                  AND ESCO.DT_HR_DESCARGA_OPER_PORT IS NOT NULL)
             CNTR_IMP,
          (SELECT COUNT (*)
             FROM ESTADA_CONTEINER ESCO
            WHERE     ESCO.VIAGEM_EXP = VINA.VIAGEM
                  AND ESCO.VIAGEM IS NULL
                  AND ESCO.DT_HR_SAIDA IS NOT NULL)
             CNTR_EXP,
          VINA.CODIGO_EXTERNO "ID",
          NAVI.DESCRICAO_NAVIO "NAVIO",
          VINA.NUM_VIA_ARMADOR "VIAGEM",
          EMPR.APELIDO "AGENCIA",
          VINA.DT_HR_ETA "PREVISAO_CHEGADA",
          VINA.DT_HR_CHEGADA_BARRA "CHEGADA",
          VINA.DT_HR_ETB "PREVISAO_ATRACACAO",
          VINA.DT_HR_ATRACACAO,
          DT_HR_ESPERADA_SAIDA "PREVISAO_SAIDA",
          VINA.DT_HR_SAIDA_NAVIO,
          BERC.DESC_BERCO BERCO,
          VINA.ANO,
          VINA.VIAGEM ID_VIAGEM,
          VITO.VES_SERVICE "SRV"
          , BERC.QTDE_CABECOS
     FROM viagem_navio VINA,
          TOPS.VESSEL_DETAILS VD,
          NAVIO NAVI,
          EMPRESA EMPR,
          BERCO BERC,
          TOPS.VES_VOYAGE VITO
    WHERE     NAVI.CODIGO_NAVIO = VINA.CODIGO_NAVIO
          AND (   VINA.BTP_VIAGEM_TOS = VD.TFC_CODE_E
               OR VINA.BTP_VIAGEM_TOS = VD.TFC_CODE_I)
          AND EMPR.CATEGORIA = NAVI.CATEGORIA
          AND EMPR.IDENTIFICACAO = NAVI.IDENTIFICACAO
          AND BERC.CODIGO_BERCO(+) = VINA.CODIGO_BERCO
          AND VINA.BTP_VIAGEM_TOS = VITO.VES_ID(+)

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_CONSULTA_REMOCAO_NAVIO" ("ID", "NAVIO", "VIAGEM", "AGENCIA", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "DT_HR_ATRACACAO", "PREVISAO_SAIDA", "DT_HR_SAIDA_NAVIO", "DESC_BERCO", "QTD", "ANO", "ID_VIAGEM", "SRV") AS 
  SELECT VINA.CODIGO_EXTERNO "ID",
          NAVI.DESCRICAO_NAVIO "NAVIO",
          VINA.NUM_VIA_ARMADOR "VIAGEM",
          EMPR.APELIDO "AGENCIA",
          VINA.DT_HR_ETA "PREVISAO_CHEGADA",
          VINA.DT_HR_CHEGADA_BARRA "CHEGADA",
          VINA.DT_HR_ETB "PREVISAO_ATRACACAO",
          VINA.DT_HR_ATRACACAO,
          DT_HR_ESPERADA_SAIDA "PREVISAO_SAIDA",
          VINA.DT_HR_SAIDA_NAVIO,
          BERC.DESC_BERCO,
          CNTR.PREVISTOS QTD,
          VINA.ANO,
          VINA.VIAGEM ID_VIAGEM,
          VITO.VES_SERVICE "SRV"
     FROM VIAGEM_NAVIO VINA,
          NAVIO NAVI,
          EMPRESA EMPR,
          BERCO BERC,
          VW_B2B_REMOCAO_PREV_VIAGEM CNTR,
          TOPS.VES_VOYAGE VITO
    WHERE     NAVI.CODIGO_NAVIO = VINA.CODIGO_NAVIO
          AND EMPR.CATEGORIA = NAVI.CATEGORIA
          AND EMPR.IDENTIFICACAO = NAVI.IDENTIFICACAO
          AND BERC.CODIGO_BERCO = VINA.CODIGO_BERCO
          AND VINA.BTP_VIAGEM_TOS = VITO.VES_ID(+)
          AND CNTR.ANO = VINA.ANO
          AND CNTR.VIAGEM = VINA.VIAGEM
          AND CNTR.PREVISTOS > 0

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_DEAD_LINE_DIA" ("NAVIO", "AGENCIA", "DEAD_LINE") AS 
  SELECT  DISTINCT
          NAVI.DESCRICAO_NAVIO "NAVIO",
          EMPR.APELIDO "AGENCIA",
          VW.RECV_CTR_CUTOFF_TS
     FROM TOPS.VIEW_VES_SCHEDULE VW,
          HOST.VIAGEM_NAVIO VN,
          HOST.NAVIO NAVI,
          HOST.EMPRESA EMPR
    WHERE     TRIM (VW.TFC_EXP) = VN.BTP_VIAGEM_TOS
          AND VN.CODIGO_NAVIO = NAVI.CODIGO_NAVIO
          AND NAVI.CATEGORIA = EMPR.CATEGORIA  
          AND NAVI.IDENTIFICACAO = EMPR.IDENTIFICACAO
          AND VN.DT_HR_CANCELAMENTO IS NULL

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_B2B_LISTA_ATRACACAO" ("ID", "NAVIO", "VIAGEM", "AGENCIA", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "DT_HR_ATRACACAO", "PREVISAO_SAIDA", "DT_HR_SAIDA_NAVIO", "BERCO", "QTD", "ANO", "PREV_DESCARGA", "PREV_EMBARQUE", "PREV_REMOCAO") AS 
  SELECT VINA.CODIGO_EXTERNO "ID",
          NAVI.DESCRICAO_NAVIO "NAVIO",
          VINA.NUM_VIA_ARMADOR "VIAGEM",
          --EMPR.APELIDO "AGENCIA",
          TVVS.LINER "AGENCIA",
          VINA.DT_HR_ETA "PREVISAO_CHEGADA",
          VINA.DT_HR_CHEGADA_BARRA "CHEGADA",
          TVVS.ETA "PREVISAO_ATRACACAO",
          --VINA.DT_HR_ETB "PREVISAO_ATRACACAO",
          VINA.DT_HR_ATRACACAO,
          --DT_HR_ESPERADA_SAIDA "PREVISAO_SAIDA",
          TVVS.EDT "PREVISAO_SAIDA",
          VINA.DT_HR_SAIDA_NAVIO,
          BERC.DESC_BERCO  BERCO,
          FN_QTD_ESTADA_CNT (VINA.CODIGO_EXTERNO) QTD,
          VINA.ANO,
          NVL (PREV_DESCARGA.PREVISTOS, 0) PREV_DESCARGA,
          NVL (PREV_EMBARQUE.PREVISTOS, 0) PREV_EMBARQUE,
          NVL (PREV_REMOCAO.PREVISTOS, 0) PREV_REMOCAO
     FROM VIAGEM_NAVIO VINA,
          NAVIO NAVI,
          EMPRESA EMPR,
          BERCO BERC,
          (SELECT * FROM VW_B2B_DESCARG_PREV_VIAGEM) PREV_DESCARGA,
          (SELECT * FROM VW_B2B_EMBARQ_PREV_VIAGEM) PREV_EMBARQUE,
          (SELECT * FROM VW_B2B_REMOCAO_PREV_VIAGEM) PREV_REMOCAO,
          TOPS.VIEW_VES_SCHEDULE TVVS
    WHERE     NAVI.CODIGO_NAVIO = VINA.CODIGO_NAVIO
          --AND FN_QTD_ESTADA_CNT (VINA.CODIGO_EXTERNO) > 0
          AND EMPR.CATEGORIA = NAVI.CATEGORIA
          AND EMPR.IDENTIFICACAO = NAVI.IDENTIFICACAO
          AND BERC.CODIGO_BERCO = VINA.CODIGO_BERCO
          AND VINA.ANO = PREV_REMOCAO.ANO(+)
          AND VINA.VIAGEM = PREV_REMOCAO.VIAGEM(+)
          AND VINA.ANO = PREV_DESCARGA.ANO(+)
          AND VINA.VIAGEM = PREV_DESCARGA.VIAGEM(+)
          AND VINA.ANO = PREV_EMBARQUE.ANO(+)
          AND VINA.VIAGEM = PREV_EMBARQUE.VIAGEM(+)
          AND (   (PREV_DESCARGA.PREVISTOS > 0)
               OR (PREV_EMBARQUE.PREVISTOS > 0)
               OR (PREV_REMOCAO.PREVISTOS > 0))
          AND (TVVS.TFC_EXP = VINA.BTP_VIAGEM_TOS
           OR TVVS.TFC_IMP = VINA.BTP_VIAGEM_TOS)

  CREATE OR REPLACE FORCE VIEW "HOST"."VW_HEADER_SUPERVIAS" ("NUMERO_VIAGEM", "DT_HR_INICIO_OPERACAO", "DT_HR_FIM_OPERACAO", "NUM_VIA_ARMADOR", "DESCRICAO_NAVIO", "NUMERO_LLOYDS", "VIAGEM") AS 
  SELECT REPLACE (CODIGO_EXTERNO, '  ', '/') AS NUMERO_VIAGEM,
          CASE WHEN TVVS.ACT_START_WORK_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
            ''
          ELSE
           TO_CHAR(TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') 
          END "DT_HR_INICIO_OPERACAO",
          CASE WHEN TVVS.ACT_END_WORK_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
            ''
          ELSE
            TO_CHAR(TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') 
          END "DT_HR_FIM_OPERACAO",          
          VINA.NUM_VIA_ARMADOR,
          NAV.DESCRICAO_NAVIO,
          NAV.NUMERO_LLOYDS,
          VINA.VIAGEM
     FROM HOST.VIAGEM_NAVIO VINA, 
          HOST.NAVIO NAV, 
          TOPS.VESSEL_DETAILS TVVS
    WHERE NAV.CODIGO_NAVIO = VINA.CODIGO_NAVIO
      AND (   VINA.BTP_VIAGEM_TOS = TRIM (TVVS.TFC_CODE_E)
           OR VINA.BTP_VIAGEM_TOS = TRIM (TVVS.TFC_CODE_I))

  CREATE OR REPLACE PROCEDURE "MANIFESTO"."SP_INSERE_CLIENTE_TOS" (
   P_OPERACAO                       IN VARCHAR2,
   P_CNPJ_CPF                       IN VARCHAR2,
   P_DESCRICAO                      IN VARCHAR2)
IS
   /******************************************************************************
   --Objeto:SP_INSERE_CLIENTE_TOS
   --Criação:CELIA - 06/02/2013
   --Objetivo: INSERIR CLIENTE NA BASE TOS
   --Sistema: MANIFESTO
   ******************************************************************************/
   V_ROWS   NUMBER;
   EXISTE   EXCEPTION;
BEGIN
   IF P_OPERACAO = 'I'
   THEN
      SELECT COUNT (*)
        INTO V_ROWS
        FROM TOPS.CUSTOMER CUST
       WHERE CUST.ADDR1 = P_CNPJ_CPF ;

      IF V_ROWS = 0
      THEN
         INSERT
           INTO TOPS.CUSTOMER (CUST_REG_NO,
                               CUST_TYPE,
                               FULL_NAME,
                               ADDR1)
         VALUES (SQ_SP_CLIENTE_TOS.NEXTVAL,
                 'I', -- Importacao 
                 P_DESCRICAO, P_CNPJ_CPF);      
      END IF;
   END IF;     
EXCEPTION
   WHEN EXISTE
   THEN
      RAISE_APPLICATION_ERROR (-20000, 'REGISTRO JÁ CADASTRADO');
   WHEN OTHERS
   THEN
      RAISE;
END SP_INSERE_CLIENTE_TOS;

  CREATE OR REPLACE FORCE VIEW "MANIFESTO"."VW_DISCHARGE_REPORT" ("CONTAINER", "DAMAGE_TYPE", "DAMAGE_LOCATION", "NAVIO", "DATA_ATRACACAO", "VIAGEM", "IMPEXP") AS 
  SELECT I.ITEM_NO CONTAINER, D.DAMAGE_TYPE,D.DAmage_location,vd.VES_NAME navio,VD.ACT_BERTH_TS data_atracacao, vD.IN_VOYAGE viagem, 'IMPORTACAO' IMPEXP
FROM tops.ITEM I , tops.ITEM_DAMAGE ID, tops.DAMAGE_CODE D, tops.VESSEL_DETAILS VD
WHERE  I.ITEM_KEY=ID.ITEM_KEY
AND ID.DAMAGE_CD=D.DAMAGE_CD AND I.ARR_CAR=VD.TFC_CODE_I
UNION
SELECT I.ITEM_NO CONTAINER, D.DAMAGE_TYPE,D.DAmage_location,vd.VES_NAME navio,VD.ACT_BERTH_TS data_atracacao, vD.OUT_VOYAGE viagem, 'EXPORTACAO' IMPEXP
FROM tops.ITEM I , tops.ITEM_DAMAGE ID, tops.DAMAGE_CODE D, tops.VESSEL_DETAILS VD
WHERE  I.ITEM_KEY=ID.ITEM_KEY
AND ID.DAMAGE_CD=D.DAMAGE_CD AND I.ARR_CAR=VD.TFC_CODE_E

  CREATE OR REPLACE FORCE VIEW "MANIFESTO"."VW_LISTA_ATRACACAO" ("ID", "NOME_NAVIO", "CODIGONAVIO", "COMPRIMENTO", "ARMADOR", "VIAGEM", "ETACHEGADA", "ETBATRACACAO", "ETSDESATRACACAO", "PONTO", "UNIDADES", "OBSERVACOES", "DIRECAOATRACACAO", "MOTIVOESPERA", "JOINT", "SERVICO", "CALLSIGN", "LLOYDSREG", "EMB", "DESCARGA", "REMOCAO", "NUMEROESCALA", "RAP", "TRA_MARGEM", "TRA_TOS", "VIAGEMTOS") AS 
  SELECT 
          SCHE.VES_ID Id,
          VESS.VES_NAME Nome_Navio,
          NAV.CODIGO_NAVIO CodigoNavio,
          VESS.VES_LEN Comprimento,
          SCHE.LINE_OPER Armador,
          SCHE.IN_VOYAGE Viagem,
          SCHE.EST_BERTH_TS EtaChegada,
          SCHE.ACT_BERTH_TS EtbAtracacao,
          SCHE.ACT_DEP_TS EtsDesatracacao,
          SCHE.PREFER_BERTH_SIDE Ponto,
            SCHE.EST_DISCHARGE_EMPTY
          + SCHE.EST_DISCHARGE_FULL
          + SCHE.EST_LOAD_EMPTY
          + SCHE.EST_LOAD_FULL
          + SCHE.EST_RESTOW
             Unidades,
          VESS.REMARKS Observacoes,
          DECODE (SCHE.BTOA_SIDE,
                  'P', 'BOMBORDO',
                  'S', 'BOROESTE',
                  SCHE.BTOA_SIDE)
             DirecaoAtracacao,
          VWSR.DESCRIPTION MotivoEspera,
          SCHE.LINE_OPER Joint,
          SCHE.VES_SERVICE Servico,
          SCHE.CALL_SIGN CallSign,
          SCHE.LLOYDS_NO LloydsReg,
          SCHE.EST_LOAD_EMPTY + SCHE.EST_LOAD_FULL Emb,
          SCHE.EST_DISCHARGE_EMPTY + SCHE.EST_DISCHARGE_FULL Descarga,
          SCHE.EST_RESTOW Remocao,
          ESCA.ESCA_NUMERO NumeroEscala,
          ESCA.ESCA_RAP Rap,
          TRA.TRA_MARGEM,
          TRA.TRA_TOS,
          SCHE.TFC_CODE_E ViagemTos
     FROM TOPS.VESSELS VESS,
          TOPS.VESSEL_DETAILS SCHE,
          MANIFESTO.ESCALA ESCA,
          MANIFESTO.TRA TRA,
          TOPS.VIEW_WORK_STOP_REASON VWSR,
          HOST.NAVIO NAV
    WHERE     VESS.LLOYDS_NO = SCHE.LLOYDS_NO
          AND SCHE.TFC_CODE_I = ESCA.ESCA_VIAGEM_TOS(+)
          AND ESCA.ESCA_TRA_ID = TRA.TRA_ID(+)
          AND SCHE.STOP_CODE = VWSR.CODE(+)
          AND TRIM(TO_CHAR(NAV.NUMERO_LLOYDS)) = TRIM(VESS.LLOYDS_NO)

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_BOLETIM_SUPERVIAS" ("MANI_DESC_TP_TRAF", "CODIGO_BERCO", "DT_HR_INICIO_OPERACAO", "DT_HR_FIM_OPERACAO", "PRIMEIRA", "ULTIMA", "FIM_OPERACAO", "VIAGEM", "COD_EQUIPAMENTO_OPERACAO", "COD_EQUIPAMENTO_TERRA") AS 
  SELECT  CASE NVL (ESCA.ESCA_TIPO_TRAFEGO, '')
             WHEN 'L' THEN 'LONGO CURSO'
             WHEN 'C' THEN 'CABOTAGEM'
             ELSE ESCA.ESCA_TIPO_TRAFEGO
          END
           AS MANI_DESC_TP_TRAF,
          ESCA.ESCA_BEAT_ID CODIGO_BERCO,
          CASE
             WHEN TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "DT_HR_INICIO_OPERACAO",         --VINA.DT_HR_INICIO_OPERACAO,
          CASE
             WHEN TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "DT_HR_FIM_OPERACAO",               --VINA.DT_HR_FIM_OPERACAO,
          CASE
             WHEN TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "PRIMEIRA",              --TVVS.ACT_START_WORK_TS AS PRIMEIRA,
          CASE
             WHEN TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             AS "ULTIMA",                     --TVVS.ACT_END_WORK_TS AS ULTIMA
          CASE
             WHEN TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') =
                     '31/12/1900 23:00:00'
             THEN
                'N'
             ELSE
                'S'
          END
             AS FIM_OPERACAO,
          ESCA.ESCA_ID VIAGEM,
          '5' AS COD_EQUIPAMENTO_OPERACAO,
          '5' AS COD_EQUIPAMENTO_TERRA
     FROM BHS.ESCALA ESCA,  --HOST.VIAGEM_NAVIO VINA, 
          TOPS.VESSEL_DETAILS TVVS
    WHERE    TRIM (ESCA.ESCA_VIAGEM_TOS_EXP ) = TRIM (TVVS.TFC_CODE_E)
          OR TRIM (ESCA.ESCA_VIAGEM_TOS_IMP ) = TRIM (TVVS.TFC_CODE_I)

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_B2B_ESTOQ_CNTR_VZ_EMBARQUE" ("MERC_ID", "LOPA_ID", "CONTEINER", "TIPO", "NAVIO", "VIAGEM", "DATA_ENTRADA", "STATUS", "TRANSPORTADORA", "ID") AS 
  SELECT MERC_ID,
          LOPA_ID,
          CONTEINER,
          TIPO,
          NAVIO,
          VIAGEM,
          DATA_ENTRADA,
          STATUS,
          TRANSPORTADORA,
          ROWNUM ID
     FROM (SELECT MERC.MERC_ID MERC_ID,
                  LOPA.LOPA_ID LOPA_ID,
                  CONT.CONT_NUMERO CONTEINER,
                  (SELECT DISTINCT C.ISO
                     FROM    TOPS.CONVERT_TO_ISO C
                          INNER JOIN
                             BHS.ISOCODE ISOC_1
                          ON     ISOC_1.ISOC_TAMANHO = TRIM (C.LENGTH)
                             AND ISOC_1.ISOC_SIGLA = TRIM (C.CTR_TYPE)
                             AND REPLACE (ISOC_1.ISOC_ALTURA, ',', '.') =
                                    TO_CHAR (C.HEIGHT)
                    WHERE     C.USE_DEFAULT = 'Y'
                          AND ISOC_1.ISOC_TAMANHO = ISOC.ISOC_TAMANHO
                          AND ISOC_1.ISOC_SIGLA = ISOC.ISOC_SIGLA
                          AND ISOC_1.ISOC_ALTURA = TO_CHAR (ISOC.ISOC_ALTURA))
                     TIPO,
                  --(isoc.ISOC_TAMANHO || ' ' || ISOC.ISOC_SIGLA) TIPO,
                  NAVI.NAVI_NOME NAVIO,
                  ESCA.ESCA_RAP VIAGEM,
                  (SELECT ATIV.ATVI_DTHR_INI AS DT_INI
                     FROM    BHS.ATIVIDADE ATIV
                          INNER JOIN
                             BHS.TIPO_ATIVIDADE TIAT
                          ON ativ.atvi_tiat_id = TIAT.TIAT_ID
                    WHERE     TIAT.TIAT_DESCRICAO = 'GATE_IN'
                          AND ATIV.ATVI_MERC_ID = MERC.MERC_ID
                          AND ROWNUM = 1)
                     DATA_ENTRADA,
                  (SELECT DECODE (COUNT (*), '0', 'LIBERADO', 'BLOQUEADO')
                             BLOQUEIOS
                     FROM    BHS.AMR_BLOQUEIO_MERCADORIA AMBLME
                          INNER JOIN
                             BHS.MERCADORIA MERCA
                          ON AMBLME.AMBM_MERC_ID = MERCA.MERC_ID
                    WHERE     MERCA.MERC_ID = MERC.MERC_ID
                          AND amblme.ambm_dt_inicio IS NOT NULL
                          AND amblme.ambm_dt_fim IS NULL)
                     STATUS,
                  LOPA_TRANSP.LOPA_RAZAO_SOCIAL TRANSPORTADORA
             FROM bhs.mercadoria merc
                  INNER JOIN bhs.conteiner cont
                     ON merc.merc_cont_id = cont.cont_id
                  INNER JOIN BHS.ISOCODE ISOC
                     ON CONT.CONT_ISOC_ID = ISOC.ISOC_ID
                  INNER JOIN BHS.ESCALA ESCA
                     ON MERC.MERC_ESCA_ID_EXP = ESCA.ESCA_ID
                  INNER JOIN BHS.NAVIO NAVI
                     ON ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
                  INNER JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
                     ON MERC.MERC_LOPA_ARM_EXP = LOPA.LOPA_ID
                  INNER JOIN TAS.MERCADORIA MERC_TAS
                     ON MERC.MERC_ID = MERC_TAS.MERC_ID_BHS
                  LEFT OUTER JOIN TAS.AGENDAMENTO AGEN
                     ON MERC_TAS.MERC_ID = AGEN.MERC_ID
                  LEFT OUTER JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA_TRANSP
                     ON AGEN.LOPA_ID_TRANSP = LOPA_TRANSP.LOPA_ID
            WHERE     merc.merc_status = 'T'
                  AND merc.merc_ch_vz = 'E'
                  AND merc.merc_dt_cancel IS NULL
                  AND ESCA.ESCA_VIAGEM_TOS_EXP <> 'TBN222MAE')
    WHERE data_entrada IS NOT NULL




  CREATE OR REPLACE FORCE VIEW "TAS"."VW_B2B_ESTOQ_CNTR_VZ_TODOS" ("MERC_ID", "LOPA_ID", "CONTEINER", "TIPO", "NAVIO", "VIAGEM", "DATA_ENTRADA", "STATUS", "ID") AS 
  SELECT MERC_ID,
          LOPA_ID,
          CONTEINER,
          TIPO,
          NAVIO,
          VIAGEM,
          DATA_ENTRADA,
          STATUS,
          ROWNUM ID
     FROM (SELECT MERC.MERC_ID MERC_ID,
                  LOPA.LOPA_ID LOPA_ID,
                  CONT.CONT_NUMERO CONTEINER,
                  (SELECT DISTINCT C.ISO
                     FROM    TOPS.CONVERT_TO_ISO C
                          INNER JOIN
                             BHS.ISOCODE ISOC_1
                          ON     ISOC_1.ISOC_TAMANHO = TRIM (C.LENGTH)
                             AND ISOC_1.ISOC_SIGLA = TRIM (C.CTR_TYPE)
                             AND REPLACE (ISOC_1.ISOC_ALTURA, ',', '.') =
                                    TO_CHAR (C.HEIGHT)
                    WHERE     C.USE_DEFAULT = 'Y'
                          AND ISOC_1.ISOC_TAMANHO = ISOC.ISOC_TAMANHO
                          AND ISOC_1.ISOC_SIGLA = ISOC.ISOC_SIGLA
                          AND ISOC_1.ISOC_ALTURA = TO_CHAR (ISOC.ISOC_ALTURA))
                     TIPO,
                  --(isoc.ISOC_TAMANHO || ' ' || ISOC.ISOC_SIGLA) TIPO,
                  NAVI.NAVI_NOME NAVIO,
                  ESCA.ESCA_RAP VIAGEM,
                  (SELECT ATIV.ATVI_DTHR_INI AS DT_INI
                     FROM    BHS.ATIVIDADE ATIV
                          INNER JOIN
                             BHS.TIPO_ATIVIDADE TIAT
                          ON ativ.atvi_tiat_id = TIAT.TIAT_ID
                    WHERE     TIAT.TIAT_DESCRICAO = 'DESCARGA'
                          AND ATIV.ATVI_MERC_ID = MERC.MERC_ID
                          AND ROWNUM = 1)
                     DATA_ENTRADA,
                  (SELECT DECODE (COUNT (*), '0', 'LIBERADO', 'BLOQUEADO')
                             BLOQUEIOS
                     FROM    BHS.AMR_BLOQUEIO_MERCADORIA AMBLME
                          INNER JOIN
                             BHS.MERCADORIA MERCA
                          ON AMBLME.AMBM_MERC_ID = MERCA.MERC_ID
                    WHERE     MERCA.MERC_ID = MERC.MERC_ID
                          AND amblme.ambm_dt_inicio IS NOT NULL
                          AND amblme.ambm_dt_fim IS NULL)
                     STATUS
             FROM bhs.mercadoria merc
                  INNER JOIN bhs.conteiner cont
                     ON merc.merc_cont_id = cont.cont_id
                  INNER JOIN BHS.ISOCODE ISOC
                     ON CONT.CONT_ISOC_ID = ISOC.ISOC_ID
                  INNER JOIN BHS.ESCALA ESCA
                     ON MERC.MERC_ESCA_ID_IMP = ESCA.ESCA_ID
                  INNER JOIN BHS.NAVIO NAVI
                     ON ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
                  INNER JOIN ACCESSCONTROL.LOCAL_PARCEIRO LOPA
                     ON MERC.MERC_LOPA_ARM_IMP = LOPA.LOPA_ID
            WHERE     merc.merc_status = 'T'
                  AND merc.merc_ch_vz = 'E'
                  AND merc.merc_dt_cancel IS NULL)
    WHERE data_entrada IS NOT NULL


  CREATE OR REPLACE FORCE VIEW "TAS"."VW_CONS_IMPORTADOR" ("MERC_ID", "ID_IMPORTADOR", "RAZAO_SOCIAL", "CGCCPF", "DOC", "CONTEINER", "TIPO_CONTEINER", "DATA_DESCARGA", "TIPO_DOCUMENTO", "PRESENCA_CARGA", "PREGATE", "GATEOUT", "SOLICITACAO_POSICIONAMENTO", "POSICIONADO", "PRE_REGISTRO", "REGISTRO", "JANELA_AGENDAMENTO", "NAVIO") AS 
  SELECT DISTINCT
          MERC.MERC_ID MERC_ID,
          DOCU_DI.DCO_LOPA_ID ID_IMPORTADOR,
          LOPA.LOPA_RAZAO_SOCIAL RAZAO_SOCIAL,
          CASE
             WHEN LOPA.LOPA_CNPJ IS NOT NULL THEN LOPA.LOPA_CNPJ
             WHEN LOPA.LOPA_CPF IS NOT NULL THEN LOPA.LOPA_CPF
          END
             CGCCPF,
          DOCU_DI.DCO_IDENTIFICACAO DOC,
          CONT.CONT_NUMERO CONTEINER,
          ISCO.ISOC_TAMANHO || ISCO.ISOC_SIGLA TIPO_CONTEINER,
          IT.ARR_TS DATA_DESCARGA,
          CASE DOCU_DI.DCO_TIDO_ID WHEN 51 THEN 'DI' WHEN 46 THEN 'DTA' END
             TIPO_DOCUMENTO,
          (SELECT MAX (PCCI.DATA_HORA_OPERACAO)
             FROM BHS.VW_PRESENCA_CARGA_CTR_IMP PCCI
            WHERE PCCI.MERCADORIA_ID = MERC.MERC_ID)
             PRESENCA_CARGA,
          AGEN.AGEN_DT_PREGATE PREGATE,
          AGEN.AGEN_DT_GATEOUT GATEOUT,
          POSI.POSI_DT_SOLICITACAO SOLICITACAO_POSICIONAMENTO,
          POSI.POSI_DT_POSICIONADO POSICIONADO,
          TADO.AMTD_DTHR_TAREFA PRE_REGISTRO,
          TADR.AMTD_DTHR_TAREFA REGISTRO,
          CAEF.CAEF_DATA || ' ' || CAEF.CAEF_HORA_INICIAL JANELA_AGENDAMENTO,
          NAVI.NAVI_NOME NAVIO
     FROM BHS.DOCUMENTO DOCU_DI,
          BHS.DOCUMENTO DOCU_BL,
          BHS.TIPO_DOCUMENTO TIDO,
          BHS.AMR_DOCUMENTO_MERCADORIA DOME,
          BHS.MERCADORIA MERC,
          BHS.CONTEINER CONT,
          BHS.ISOCODE ISCO,
          BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          BHS.AMR_TAREFA_DOCUMENTO TADO,
          BHS.AMR_TAREFA_DOCUMENTO TADR,
          BHS.TAREFA TARE,
          BHS.TAREFA TARR,
          ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
          TOPS.ITEM IT,
          TAS.AGENDAMENTO AGEN,
          TAS.POSICIONAMENTO POSI,
          TAS.CATEGORIA_EFETIVA CAEF,
          BHS.AMR_DOCUMENTO AMDO
    WHERE     DOCU_DI.DCO_TIDO_ID = TIDO.TIDO_ID
          AND DOCU_BL.DCO_ID = DOME.AMDM_DCO_ID
          AND DOCU_BL.DCO_ID = AMDO.AMDO_DCO_ID_RELACIONADO
          AND DOCU_DI.DCO_ID = AMDO.AMDO_DCO_ID
          AND DOME.AMDM_MERC_ID = MERC.MERC_ID
          AND MERC.MERC_CONT_ID = CONT.CONT_ID
          AND CONT.CONT_ISOC_ID = ISCO.ISOC_ID
          AND MERC.MERC_ESCA_ID_IMP = ESCA.ESCA_ID
          AND ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
          AND DOCU_DI.DCO_LOPA_ID = LOPA.LOPA_ID
          AND DOCU_DI.DCO_DT_CANCELAMENTO IS NULL
          AND ESCA.ESCA_VIAGEM_TOS_IMP = TRIM (IT.ARR_CAR)
          AND DOCU_DI.DCO_ID = TADO.AMTD_DCO_ID
          AND TADO.AMTD_TARE_ID = TARE.TARE_ID
          AND TARE.TARE_ID = 314
          AND DOCU_DI.DCO_ID = TADR.AMTD_DCO_ID
          AND TADR.AMTD_TARE_ID = TARR.TARE_ID
          AND TARR.TARE_ID = 197
          AND AGEN.CAEF_ID = CAEF.CAEF_ID
          AND TRIM (IT.ITEM_NO) = CONT.CONT_NUMERO
          AND TO_NUMBER (TRIM (IT.VISIT_CODE)) = AGEN.AGEN_ID
          AND MERC.MERC_ID = POSI.POSI_MERC_ID_BHS(+)
          AND AGEN.AGEN_DT_GATEOUT IS NOT NULL
          AND (TIDO.TIDO_ID = 51 OR TIDO.TIDO_ID = 46)
/* 
Data Criação: 26/09/2014
Autor: Jorge Roberto
Motivo: Criação da VW_CONS_IMPORTADOR
*/

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_CONSULTA_DESCARGA" ("RAP", "CHEGADA", "ATRACACAO", "SAIDA", "PREVISAO_CHEGADA", "PREVISAO_ATRACACAO", "PREVISAO_SAIDA", "NAVIO", "SERVICO", "VIAGEM", "AGENCIA", "BERCO", "ARMADOR", "PREVISTOS") AS 
  SELECT DISTINCT ESCA.ESCA_RAP "RAP",
                 VEDE.ACT_PILOT_TS "CHEGADA",
                 VEDE.ACT_BERTH_TS "ATRACACAO",
                 VEDE.ACT_DEP_TS "SAIDA",
                 VEDE.EST_PILOT_TS "PREVISAO_CHEGADA",
                 VEDE.EST_BERTH_TS "PREVISAO_ATRACACAO",
                 VEDE.EST_DEP_TS "PREVISAO_SAIDA",
                 VEDE.VES_NAME "NAVIO",
                 VEDE.VES_SERVICE "SERVICO",
                 VEDE.TFC_CODE_I "VIAGEM",
                 VEDE.LINE_OPER "AGENCIA",                 
                 BERC.BEAT_DESCRICAO "BERCO",                 
                 MERC.MERC_LOPA_ARM_IMP "ARMADOR",
                 --CODE.QTDE "DESCARREGADO",
                 PRDE.PREVISTOS
            FROM TOPS.VESSEL_DETAILS VEDE,
                 BHS.ESCALA ESCA,
                 BHS.BERCO_ATRACACAO BERC,
                 BHS.MERCADORIA MERC,
                 --TAS.VW_CONTEINER_DESCARREGADO CODE,
                 TAS.VW_PREVISAO_DESCARGA PRDE
           WHERE VEDE.TFC_CODE_I = ESCA.ESCA_VIAGEM_TOS_IMP
             AND ESCA.ESCA_BEAT_ID = BERC.BEAT_ID
             AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP  
             AND MERC.MERC_LOPA_ARM_IMP IS NOT NULL
             --AND ESCA.ESCA_RAP = CODE.RAP
             --AND MERC.MERC_LOPA_ARM_IMP = CODE.ARMADOR
             AND ESCA.ESCA_RAP = PRDE.RAP
             AND MERC.MERC_LOPA_ARM_IMP = PRDE.ARMADOR

/*SELECT DISTINCT ESCA.ESCA_RAP "RAP",
                 VEDE.ACT_PILOT_TS "CHEGADA",
                 VEDE.ACT_BERTH_TS "ATRACACAO",
                 VEDE.ACT_DEP_TS "SAIDA",
                 VEDE.EST_PILOT_TS "PREVISAO_CHEGADA",
                 VEDE.EST_BERTH_TS "PREVISAO_ATRACACAO",
                 VEDE.EST_DEP_TS "PREVISAO_SAIDA",
                 VEDE.VES_NAME "NAVIO",
                 VEDE.VES_SERVICE "SERVICO",
                 VEDE.TFC_CODE_I "VIAGEM",
                 VEDE.LINE_OPER "AGENCIA",                 
                 BERC.BEAT_DESCRICAO "BERCO",
                 NVL (
                 (SELECT COUNT (*) PREVISTOS
                    FROM BHS.ESCALA ESCL, 
                         BHS.MERCADORIA MERA
                   WHERE ESCL.ESCA_ID = MERA.MERC_ESCA_ID_IMP
                     AND MERA.MERC_DT_PREVISAO_DESCARGA IS NOT NULL
                     AND MERA.MERC_STATUS = 'A'
                     AND ESCL.ESCA_ID = ESCA.ESCA_ID
                     AND MERA.MERC_LOPA_ARM_IMP = MERC.MERC_LOPA_ARM_IMP ),0)
                "PREV_DESCARGA",
                NVL(
                    (SELECT COUNT(*) 
                       FROM TOPS.ITEM IT,                            
                            TOPS.VESSEL_DETAILS VEDE,
                            ACCESSCONTROL.LOCAL_PARCEIRO LOPA
                      WHERE IT.VES_ID = VEDE.VES_ID
                        AND TRIM(IT.ARR_CAR) = TRIM(VEDE.TFC_CODE_I)
                        AND TRIM(VEDE.LINE_OPER) = TRIM(LOPA.BTP_EMP_CONSTANTE)
                        AND TRIM(VEDE.TFC_CODE_I) = TRIM(ESCA.ESCA_VIAGEM_TOS_IMP)
                        AND LOPA.LOPA_ID = MERC.MERC_LOPA_ARM_IMP), 0)
                 "DESCARREGADOS",
                 MERC.MERC_LOPA_ARM_IMP
            FROM TOPS.VESSEL_DETAILS VEDE,
                 BHS.ESCALA ESCA,
                 BHS.BERCO_ATRACACAO BERC,
                 BHS.MERCADORIA MERC
           WHERE VEDE.TFC_CODE_I = ESCA.ESCA_VIAGEM_TOS_IMP
             AND ESCA.ESCA_BEAT_ID = BERC.BEAT_ID
             AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP  
             AND MERC.MERC_LOPA_ARM_IMP IS NOT NULL                   */

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_CONSULTA_EMBARQUE" ("RAP", "CHEGADA", "ATRACACAO", "SAIDA", "PREVISAO_CHEGADA", "PREVISAO_ATRACACAO", "PREVISAO_SAIDA", "NAVIO", "SERVICO", "VIAGEM", "AGENCIA", "BERCO", "ARMADOR", "PREVISTOS") AS 
  SELECT DISTINCT ESCA.ESCA_RAP "RAP",
                   VEDE.ACT_PILOT_TS "CHEGADA",
                   VEDE.ACT_BERTH_TS "ATRACACAO",
                   VEDE.ACT_DEP_TS "SAIDA",
                   VEDE.EST_PILOT_TS "PREVISAO_CHEGADA",
                   VEDE.EST_BERTH_TS "PREVISAO_ATRACACAO",
                   VEDE.EST_DEP_TS "PREVISAO_SAIDA",
                   VEDE.VES_NAME "NAVIO",
                   VEDE.VES_SERVICE "SERVICO",
                   VEDE.TFC_CODE_E "VIAGEM",
                   VEDE.LINE_OPER "AGENCIA",
                   BERC.BEAT_DESCRICAO "BERCO",
                   MERC.MERC_LOPA_ARM_EXP "ARMADOR",
                   --COEM.QTDE "EMBARCADOS",
                   PREM.QTDE "PREVISTOS"
     FROM TOPS.VESSEL_DETAILS VEDE,
          BHS.ESCALA ESCA,
          BHS.BERCO_ATRACACAO BERC,
          BHS.MERCADORIA MERC,
          --TAS.VW_CONTEINER_EMBARCADOS COEM,
          TAS.VW_PREVISAO_EMBARQUE PREM
    WHERE     VEDE.TFC_CODE_E = ESCA.ESCA_VIAGEM_TOS_EXP
          AND ESCA.ESCA_BEAT_ID = BERC.BEAT_ID
          AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
          AND MERC.MERC_LOPA_ARM_EXP IS NOT NULL
         -- AND ESCA.ESCA_RAP = COEM.RAP
         -- AND TRIM(VEDE.LINE_OPER) = TRIM(COEM.ARMADOR)
          AND ESCA.ESCA_RAP = PREM.RAP
          AND MERC.MERC_LOPA_ARM_EXP = PREM.ARMADOR

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_CONTEINER_DESCARREGADO" ("CONTEINER", "ID", "ARMADOR", "RAP", "DATA_DESCARGA") AS 
  SELECT DISTINCT IT.ITEM_NO "CONTEINER",
            ROWNUM "ID",
            MERC.MERC_LOPA_ARM_IMP "ARMADOR",
            ESCA.ESCA_RAP "RAP",
            IT.ARR_TS "DATA_DESCARGA"
       FROM TOPS.ITEM IT,
            BHS.MERCADORIA MERC,
            BHS.ESCALA ESCA,
            ACCESSCONTROL.LOCAL_PARCEIRO LOPA,
            BHS.CONTEINER CONT
      WHERE IT.ARR_CAR = ESCA.ESCA_VIAGEM_TOS_IMP
        AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_IMP
        AND MERC.MERC_LOPA_ARM_IMP = LOPA.LOPA_ID
        AND TRIM (IT.LINE_OPER) = LOPA.BTP_EMP_CONSTANTE
        AND IT.ARR_TS != TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
        AND MERC.MERC_CONT_ID = CONT.CONT_ID
        AND TRIM(IT.ITEM_NO) = TRIM(CONT.CONT_NUMERO)
        AND IT.CATEGORY IN ('I', 'T')
        AND MERC.MERC_STATUS = 'S'

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_CONTEINER_EMBARCADOS" ("CONTEINER", "ID", "DATA_EMBARQUE", "CATEGORY", "RAP", "ESCA_ID", "CTCA_CONSTANTE", "MERC_CH_VZ", "ISOC_TAMANHO", "ISOC_CODIGO", "ARMADOR", "FEL") AS 
  SELECT DISTINCT IT.ITEM_NO "CONTEINER", 
             ROWNUM "ID",        
             IT.DEP_TS AS "DATA_EMBARQUE",
             IT.CATEGORY,
             ESCA.ESCA_RAP "RAP",                              
             ESCA.ESCA_ID,
             --MERC.MERC_ID,
             CACA.CTCA_CONSTANTE,
             MERC.MERC_CH_VZ,
             ISO.ISOC_TAMANHO,
             iso.ISOC_CODIGO,
             IT.LINE_OPER "ARMADOR",
             IT.FEL
       FROM TOPS.ITEM it,
            BHS.escala esca,
            BHS.MERCADORIA MERC,
            BHS.CONTEINER CONT,
            BHS.ISOCODE ISO,
            BHS.CATEGORIA_CARGA CACA,
            BHS.NAVIO NAV
      WHERE     TRIM (IT.DEP_CAR) = ESCA.ESCA_VIAGEM_TOS_EXP
            AND IT.CATEGORY IN ('E', 'T')
            AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP
            AND MERC.MERC_CONT_ID = CONT.CONT_ID
            AND CONT.CONT_NUMERO = TRIM (IT.ITEM_NO)
            AND CACA.CTCA_ID = MERC.MERC_CTCA_ID
            AND NAV.NAVI_ID = ESCA.ESCA_NAVI_ID
            AND CONT.CONT_ISOC_ID = ISO.ISOC_ID
            AND CACA.CTCA_CONSTANTE IN ('CS_EXP', 'CS_TRANS')
            AND IT.DEP_TS != TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS' )

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_DETALHES_VIAGEM" ("ID", "NAVIO", "RAP", "VIAGEM", "JOINT", "SERVICO", "B_WINDOW", "PREVISAO_CHEGADA", "ATRACACAO", "INICIO_OPERACAO", "FIM_OPERACAO", "PREVISAO_SAIDA", "SAIDA", "COMPRIMENTO", "TIPO_OPERACAO", "CODIGO_CODESP", "DEADLINE", "BERCO", "CALADO_ATRACACAO", "CALADO_DESATRACACAO", "VIAGEM_EMBARQUE", "VIAGEM_DESCARGA", "MOTIVO_ESPERA", "LIBERACAO_RECEBIMENTO", "DIRECAO_ATRACACAO") AS 
  SELECT ROWNUM Id,
          NAVI.NAVI_NOME NAVIO,
          ESCA.ESCA_RAP RAP,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM,
          CASE NVL (ESCA.ESCA_TIPO_TRAFEGO, '')
             WHEN 'L' THEN 'LONGO CURSO'
             WHEN 'C' THEN 'CABOTAGEM'
             ELSE ESCA.ESCA_TIPO_TRAFEGO
          END
             AS JOINT,
          VES_SERVICE SERVICO,
          '' B_WINDOW,
          CASE
             WHEN TVVS.EST_PILOT_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.EST_PILOT_TS
          END
             AS PREVISAO_CHEGADA,
          CASE
             WHEN TVVS.ACT_BERTH_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.ACT_BERTH_TS
          END
             AS ATRACACAO,
          CASE
             WHEN TVVS.ACT_START_WORK_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.ACT_START_WORK_TS
          END
             AS INICIO_OPERACAO,
          CASE
             WHEN TVVS.ACT_END_WORK_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.ACT_END_WORK_TS
          END
             AS FIM_OPERACAO,
          CASE
             WHEN TVVS.EST_DEP_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.EST_DEP_TS
          END
             AS PREVISAO_SAIDA,
          CASE
             WHEN TVVS.ACT_DEP_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.ACT_DEP_TS
          END
             AS SAIDA,
          VESS.VES_LEN COMPRIMENTO,
          'Emb./Desc.' TIPO_OPERACAO,
          '' CODIGO_CODESP,
          CASE
             WHEN TVVS.RECV_CTR_CUTOFF_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TVVS.RECV_CTR_CUTOFF_TS
          END
             AS DEADLINE,
          BERC.BEAT_DESCRICAO BERCO,
          '' CALADO_ATRACACAO,
          '' CALADO_DESATRACACAO,
          ESCA.ESCA_VIAGEM_TOS_EXP VIAGEM_EMBARQUE,
          ESCA.ESCA_VIAGEM_TOS_IMP VIAGEM_DESCARGA,
          CASE
             WHEN VWSR.DESCRIPTION IS NULL THEN '-'
             ELSE VWSR.DESCRIPTION
          END
             MOTIVO_ESPERA,
          '' LIBERACAO_RECEBIMENTO,
          DECODE (TVVS.BTOA_SIDE,
                  'P', 'BOMBORDO',
                  'S', 'BORESTE',
                  TVVS.BTOA_SIDE)
             DIRECAO_ATRACACAO
     FROM BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          BHS.BERCO_ATRACACAO BERC,
          TOPS.VESSEL_DETAILS TVVS,
          TOPS.VESSELS VESS,
          TOPS.VIEW_WORK_STOP_REASON VWSR
    WHERE     NAVI.NAVI_ID = ESCA.ESCA_NAVI_ID
          AND ESCA.ESCA_BEAT_ID = BERC.BEAT_ID
          AND (   TRIM (TVVS.TFC_CODE_E) = TRIM (ESCA.ESCA_VIAGEM_TOS_EXP)
               OR TRIM (TVVS.TFC_CODE_I) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
          AND TVVS.VES_CD = VESS.VES_CD
          AND TVVS.STOP_CODE = VWSR.CODE(+)

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_GATE_IN_CS" ("AGEN_ID", "AGEN_DT_PREGATE", "AGEN_DT_GATE", "AGEN_DT_GATEOUT", "AGEN_DT_CANCELAMENTO", "CATE_NOME", "CAEF_DATA", "CAEF_HORA_INICIAL", "CAEF_HORA_FINAL", "CAEF_HORA_ANTES", "CAEF_HORA_LIMITE", "TRANSPORTADORA", "VEIC_PLACA", "VEIC_REBOQUE_1", "VEIC_REBOQUE_2", "VEIC_RENAVAM", "MOTO_CPF", "MOTO_CNH", "MOTO_RG", "MOTO_NOME", "PORTO_DESCARGA", "PORTO_FINAL", "DEAD_LINE", "BOOK_NUMERO_BOOKING", "EXPORTADOR", "NOTA_FISCAL", "SERIE", "EMISSAO", "MERCADORIA", "QUANTIDADE") AS 
  select distinct
  agen.AGEN_ID, agen.AGEN_DT_PREGATE, agen.AGEN_DT_GATE, agen.AGEN_DT_GATEOUT, agen.AGEN_DT_CANCELAMENTO, 
  cate.CATE_NOME, caef.CAEF_DATA, caef.CAEF_HORA_INICIAL, caef.CAEF_HORA_FINAL, caef.CAEF_HORA_ANTES, caef.CAEF_HORA_LIMITE, 
  lopaT.LOPA_RAZAO_SOCIAL TRANSPORTADORA,
  veic.VEIC_PLACA, veic.VEIC_REBOQUE_1, veic.VEIC_REBOQUE_2, veic.VEIC_RENAVAM, 
  moto.MOTO_CPF, moto.MOTO_CNH, moto.MOTO_RG, moto.MOTO_NOME, 
  portPOD.PORT_NOME PORTO_DESCARGA, portFPOD.PORT_NOME PORTO_FINAL, vesc.RECV_CTR_CUTOFF_TS DEAD_LINE, book.BOOK_NUMERO_BOOKING,
  lopaExp.LOPA_RAZAO_SOCIAL EXPORTADOR,
  docu.DOCU_DESCRICAO NOTA_FISCAL, docu.DOCU_SERIE SERIE, docu.DOCU_DT_EMISSAO EMISSAO,
  ncm.NCM_DESCRICAO MERCADORIA, count(ncm.NCM_ID) QUANTIDADE
from 
  agendamento agen
inner join AMR_MERCADORIA_AGENDAMENTO amma on agen.AGEN_ID = amma.AMMA_AGEND_ID
inner join MERCADORIA merc on amma.AMMA_MERC_ID = merc.MERC_ID
inner join BHS.MERCADORIA merc_bhs on merc.MERC_ID_BHS = merc_bhs.MERC_ID
inner join CATEGORIA_EFETIVA caef on agen.CAEF_ID = caef.CAEF_ID
inner join CATEGORIA_BASE caba on caef.CABA_ID = caba.CABA_ID
inner join CATEGORIA cate on caba.cate_id = cate.CATE_ID
inner join ACCESSCONTROL.LOCAL_PARCEIRO lopaT on agen.LOPA_ID_TRANSP = lopaT.LOPA_ID
inner join VEICULO veic on agen.VEIC_ID = veic.VEIC_ID
inner join MOTORISTA moto on agen.MOTO_ID = moto.MOTO_ID
inner join BHS.ESCALA esca on merc_bhs.MERC_ESCA_ID_EXP = esca.ESCA_ID
inner join BHS.ITEM_BOOKING itbo on merc.MERC_ID = itbo.ITBO_MERC_ID_TAS
inner join AMR_ITDO_MERCADORIA amidm on merc.MERC_ID = amidm.MERC_ID
inner join ITEM_DOCUMENTO itdo on amidm.ITDO_ID = itdo.ITDC_ID
inner join DOCUMENTO docu on itdo.DOCU_ID = docu.DOCU_ID
inner join ACCESSCONTROL.LOCAL_PARCEIRO lopaExp on docu.LOPA_ID = lopaExp.LOPA_ID
inner join BHS.BOOKING book on itbo.ITBO_BOOK_ID = book.BOOK_ID
inner join BHS.PORTO portPOD on book.BOOK_PORT_ID_POD = portPOD.PORT_ID
inner join BHS.PORTO portFPOD on book.BOOK_PORT_ID_FPOD = portFPOD.PORT_ID
inner join TOPS.VIEW_VES_SCHEDULE vesc on esca.ESCA_VIAGEM_TOS_EXP = TRIM(vesc.TFC_EXP)
inner join NCM ncm on itdo.NCM_ID = ncm.NCM_ID
where
  merc_bhs.MERC_STATUS = 'A' and merc_bhs.MERC_DT_CANCEL is null and book.BOOK_FULL_EMPTY is null
group by
  agen.AGEN_ID, agen.AGEN_DT_PREGATE, agen.AGEN_DT_GATE, agen.AGEN_DT_GATEOUT, agen.AGEN_DT_CANCELAMENTO, 
  cate.CATE_NOME, caef.CAEF_DATA, caef.CAEF_HORA_INICIAL, caef.CAEF_HORA_FINAL, caef.CAEF_HORA_ANTES, caef.CAEF_HORA_LIMITE, 
  lopaT.LOPA_RAZAO_SOCIAL,
  veic.VEIC_PLACA, veic.VEIC_REBOQUE_1, veic.VEIC_REBOQUE_2, veic.VEIC_RENAVAM, 
  moto.MOTO_CPF, moto.MOTO_CNH, moto.MOTO_RG, moto.MOTO_NOME, 
  portPOD.PORT_NOME, portFPOD.PORT_NOME, vesc.RECV_CTR_CUTOFF_TS, book.BOOK_NUMERO_BOOKING,
  lopaExp.LOPA_RAZAO_SOCIAL,
  docu.DOCU_DESCRICAO, docu.DOCU_SERIE, docu.DOCU_DT_EMISSAO,
  ncm.NCM_DESCRICAO
order by agen.AGEN_ID

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_HEADER_SUPERVIAS" ("NUMERO_VIAGEM", "DT_HR_INICIO_OPERACAO", "DT_HR_FIM_OPERACAO", "NUM_VIA_ARMADOR", "DESCRICAO_NAVIO", "NUMERO_LLOYDS", "VIAGEM") AS 
  SELECT REPLACE (ESCA.ESCA_RAP, '  ', '/') AS NUMERO_VIAGEM,
          CASE
             WHEN TVVS.ACT_START_WORK_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_START_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             "DT_HR_INICIO_OPERACAO",
          CASE
             WHEN TVVS.ACT_END_WORK_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             "DT_HR_FIM_OPERACAO",
          ESCA.ESCA_NUMERO_VIAGEM NUM_VIA_ARMADOR,
          NAVI.NAVI_NOME DESCRICAO_NAVIO,
          NAVI.NAVI_LLOYD NUMERO_LLOYDS,
          ESCA.ESCA_ID VIAGEM
     FROM BHS.ESCALA ESCA,
          BHS.NAVIO NAVI, 
          TOPS.VESSEL_DETAILS TVVS
    WHERE ESCA.ESCA_NAVI_ID = NAVI.NAVI_ID
          AND ( ESCA.ESCA_VIAGEM_TOS_IMP = TRIM (TVVS.TFC_CODE_I)
             OR ESCA.ESCA_VIAGEM_TOS_EXP = TRIM (TVVS.TFC_CODE_E))

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_ITEM_TOPS" ("Id", "SITE_ID", "ITEM_KEY", "ITEM_NO", "ACC_NO", "AGENT", "ARR_BY", "ARR_CAR", "ARR_TS", "BILL_OF_LADING", "BOOK_NO", "BKG_WEIGHT", "COMMOD", "CONSIGNOR", "CATEGORY", "CGO_MEASURE", "CGO_GROSS_WT", "CGO_NET_WT", "CTR_OWNER", "CUSTOM_CHECK_FLG", "DEP_BY", "DEP_CAR", "DEP_TS", "DGS_MIN", "DISCH_PORT", "FDISCH_PORT", "FEL", "FIN_DEST", "FOOD_STUFF", "GROSS", "HEIGHT", "IS_ATTACH", "IS_CFS", "IS_COMMENTS", "IS_CONSOLE", "IS_CTR", "IS_DAMAGED", "IS_DANGEROUS", "IS_DOOR_OPEN", "IS_FCL_ADD", "IS_FOLDED", "IS_OOG", "IS_PRETRIP", "IS_REEFER", "IS_SHORING", "IS_TOPPING", "ISO", "ITEM_CLASS", "ITEM_SIZE", "ITEM_STATUS", "ITEM_TYPE", "LENGTH", "LINE_OPER", "LOAD_PORT", "MANIFEST_NO", "OPER_NAME", "ORG_PORT", "PEB_CLR_YN", "PEB_EXP_NO", "PIB_CLR_YN", "PIB_IMP_NO", "PKG_QTY", "PKG_UNIT", "PLACE_OF_DELIVERY", "PLACE_OF_RECEIPT", "RECEIVER_ID", "RELEASE_NO", "SEAL_NO_CURRENT", "SHIPPER", "SHUTOUT_MARK", "SHUTOUT_REMARK", "SHUTOUT_TS", "SPEC_HNDL", "TARE", "TERMS", "VES_CD", "VES_ID", "HIST_FLG", "UPD_TS", "MTY_PLACE_OF_RETURN", "NOTIFY_DETAILS", "CUST_RELEASE_MARK", "PRODUCTION_NO", "EXPORT_CONFIRMED", "SHUTOUT_BY", "FREIGHT_FORWARDER", "REASON_FOR_TRANSFER", "ARR_CAR_MANIFEST", "PKG_TYPE", "CONEE_ON_MANIFEST", "CUSTOMS_VOL_STR", "CUSTOMS_VOL_STU", "BROKER", "EXPORT_CONFIRMED_TS", "CUSTOMS_WHAFT_CD", "CUSTOMS_AREA", "EXP_CTR_REMARK", "DELIVER_TO", "CUST_RELEASE_TS", "LL_DISCH_PORT", "QRT_CHECKED", "QRT_INSP_START_TS", "QRT_INSP_END_TS", "EXP_MTY_TS", "REEXP_EXT_NO", "IMP_CGO_CLEARED", "IMP_CGO_CLEARED_NO", "IMP_PERMIT_REC_TS", "EST_DEP_TS", "EST_TS_TO_BOND", "MTY_RANK", "EXP_CGO_CLEARED", "CUST_DELV_PERMIT_NO", "PEB_REQ", "PIB_IMP_DATE", "MULTI_BL", "CAR_TYPE", "COPRAR_LOAD", "VIP", "NO_PREADVISE_ATGATE", "SRC_STN", "DEST_STN", "REF_NO", "CARRIER_TYPE", "COPRAR_DISCHARGE", "DEP_CARRIER_TYPE", "SHIPPER_REF", "KILL_SLOT", "VES_ID_NOT_KNOWN", "SERVICEABLE", "WORKING_REEFER", "IMDG_LABEL", "SPECIAL_HDL_CODE", "SWAP_BODY_FOLDED", "INTER_MOVE_CODE", "RAIL_CUSTOM_STATUS", "SPECIAL_USED", "CTRN_DELIVERY_MEMO", "CPA_XRAY_REQUIRED", "RESTRICT_FLG", "MANUFACTURE_DT", "MAX_GROSS", "CSC_DT", "CSC_FLG", "OP_TERMINAL", "OP_SUBTERMINAL", "IS_RESEALED", "TRANSPORT_PORT_ORDER_NO", "TRANSPORT_PORT_ORDER_POS", "INTERNALREF", "IS_EU", "WHO_PAYS", "GRADE", "TERMINAL_ID", "SEAL_CHECK_REQ", "PAY_SERVICE_CD", "CSC_LABEL", "IS_SWAP_BODY", "SPECIAL_GEAR", "COUNTRY_CD", "ORIG_ISO", "CARR_CD", "CONSORTIUM_CD", "RA_KEY", "BOOK_KEY", "RESTOW_TYPE", "BB_ID", "BUNDLE_TO", "UNBUNDLE_FROM", "RESTOW_ACC_TYPE", "RESTOW_ACC", "CPA_RETURN", "UPD_CNT", "ORG_CRT_TS", "LOADORDER_SENDER", "ORIGIN_TERMINAL", "ORIGIN_TERMINAL_TYPE", "VES_OP", "IS_ATTACH_STOP", "CHARGES_TO_DT", "SO_NO", "ATP_NO", "SEAL_UNABLE_CHECK", "CONSIGNEE_NO", "GMCI", "CUST_REG_NO", "VISIT_CODE") AS 
  SELECT ROWNUM "Id", "SITE_ID","ITEM_KEY","ITEM_NO","ACC_NO","AGENT","ARR_BY","ARR_CAR","ARR_TS","BILL_OF_LADING","BOOK_NO","BKG_WEIGHT","COMMOD","CONSIGNOR","CATEGORY","CGO_MEASURE","CGO_GROSS_WT","CGO_NET_WT","CTR_OWNER","CUSTOM_CHECK_FLG","DEP_BY","DEP_CAR","DEP_TS","DGS_MIN","DISCH_PORT","FDISCH_PORT","FEL","FIN_DEST","FOOD_STUFF","GROSS","HEIGHT","IS_ATTACH","IS_CFS","IS_COMMENTS","IS_CONSOLE","IS_CTR","IS_DAMAGED","IS_DANGEROUS","IS_DOOR_OPEN","IS_FCL_ADD","IS_FOLDED","IS_OOG","IS_PRETRIP","IS_REEFER","IS_SHORING","IS_TOPPING","ISO","ITEM_CLASS","ITEM_SIZE","ITEM_STATUS","ITEM_TYPE","LENGTH","LINE_OPER","LOAD_PORT","MANIFEST_NO","OPER_NAME","ORG_PORT","PEB_CLR_YN","PEB_EXP_NO","PIB_CLR_YN","PIB_IMP_NO","PKG_QTY","PKG_UNIT","PLACE_OF_DELIVERY","PLACE_OF_RECEIPT","RECEIVER_ID","RELEASE_NO","SEAL_NO_CURRENT","SHIPPER","SHUTOUT_MARK","SHUTOUT_REMARK","SHUTOUT_TS","SPEC_HNDL","TARE","TERMS","VES_CD","VES_ID","HIST_FLG","UPD_TS","MTY_PLACE_OF_RETURN","NOTIFY_DETAILS","CUST_RELEASE_MARK","PRODUCTION_NO","EXPORT_CONFIRMED","SHUTOUT_BY","FREIGHT_FORWARDER","REASON_FOR_TRANSFER","ARR_CAR_MANIFEST","PKG_TYPE","CONEE_ON_MANIFEST","CUSTOMS_VOL_STR","CUSTOMS_VOL_STU","BROKER","EXPORT_CONFIRMED_TS","CUSTOMS_WHAFT_CD","CUSTOMS_AREA","EXP_CTR_REMARK","DELIVER_TO","CUST_RELEASE_TS","LL_DISCH_PORT","QRT_CHECKED","QRT_INSP_START_TS","QRT_INSP_END_TS","EXP_MTY_TS","REEXP_EXT_NO","IMP_CGO_CLEARED","IMP_CGO_CLEARED_NO","IMP_PERMIT_REC_TS","EST_DEP_TS","EST_TS_TO_BOND","MTY_RANK","EXP_CGO_CLEARED","CUST_DELV_PERMIT_NO","PEB_REQ","PIB_IMP_DATE","MULTI_BL","CAR_TYPE","COPRAR_LOAD","VIP","NO_PREADVISE_ATGATE","SRC_STN","DEST_STN","REF_NO","CARRIER_TYPE","COPRAR_DISCHARGE","DEP_CARRIER_TYPE","SHIPPER_REF","KILL_SLOT","VES_ID_NOT_KNOWN","SERVICEABLE","WORKING_REEFER","IMDG_LABEL","SPECIAL_HDL_CODE","SWAP_BODY_FOLDED","INTER_MOVE_CODE","RAIL_CUSTOM_STATUS","SPECIAL_USED","CTRN_DELIVERY_MEMO","CPA_XRAY_REQUIRED","RESTRICT_FLG","MANUFACTURE_DT","MAX_GROSS","CSC_DT","CSC_FLG","OP_TERMINAL","OP_SUBTERMINAL","IS_RESEALED","TRANSPORT_PORT_ORDER_NO","TRANSPORT_PORT_ORDER_POS","INTERNALREF","IS_EU","WHO_PAYS","GRADE","TERMINAL_ID","SEAL_CHECK_REQ","PAY_SERVICE_CD","CSC_LABEL","IS_SWAP_BODY","SPECIAL_GEAR","COUNTRY_CD","ORIG_ISO","CARR_CD","CONSORTIUM_CD","RA_KEY","BOOK_KEY","RESTOW_TYPE","BB_ID","BUNDLE_TO","UNBUNDLE_FROM","RESTOW_ACC_TYPE","RESTOW_ACC","CPA_RETURN","UPD_CNT","ORG_CRT_TS","LOADORDER_SENDER","ORIGIN_TERMINAL","ORIGIN_TERMINAL_TYPE","VES_OP","IS_ATTACH_STOP","CHARGES_TO_DT","SO_NO","ATP_NO","SEAL_UNABLE_CHECK","CONSIGNEE_NO","GMCI","CUST_REG_NO","VISIT_CODE" FROM TOPS.ITEM

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_LISTA_ATRACACAO" ("ID", "RAP", "NAVIO", "VIAGEM", "AGENCIA", "PREVISAO_CHEGADA", "CHEGADA", "PREVISAO_ATRACACAO", "ATRACACAO", "PREVISAO_SAIDA", "SAIDA", "ABERTURA_GATE_DRY", "ABERTURA_GATE_REFEER", "DEADLINE_CARGA", "SERVICO", "BERCO", "QTD", "PREV_DESCARGA", "PREV_EMBARQUE", "PREV_REMOCAO", "DIRECAO_VIAGEM") AS 
  SELECT ROWNUM Id,
          ESCA.ESCA_RAP RAP,
          NAVI.NAVI_NOME NAVIO,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM,
          TVVS.LINE_OPER AGENCIA,
          CASE
             WHEN TVVS.EST_PILOT_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.EST_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             PREVISAO_CHEGADA,
          CASE
             WHEN TVVS.ACT_PILOT_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (
                   TO_CHAR (TVVS.ACT_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS'),
                   'DD/MM/YYYY HH24:MI:SS')
          END
             CHEGADA,
          CASE
             WHEN TVVS.EST_BERTH_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (
                   TO_CHAR (TVVS.EST_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS'),
                   'DD/MM/YYYY HH24:MI:SS')
          END
             PREVISAO_ATRACACAO,
          CASE
             WHEN TVVS.ACT_BERTH_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (
                   TO_CHAR (TVVS.ACT_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS'),
                   'DD/MM/YYYY HH24:MI:SS')
          END
             ATRACACAO,
          CASE
             WHEN TVVS.EST_DEP_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.EST_DEP_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             PREVISAO_SAIDA,
          CASE
             WHEN TVVS.ACT_DEP_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                NULL
             ELSE
                TO_DATE (TO_CHAR (TVVS.ACT_DEP_TS, 'DD/MM/YYYY HH24:MI:SS'),
                         'DD/MM/YYYY HH24:MI:SS')
          END
             SAIDA,
          CASE
             WHEN ESCA.ESCA_DT_GATE =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (ESCA.ESCA_DT_GATE, 'DD/MM/YYYY HH24:MI:SS')
          END
             ABERTURA_GATE_DRY,
          CASE
             WHEN ESCA.ESCA_DT_GATE_FRIGO =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (ESCA.ESCA_DT_GATE_FRIGO, 'DD/MM/YYYY HH24:MI:SS')
          END
             ABERTURA_GATE_REFEER,
          CASE
             WHEN TVVS.RECV_CTR_CUTOFF_TS =
                     TO_DATE ('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')
             THEN
                ''
             ELSE
                TO_CHAR (TVVS.RECV_CTR_CUTOFF_TS, 'DD/MM/YYYY HH24:MI:SS')
          END
             DEADLINE_CARGA,
          VES_SERVICE SERVICO,
          BEAT.BEAT_DESCRICAO BERCO,
          FN_QTD_ESTADA_CNT (ESCA.ESCA_RAP) QTD,
          ESCA.ESCA_QT_PREVISAO_IMP PREV_DESCARGA,
          ESCA.ESCA_QT_PREVISAO_EXP PREV_EMBARQUE,
          ESCA.ESCA_QT_PREVISAO_REMOCAO PREV_REMOCAO,
          CASE
             WHEN ESCA.ESCA_DIRECAO_VIAGEM = 'NORTE' THEN 'NB'
             WHEN ESCA.ESCA_DIRECAO_VIAGEM = 'SUL' THEN 'SB'
          END
             DIRECAO_VIAGEM
     FROM BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          TOPS.VESSEL_DETAILS TVVS,
          BHS.BERCO_ATRACACAO BEAT
    WHERE     NAVI.NAVI_ID = ESCA.ESCA_NAVI_ID
          AND ESCA.ESCA_BEAT_ID = BEAT.BEAT_ID
          AND (   TRIM (TVVS.TFC_CODE_E) = TRIM (ESCA.ESCA_VIAGEM_TOS_EXP)
               OR TRIM (TVVS.TFC_CODE_I) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
          AND TRUNC (TVVS.VISIT_CANCELLED_TS) =
                 TO_DATE ('31/12/1900', 'DD/MM/YYYY')
/*----------------------------------------------------------------------------------------- 
Data Alterao: 17/04/2015
Autor: Jorge Roberto
Motivo: Alterao realizada para que as viagens canceladas devidamente no TOPO no apaream mais na lista, essas viagens so identificadas quando o valor do campo for diferente de 31/12/1900.
Data Alterao: 03/02/2017
Autor: Jorge Roberto
Motivo: Ajuste nos valores das previses de Descarga, Embarque e Remoo, pois foram divididas as gravaes em cheios e vazios.
Data Alterao: 14/02/2017
Autor: Jorge Roberto
Motivo: Retirado os campos referentes ao SOF, retornando a consulta ao estado anterior.
-----------------------------------------------------------------------------------------*/

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_LISTA_ATRACACAO_TRA" ("ID", "RAP", "NAVIO", "VIAGEM", "AGENCIA", "CHEGADA", "PREVISAO_ATRACACAO", "ATRACACAO", "PREVISAO_SAIDA", "SAIDA", "ABERTURA_GATE_TRA", "DEADLINE_CARGA", "SERVICO", "BERCO", "QTD", "PREV_DESCARGA", "PREV_EMBARQUE", "PREV_REMOCAO", "DIRECAO_VIAGEM", "TERMINO_OPERACAO") AS 
  SELECT ROWNUM Id,
          ESCA.ESCA_RAP RAP,
          NAVI.NAVI_NOME NAVIO,
          ESCA.ESCA_NUMERO_VIAGEM VIAGEM,
          TVVS.LINE_OPER AGENCIA,         
                                              CASE WHEN TVVS.ACT_PILOT_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.ACT_PILOT_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END CHEGADA,
                                              CASE WHEN TVVS.EST_BERTH_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.EST_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END PREVISAO_ATRACACAO,
                                              CASE WHEN TVVS.ACT_BERTH_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.ACT_BERTH_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END ATRACACAO,
                                              CASE WHEN TVVS.EST_DEP_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.EST_DEP_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END PREVISAO_SAIDA,
                                               CASE WHEN TVVS.ACT_DEP_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.ACT_DEP_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END SAIDA,                                             
                                             CASE WHEN ESCA.ESCA_DT_GATE_TRA = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(ESCA.ESCA_DT_GATE_TRA, 'DD/MM/YYYY HH24:MI:SS') 
                                             END ABERTURA_GATE_TRA,
                                             CASE WHEN TVVS.RECV_CTR_CUTOFF_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.RECV_CTR_CUTOFF_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END
             DEADLINE_CARGA,
          VES_SERVICE SERVICO,
          BEAT.BEAT_DESCRICAO BERCO,
          FN_QTD_ESTADA_CNT (ESCA.ESCA_RAP) QTD,   
          ESCA.ESCA_QT_PREVISAO_IMP PREV_DESCARGA,
          ESCA.ESCA_QT_PREVISAO_EXP PREV_EMBARQUE,
          ESCA.ESCA_QT_PREVISAO_REMOCAO PREV_REMOCAO,
          CASE WHEN ESCA.ESCA_DIRECAO_VIAGEM = 'NORTE' THEN 'NB'
               WHEN ESCA.ESCA_DIRECAO_VIAGEM = 'SUL' THEN 'SB'
          END DIRECAO_VIAGEM,
          CASE WHEN TVVS.ACT_END_WORK_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS') THEN
                                                ''
                                             ELSE
                                                TO_CHAR(TVVS.ACT_END_WORK_TS, 'DD/MM/YYYY HH24:MI:SS') 
                                             END TERMINO_OPERACAO
     FROM BHS.ESCALA ESCA,
          BHS.NAVIO NAVI,
          TOPS.VESSEL_DETAILS TVVS,
          BHS.BERCO_ATRACACAO BEAT
    WHERE     NAVI.NAVI_ID = ESCA.ESCA_NAVI_ID
          AND ESCA.ESCA_BEAT_ID = BEAT.BEAT_ID
          AND (   TRIM (TVVS.TFC_CODE_E) = TRIM (ESCA.ESCA_VIAGEM_TOS_EXP)
               OR TRIM (TVVS.TFC_CODE_I) = TRIM (ESCA.ESCA_VIAGEM_TOS_IMP))
     ORDER BY TVVS.EST_PILOT_TS ASC

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_PREVISAO_EMBARQUE" ("QTDE", "RAP", "ARMADOR") AS 
  SELECT COUNT (DISTINCT CONT.CONT_NUMERO) "QTDE",
            ESCA.ESCA_RAP "RAP",
            MERC.MERC_LOPA_ARM_EXP "ARMADOR"
       FROM BHS.ESCALA ESCA, 
            BHS.MERCADORIA MERC, 
            BHS.CONTEINER CONT,
            TOPS.ITEM IT
      WHERE IT.DEP_CAR = ESCA.ESCA_VIAGEM_TOS_EXP
        AND ESCA.ESCA_ID = MERC.MERC_ESCA_ID_EXP 
        AND IT.DEP_TS = TO_DATE('31/12/1900 23:00:00', 'DD/MM/YYYY HH24:MI:SS')       
        AND MERC.MERC_STATUS = 'T'
        AND MERC.MERC_LOPA_ARM_EXP IS NOT NULL
        AND MERC.MERC_CONT_ID = CONT.CONT_ID         
   GROUP BY ESCA.ESCA_RAP, 
            MERC.MERC_LOPA_ARM_EXP

  CREATE OR REPLACE FORCE VIEW "TAS"."VW_VES_VOYAGE" ("ID", "VES_ID", "SITE_ID", "LINE_OPER", "IN_VOYAGE", "OUT_VOYAGE", "UPD_TS", "EFFECTIVE_DATE", "UPD_CNT", "VES_SERVICE") AS 
  SELECT ROWNUM ID, VES_ID, SITE_ID, LINE_OPER, IN_VOYAGE, OUT_VOYAGE, UPD_TS, EFFECTIVE_DATE, UPD_CNT, VES_SERVICE FROM TOPS.VES_VOYAGE
